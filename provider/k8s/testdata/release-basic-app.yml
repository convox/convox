apiVersion: v1
kind: Namespace
metadata:
  annotations:
    convox.com/lock: "false"
    convox.com/params: '{"Test":"foo"}'
  labels:
    app: app1
    name: app1
    provider: k8s
    rack: rack1
    release: release2
    system: convox
    type: app
  name: rack1-app1
  ownerReferences:
  - apiVersion: v1
    blockOwnerDeletion: true
    controller: true
    kind: Namespace
    name: ns1
    uid: uid1
---
apiVersion: v1
kind: Service
metadata:
  annotations:
    service.beta.kubernetes.io/aws-load-balancer-connection-idle-timeout: "3600"
    service.beta.kubernetes.io/aws-load-balancer-type: nlb
  labels:
    app: app1
    balancer: alpha
    provider: k8s
    rack: rack1
    release: release2
    service: web
    system: convox
    type: balancer
  name: balancer-alpha
  namespace: rack1-app1
spec:
  externalTrafficPolicy: Cluster
  loadBalancerSourceRanges:
  - 127.0.0.0/16
  ports:
  - name: "80"
    port: 80
    protocol: TCP
    targetPort: 5000
  selector:
    release: RELEASE2
    service: web
    type: service
  type: LoadBalancer
---
apiVersion: extensions/v1beta1
kind: Ingress
metadata:
  annotations:
    alb.ingress.kubernetes.io/scheme: internet-facing
    ann1: val1
    convox.com/backend-protocol: http
    convox.com/idles: "false"
    kubernetes.io/ingress-class: ""
    nginx.ingress.kubernetes.io/backend-protocol: http
    nginx.ingress.kubernetes.io/proxy-connect-timeout: "60"
    nginx.ingress.kubernetes.io/proxy-read-timeout: "60"
    nginx.ingress.kubernetes.io/proxy-send-timeout: "60"
    nginx.ingress.kubernetes.io/server-snippet: |
      keepalive_timeout 60s;
      grpc_read_timeout 60s;
      grpc_send_timeout 60s;
      client_body_timeout 60s;
    nginx.ingress.kubernetes.io/ssl-redirect: "true"
  labels:
    app: app1
    provider: k8s
    rack: rack1
    release: release2
    service: web
    system: convox
    type: service
  name: web
  namespace: rack1-app1
spec:
  rules:
  - host: service.host
    http:
      paths:
      - backend:
          serviceName: web
          servicePort: 5000
  tls:
  - hosts:
    - service.host
    secretName: cert-web
---
apiVersion: extensions/v1beta1
kind: Ingress
metadata:
  annotations:
    alb.ingress.kubernetes.io/scheme: internet-facing
    ann1: val1
    convox.com/backend-protocol: http
    convox.com/idles: "false"
    kubernetes.io/ingress-class: ""
    nginx.ingress.kubernetes.io/backend-protocol: http
    nginx.ingress.kubernetes.io/proxy-connect-timeout: "60"
    nginx.ingress.kubernetes.io/proxy-read-timeout: "60"
    nginx.ingress.kubernetes.io/proxy-send-timeout: "60"
    nginx.ingress.kubernetes.io/server-snippet: |
      keepalive_timeout 60s;
      grpc_read_timeout 60s;
      grpc_send_timeout 60s;
      client_body_timeout 60s;
    nginx.ingress.kubernetes.io/ssl-redirect: "false"
  labels:
    app: app1
    provider: k8s
    rack: rack1
    release: release2
    service: web2
    system: convox
    type: service
  name: web2
  namespace: rack1-app1
spec:
  rules:
  - host: service.host
    http:
      paths:
      - backend:
          serviceName: web2
          servicePort: 5000
  tls:
  - hosts:
    - service.host
    secretName: cert-web2
---
apiVersion: v1
data:
  URL: postgres://app:6630abdb8bba553e3e48555e302e51@resource-four.rack1-app1.svc.cluster.local:5432/app?sslmode=disable
kind: ConfigMap
metadata:
  labels:
    app: app1
    provider: k8s
    rack: rack1
    release: release2
    resource: four
    system: convox
    type: resource
  name: resource-four
  namespace: rack1-app1
---
apiVersion: v1
kind: PersistentVolumeClaim
metadata:
  labels:
    app: app1
    provider: k8s
    rack: rack1
    release: release2
    resource: four
    system: convox
  name: resource-four
  namespace: rack1-app1
spec:
  accessModes:
  - ReadWriteOnce
  resources:
    requests:
      storage: 10Gi
---
apiVersion: apps/v1
kind: Deployment
metadata:
  annotations:
    atom.conditions: Available=True,Progressing=True/NewReplicaSetAvailable
  labels:
    app: app1
    kind: postgres
    name: four
    provider: k8s
    rack: rack1
    release: release2
    resource: four
    system: convox
    type: resource
  name: resource-four
  namespace: rack1-app1
spec:
  replicas: 1
  selector:
    matchLabels:
      app: app1
      rack: rack1
      resource: four
      system: convox
  template:
    metadata:
      labels:
        app: app1
        rack: rack1
        resource: four
        system: convox
        type: resource
    spec:
      containers:
      - env:
        - name: POSTGRES_DB
          value: app
        - name: POSTGRES_USER
          value: app
        - name: POSTGRES_PASSWORD
          value: 6630abdb8bba553e3e48555e302e51
        - name: PGDATA
          value: /var/lib/postgresql/data/data
        image: postgres:10.5
        imagePullPolicy: IfNotPresent
        name: postgres
        ports:
        - containerPort: 5432
        volumeMounts:
        - mountPath: /var/lib/postgresql/data
          name: data
      volumes:
      - name: data
        persistentVolumeClaim:
          claimName: resource-four
---
apiVersion: v1
kind: Service
metadata:
  labels:
    app: app1
    provider: k8s
    rack: rack1
    release: release2
    resource: four
    system: convox
    type: resource
  name: resource-four
  namespace: rack1-app1
spec:
  ports:
  - port: 5432
  selector:
    app: app1
    rack: rack1
    resource: four
    system: convox
  type: NodePort
---
apiVersion: v1
data:
  URL: postgres://app:6630abdb8bba553e3e48555e302e51@resource-one.rack1-app1.svc.cluster.local:5432/app?sslmode=disable
kind: ConfigMap
metadata:
  labels:
    app: app1
    provider: k8s
    rack: rack1
    release: release2
    resource: one
    system: convox
    type: resource
  name: resource-one
  namespace: rack1-app1
---
apiVersion: v1
kind: PersistentVolumeClaim
metadata:
  labels:
    app: app1
    provider: k8s
    rack: rack1
    release: release2
    resource: one
    system: convox
  name: resource-one
  namespace: rack1-app1
spec:
  accessModes:
  - ReadWriteOnce
  resources:
    requests:
      storage: 10Gi
---
apiVersion: apps/v1
kind: Deployment
metadata:
  annotations:
    atom.conditions: Available=True,Progressing=True/NewReplicaSetAvailable
  labels:
    app: app1
    kind: postgres
    name: one
    provider: k8s
    rack: rack1
    release: release2
    resource: one
    system: convox
    type: resource
  name: resource-one
  namespace: rack1-app1
spec:
  replicas: 1
  selector:
    matchLabels:
      app: app1
      rack: rack1
      resource: one
      system: convox
  template:
    metadata:
      labels:
        app: app1
        rack: rack1
        resource: one
        system: convox
        type: resource
    spec:
      containers:
      - env:
        - name: POSTGRES_DB
          value: app
        - name: POSTGRES_USER
          value: app
        - name: POSTGRES_PASSWORD
          value: 6630abdb8bba553e3e48555e302e51
        - name: PGDATA
          value: /var/lib/postgresql/data/data
        image: postgres:10.5
        imagePullPolicy: IfNotPresent
        name: postgres
        ports:
        - containerPort: 5432
        volumeMounts:
        - mountPath: /var/lib/postgresql/data
          name: data
      volumes:
      - name: data
        persistentVolumeClaim:
          claimName: resource-one
---
apiVersion: v1
kind: Service
metadata:
  labels:
    app: app1
    provider: k8s
    rack: rack1
    release: release2
    resource: one
    system: convox
    type: resource
  name: resource-one
  namespace: rack1-app1
spec:
  ports:
  - port: 5432
  selector:
    app: app1
    rack: rack1
    resource: one
    system: convox
  type: NodePort
---
apiVersion: v1
data:
  URL: value
kind: ConfigMap
metadata:
  labels:
    app: app1
    provider: k8s
    rack: rack1
    release: release2
    resource: three
    system: convox
    type: resource
  name: resource-three
  namespace: rack1-app1
---
apiVersion: v1
data:
  URL: mysql://root:6630abdb8bba553e3e48555e302e51@resource-two.rack1-app1.svc.cluster.local:3306/app
kind: ConfigMap
metadata:
  labels:
    app: app1
    provider: k8s
    rack: rack1
    release: release2
    resource: two
    system: convox
    type: resource
  name: resource-two
  namespace: rack1-app1
---
apiVersion: v1
kind: PersistentVolumeClaim
metadata:
  labels:
    app: app1
    provider: k8s
    rack: rack1
    release: release2
    resource: two
    system: convox
  name: resource-two
  namespace: rack1-app1
spec:
  accessModes:
  - ReadWriteOnce
  resources:
    requests:
      storage: 10Gi
---
apiVersion: apps/v1
kind: Deployment
metadata:
  annotations:
    atom.conditions: Available=True,Progressing=True/NewReplicaSetAvailable
  labels:
    app: app1
    kind: mysql
    provider: k8s
    rack: rack1
    release: release2
    resource: two
    system: convox
    type: resource
  name: resource-two
  namespace: rack1-app1
spec:
  replicas: 1
  selector:
    matchLabels:
      app: app1
      rack: rack1
      resource: two
      system: convox
  template:
    metadata:
      labels:
        app: app1
        rack: rack1
        resource: two
        system: convox
        type: resource
    spec:
      containers:
      - env:
        - name: MYSQL_DATABASE
          value: app
        - name: MYSQL_ROOT_PASSWORD
          value: 6630abdb8bba553e3e48555e302e51
        image: mysql:5.7.23
        imagePullPolicy: IfNotPresent
        name: mysql
        ports:
        - containerPort: 3306
        volumeMounts:
        - mountPath: /var/lib/mysql
          name: data
          subPath: mysql
      volumes:
      - name: data
        persistentVolumeClaim:
          claimName: resource-two
---
apiVersion: v1
kind: Service
metadata:
  labels:
    app: app1
    provider: k8s
    rack: rack1
    release: release2
    resource: two
    system: convox
    type: resource
  name: resource-two
  namespace: rack1-app1
spec:
  ports:
  - port: 3306
  selector:
    app: app1
    rack: rack1
    resource: two
    system: convox
  type: NodePort
---
apiVersion: v1
data:
  APP: YXBwMQ==
  BUILD: QlVJTEQx
  BUILD_DESCRIPTION: Zm9v
  FOO: YmFy
  FOUR_URL: ""
  RACK: cmFjazE=
  RACK_URL: aHR0cHM6Ly9jb252b3g6QGFwaS5uczEuc3ZjLmNsdXN0ZXIubG9jYWw6NTQ0Mw==
  RELEASE: UkVMRUFTRTI=
  SERVICE: YWdlbnQ=
  THREE_URL: dmFsdWU=
kind: Secret
metadata:
  labels:
    app: app1
    provider: k8s
    rack: rack1
    release: release2
    service: agent
    system: convox
    type: env
  name: env-agent
  namespace: rack1-app1
type: Opaque
---
apiVersion: v1
kind: ServiceAccount
metadata:
  annotations: null
  labels:
    app: app1
    provider: k8s
    rack: rack1
    release: release2
    service: agent
    system: convox
    type: serviceaccount
  name: agent
  namespace: rack1-app1
---
apiVersion: apps/v1
kind: DaemonSet
metadata:
  annotations: null
  labels:
    app: app1
    provider: k8s
    rack: rack1
    release: release2
    service: agent
    system: convox
    type: service
  name: agent
  namespace: rack1-app1
spec:
  minReadySeconds: 1
  revisionHistoryLimit: 1
  selector:
    matchLabels:
      app: app1
      rack: rack1
      service: agent
      system: convox
  template:
    metadata:
      annotations:
        scheduler.alpha.kubernetes.io/critical-pod: ""
      labels:
        app: app1
        name: agent
        rack: rack1
        release: RELEASE2
        service: agent
        system: convox
        type: service
    spec:
      containers:
      - env:
        - name: INSTANCE_IP
          valueFrom:
            fieldRef:
              fieldPath: status.hostIP
        envFrom:
        - secretRef:
            name: env-agent
        image: repo1:agent.build1
        imagePullPolicy: IfNotPresent
        name: app1
        ports:
        - containerPort: 8125
          hostPort: 8125
          name: port-8125
          protocol: UDP
        - containerPort: 8126
          hostPort: 8126
          name: port-8126
          protocol: TCP
        resources:
          limits:
            memory: 512Mi
          requests:
            cpu: 256m
            memory: 512Mi
        volumeMounts:
        - mountPath: /etc/convox
          name: ca
      hostNetwork: true
      serviceAccountName: agent
      shareProcessNamespace: true
      terminationGracePeriodSeconds: 30
      volumes:
      - configMap:
          name: ca
          optional: true
        name: ca
---
apiVersion: v1
kind: Service
metadata:
  annotations:
    convox.com/alias: agent.app1.rack1.local
  labels:
    app: app1
    provider: k8s
    rack: rack1
    release: release2
    service: agent
    system: convox
  name: agent
  namespace: rack1-app1
spec:
  ports:
  - name: port-8125
    port: 8125
    protocol: UDP
    targetPort: 8125
  - name: port-8126
    port: 8126
    protocol: TCP
    targetPort: 8126
  selector:
    service: agent
    type: service
  type: ClusterIP
---
apiVersion: v1
data:
  APP: YXBwMQ==
  BUILD: QlVJTEQx
  BUILD_DESCRIPTION: Zm9v
  FOO: YmFy
  FOUR_URL: ""
  RACK: cmFjazE=
  RACK_URL: aHR0cHM6Ly9jb252b3g6QGFwaS5uczEuc3ZjLmNsdXN0ZXIubG9jYWw6NTQ0Mw==
  RELEASE: UkVMRUFTRTI=
  SERVICE: ZGVwbG95bWVudA==
  THREE_URL: dmFsdWU=
kind: Secret
metadata:
  labels:
    app: app1
    provider: k8s
    rack: rack1
    release: release2
    service: deployment
    system: convox
    type: env
  name: env-deployment
  namespace: rack1-app1
type: Opaque
---
apiVersion: v1
kind: ServiceAccount
metadata:
  annotations: null
  labels:
    app: app1
    provider: k8s
    rack: rack1
    release: release2
    service: deployment
    system: convox
    type: serviceaccount
  name: deployment
  namespace: rack1-app1
---
apiVersion: apps/v1
kind: Deployment
metadata:
  annotations:
    atom.conditions: Available=True,Progressing=True/NewReplicaSetAvailable
  labels:
    app: app1
    provider: k8s
    rack: rack1
    release: release2
    service: deployment
    system: convox
    type: service
  name: deployment
  namespace: rack1-app1
spec:
  minReadySeconds: 1
  replicas: 1
  revisionHistoryLimit: 1
  selector:
    matchLabels:
      app: app1
      rack: rack1
      service: deployment
      system: convox
  strategy:
    rollingUpdate:
      maxSurge: 10%
      maxUnavailable: 75%
    type: RollingUpdate
  template:
    metadata:
      annotations: null
      labels:
        app: app1
        name: deployment
        rack: rack1
        release: RELEASE2
        service: deployment
        system: convox
        type: service
    spec:
      containers:
      - env:
        - name: INSTANCE_IP
          valueFrom:
            fieldRef:
              fieldPath: status.hostIP
        envFrom:
        - secretRef:
            name: env-deployment
        image: repo1:deployment.build1
        imagePullPolicy: IfNotPresent
        name: app1
        ports: null
        resources:
          limits:
            memory: 512Mi
          requests:
            cpu: 256m
            memory: 512Mi
        volumeMounts:
        - mountPath: /etc/convox
          name: ca
      serviceAccountName: deployment
      shareProcessNamespace: true
      terminationGracePeriodSeconds: 30
      volumes:
      - configMap:
          name: ca
          optional: true
        name: ca
---
apiVersion: v1
data:
  APP: YXBwMQ==
  BUILD: QlVJTEQx
  BUILD_DESCRIPTION: Zm9v
  FOO: YmFy
  FOUR_URL: ""
  RACK: cmFjazE=
  RACK_URL: aHR0cHM6Ly9jb252b3g6QGFwaS5uczEuc3ZjLmNsdXN0ZXIubG9jYWw6NTQ0Mw==
  RELEASE: UkVMRUFTRTI=
  SERVICE: c2luZ2xldG9u
  THREE_URL: dmFsdWU=
kind: Secret
metadata:
  labels:
    app: app1
    provider: k8s
    rack: rack1
    release: release2
    service: singleton
    system: convox
    type: env
  name: env-singleton
  namespace: rack1-app1
type: Opaque
---
apiVersion: v1
kind: ServiceAccount
metadata:
  annotations: null
  labels:
    app: app1
    provider: k8s
    rack: rack1
    release: release2
    service: singleton
    system: convox
    type: serviceaccount
  name: singleton
  namespace: rack1-app1
---
apiVersion: apps/v1
kind: Deployment
metadata:
  annotations:
    atom.conditions: Available=True,Progressing=True/NewReplicaSetAvailable
  labels:
    app: app1
    provider: k8s
    rack: rack1
    release: release2
    service: singleton
    system: convox
    type: service
  name: singleton
  namespace: rack1-app1
spec:
  minReadySeconds: 1
  replicas: 1
  revisionHistoryLimit: 1
  selector:
    matchLabels:
      app: app1
      rack: rack1
      service: singleton
      system: convox
  strategy:
    rollingUpdate:
      maxSurge: 0%
      maxUnavailable: 100%
    type: RollingUpdate
  template:
    metadata:
      annotations: null
      labels:
        app: app1
        name: singleton
        rack: rack1
        release: RELEASE2
        service: singleton
        system: convox
        type: service
    spec:
      containers:
      - env:
        - name: INSTANCE_IP
          valueFrom:
            fieldRef:
              fieldPath: status.hostIP
        envFrom:
        - secretRef:
            name: env-singleton
        image: repo1:singleton.build1
        imagePullPolicy: IfNotPresent
        name: app1
        ports: null
        resources:
          limits:
            memory: 512Mi
          requests:
            cpu: 256m
            memory: 512Mi
        volumeMounts:
        - mountPath: /etc/convox
          name: ca
      serviceAccountName: singleton
      shareProcessNamespace: true
      terminationGracePeriodSeconds: 30
      volumes:
      - configMap:
          name: ca
          optional: true
        name: ca
---
apiVersion: v1
data:
  APP: YXBwMQ==
  BUILD: QlVJTEQx
  BUILD_DESCRIPTION: Zm9v
  FOO: YmFy
  FOUR_URL: ""
  PORT: NTAwMA==
  RACK: cmFjazE=
  RACK_URL: aHR0cHM6Ly9jb252b3g6QGFwaS5uczEuc3ZjLmNsdXN0ZXIubG9jYWw6NTQ0Mw==
  RELEASE: UkVMRUFTRTI=
  SERVICE: d2Vi
  THREE_URL: dmFsdWU=
kind: Secret
metadata:
  labels:
    app: app1
    provider: k8s
    rack: rack1
    release: release2
    service: web
    system: convox
    type: env
  name: env-web
  namespace: rack1-app1
type: Opaque
---
apiVersion: v1
kind: ServiceAccount
metadata:
  annotations: null
  labels:
    app: app1
    provider: k8s
    rack: rack1
    release: release2
    service: web
    system: convox
    type: serviceaccount
  name: web
  namespace: rack1-app1
---
apiVersion: apps/v1
kind: Deployment
metadata:
  annotations:
    atom.conditions: Available=True,Progressing=True/NewReplicaSetAvailable
  labels:
    app: app1
    provider: k8s
    rack: rack1
    release: release2
    service: web
    system: convox
    type: service
  name: web
  namespace: rack1-app1
spec:
  minReadySeconds: 1
  replicas: 1
  revisionHistoryLimit: 1
  selector:
    matchLabels:
      app: app1
      rack: rack1
      service: web
      system: convox
  strategy:
    rollingUpdate:
      maxSurge: 100%
      maxUnavailable: 50%
    type: RollingUpdate
  template:
    metadata:
      annotations: null
      labels:
        app: app1
        name: web
        rack: rack1
        release: RELEASE2
        service: web
        system: convox
        type: service
    spec:
      containers:
      - env:
        - name: INSTANCE_IP
          valueFrom:
            fieldRef:
              fieldPath: status.hostIP
        - name: ONE_URL
          valueFrom:
            configMapKeyRef:
              key: URL
              name: resource-one
        - name: OTHER_URL
          valueFrom:
            configMapKeyRef:
              key: URL
              name: resource-two
        - name: THREE_URL
          valueFrom:
            configMapKeyRef:
              key: URL
              name: resource-three
        - name: FOUR_URL
          valueFrom:
            configMapKeyRef:
              key: URL
              name: resource-four
        envFrom:
        - secretRef:
            name: env-web
        image: repo1:web.build1
        imagePullPolicy: IfNotPresent
        name: app1
        ports:
        - containerPort: 5000
          name: main
        readinessProbe:
          failureThreshold: 3
          httpGet:
            path: /
            port: 5000
            scheme: HTTP
          initialDelaySeconds: 5
          periodSeconds: 5
          successThreshold: 1
          timeoutSeconds: 4
        resources:
          limits:
            memory: 512Mi
          requests:
            cpu: 256m
            memory: 512Mi
        volumeMounts:
        - mountPath: /etc/convox
          name: ca
      serviceAccountName: web
      shareProcessNamespace: true
      terminationGracePeriodSeconds: 30
      volumes:
      - configMap:
          name: ca
          optional: true
        name: ca
---
apiVersion: v1
kind: Service
metadata:
  annotations:
    convox.com/alias: web.app1.rack1.local
  labels:
    app: app1
    provider: k8s
    rack: rack1
    release: release2
    service: web
    system: convox
  name: web
  namespace: rack1-app1
spec:
  ports:
  - name: main
    port: 5000
    protocol: TCP
    targetPort: main
  selector:
    service: web
    type: service
  type: ClusterIP
---
apiVersion: v1
data:
  APP: YXBwMQ==
  BUILD: QlVJTEQx
  BUILD_DESCRIPTION: Zm9v
  FOO: YmFy
  FOUR_URL: ""
  PORT: NTAwMA==
  RACK: cmFjazE=
  RACK_URL: aHR0cHM6Ly9jb252b3g6QGFwaS5uczEuc3ZjLmNsdXN0ZXIubG9jYWw6NTQ0Mw==
  RELEASE: UkVMRUFTRTI=
  SERVICE: d2ViMg==
  THREE_URL: dmFsdWU=
kind: Secret
metadata:
  labels:
    app: app1
    provider: k8s
    rack: rack1
    release: release2
    service: web2
    system: convox
    type: env
  name: env-web2
  namespace: rack1-app1
type: Opaque
---
apiVersion: v1
kind: ServiceAccount
metadata:
  annotations: null
  labels:
    app: app1
    provider: k8s
    rack: rack1
    release: release2
    service: web2
    system: convox
    type: serviceaccount
  name: web2
  namespace: rack1-app1
---
apiVersion: apps/v1
kind: Deployment
metadata:
  annotations:
    atom.conditions: Available=True,Progressing=True/NewReplicaSetAvailable
  labels:
    app: app1
    provider: k8s
    rack: rack1
    release: release2
    service: web2
    system: convox
    type: service
  name: web2
  namespace: rack1-app1
spec:
  minReadySeconds: 1
  replicas: 1
  revisionHistoryLimit: 1
  selector:
    matchLabels:
      app: app1
      rack: rack1
      service: web2
      system: convox
  strategy:
    rollingUpdate:
      maxSurge: 100%
      maxUnavailable: 50%
    type: RollingUpdate
  template:
    metadata:
      annotations: null
      labels:
        app: app1
        name: web2
        rack: rack1
        release: RELEASE2
        service: web2
        system: convox
        type: service
    spec:
      containers:
      - env:
        - name: INSTANCE_IP
          valueFrom:
            fieldRef:
              fieldPath: status.hostIP
        - name: ONE_URL
          valueFrom:
            configMapKeyRef:
              key: URL
              name: resource-one
        - name: OTHER_URL
          valueFrom:
            configMapKeyRef:
              key: URL
              name: resource-two
        - name: THREE_URL
          valueFrom:
            configMapKeyRef:
              key: URL
              name: resource-three
        - name: FOUR_URL
          valueFrom:
            configMapKeyRef:
              key: URL
              name: resource-four
        envFrom:
        - secretRef:
            name: env-web2
        image: repo1:web2.build1
        imagePullPolicy: IfNotPresent
        name: app1
        ports:
        - containerPort: 5000
          name: main
        readinessProbe:
          failureThreshold: 3
          httpGet:
            path: /
            port: 5000
            scheme: HTTP
          initialDelaySeconds: 5
          periodSeconds: 5
          successThreshold: 1
          timeoutSeconds: 4
        resources:
          limits:
            memory: 512Mi
          requests:
            cpu: 256m
            memory: 512Mi
        volumeMounts:
        - mountPath: /etc/convox
          name: ca
      serviceAccountName: web2
      shareProcessNamespace: true
      terminationGracePeriodSeconds: 30
      volumes:
      - configMap:
          name: ca
          optional: true
        name: ca
---
apiVersion: v1
kind: Service
metadata:
  annotations:
    convox.com/alias: web2.app1.rack1.local
  labels:
    app: app1
    provider: k8s
    rack: rack1
    release: release2
    service: web2
    system: convox
  name: web2
  namespace: rack1-app1
spec:
  ports:
  - name: main
    port: 5000
    protocol: TCP
    targetPort: main
  selector:
    service: web2
    type: service
  type: ClusterIP
---
null
---
apiVersion: batch/v1beta1
kind: CronJob
metadata:
  labels:
    app: app1
    provider: k8s
    rack: rack1
    release: release2
    system: convox
  name: timer-test
  namespace: rack1-app1
spec:
  concurrencyPolicy: Forbid
  failedJobsHistoryLimit: 1
  jobTemplate:
    spec:
      backoffLimit: 0
      template:
        metadata:
          labels:
            app: app1
            name: test
            rack: rack1
            release: RELEASE2
            service: web
            system: convox
            type: timer
        spec:
          containers:
          - args:
            - bin/test
            env:
            - name: INSTANCE_IP
              valueFrom:
                fieldRef:
                  fieldPath: status.hostIP
            - name: ONE_URL
              valueFrom:
                configMapKeyRef:
                  key: URL
                  name: resource-one
            - name: OTHER_URL
              valueFrom:
                configMapKeyRef:
                  key: URL
                  name: resource-two
            - name: THREE_URL
              valueFrom:
                configMapKeyRef:
                  key: URL
                  name: resource-three
            - name: FOUR_URL
              valueFrom:
                configMapKeyRef:
                  key: URL
                  name: resource-four
            envFrom:
            - secretRef:
                name: env-web
            image: repo1:web.build1
            imagePullPolicy: IfNotPresent
            name: app1
            resources:
              limits:
                memory: 512Mi
              requests:
                cpu: 256m
                memory: 512Mi
            volumeMounts:
            - mountPath: /etc/convox
              name: ca
          restartPolicy: Never
          shareProcessNamespace: true
          volumes:
          - configMap:
              name: ca
              optional: true
            name: ca
  schedule: '*/5 * * * *'
  successfulJobsHistoryLimit: 1
---
null
