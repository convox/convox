// Code generated by mockery v2.12.3. DO NOT EDIT.

package mocks

import (
	cloudwatchlogs "github.com/aws/aws-sdk-go/service/cloudwatchlogs"

	context "context"

	mock "github.com/stretchr/testify/mock"

	request "github.com/aws/aws-sdk-go/aws/request"
)

// CloudWatchLogsAPI is an autogenerated mock type for the CloudWatchLogsAPI type
type CloudWatchLogsAPI struct {
	mock.Mock
}

// AssociateKmsKey provides a mock function with given fields: _a0
func (_m *CloudWatchLogsAPI) AssociateKmsKey(_a0 *cloudwatchlogs.AssociateKmsKeyInput) (*cloudwatchlogs.AssociateKmsKeyOutput, error) {
	ret := _m.Called(_a0)

	var r0 *cloudwatchlogs.AssociateKmsKeyOutput
	if rf, ok := ret.Get(0).(func(*cloudwatchlogs.AssociateKmsKeyInput) *cloudwatchlogs.AssociateKmsKeyOutput); ok {
		r0 = rf(_a0)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*cloudwatchlogs.AssociateKmsKeyOutput)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(*cloudwatchlogs.AssociateKmsKeyInput) error); ok {
		r1 = rf(_a0)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// AssociateKmsKeyRequest provides a mock function with given fields: _a0
func (_m *CloudWatchLogsAPI) AssociateKmsKeyRequest(_a0 *cloudwatchlogs.AssociateKmsKeyInput) (*request.Request, *cloudwatchlogs.AssociateKmsKeyOutput) {
	ret := _m.Called(_a0)

	var r0 *request.Request
	if rf, ok := ret.Get(0).(func(*cloudwatchlogs.AssociateKmsKeyInput) *request.Request); ok {
		r0 = rf(_a0)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*request.Request)
		}
	}

	var r1 *cloudwatchlogs.AssociateKmsKeyOutput
	if rf, ok := ret.Get(1).(func(*cloudwatchlogs.AssociateKmsKeyInput) *cloudwatchlogs.AssociateKmsKeyOutput); ok {
		r1 = rf(_a0)
	} else {
		if ret.Get(1) != nil {
			r1 = ret.Get(1).(*cloudwatchlogs.AssociateKmsKeyOutput)
		}
	}

	return r0, r1
}

// AssociateKmsKeyWithContext provides a mock function with given fields: _a0, _a1, _a2
func (_m *CloudWatchLogsAPI) AssociateKmsKeyWithContext(_a0 context.Context, _a1 *cloudwatchlogs.AssociateKmsKeyInput, _a2 ...request.Option) (*cloudwatchlogs.AssociateKmsKeyOutput, error) {
	_va := make([]interface{}, len(_a2))
	for _i := range _a2 {
		_va[_i] = _a2[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, _a0, _a1)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	var r0 *cloudwatchlogs.AssociateKmsKeyOutput
	if rf, ok := ret.Get(0).(func(context.Context, *cloudwatchlogs.AssociateKmsKeyInput, ...request.Option) *cloudwatchlogs.AssociateKmsKeyOutput); ok {
		r0 = rf(_a0, _a1, _a2...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*cloudwatchlogs.AssociateKmsKeyOutput)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, *cloudwatchlogs.AssociateKmsKeyInput, ...request.Option) error); ok {
		r1 = rf(_a0, _a1, _a2...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// CancelExportTask provides a mock function with given fields: _a0
func (_m *CloudWatchLogsAPI) CancelExportTask(_a0 *cloudwatchlogs.CancelExportTaskInput) (*cloudwatchlogs.CancelExportTaskOutput, error) {
	ret := _m.Called(_a0)

	var r0 *cloudwatchlogs.CancelExportTaskOutput
	if rf, ok := ret.Get(0).(func(*cloudwatchlogs.CancelExportTaskInput) *cloudwatchlogs.CancelExportTaskOutput); ok {
		r0 = rf(_a0)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*cloudwatchlogs.CancelExportTaskOutput)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(*cloudwatchlogs.CancelExportTaskInput) error); ok {
		r1 = rf(_a0)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// CancelExportTaskRequest provides a mock function with given fields: _a0
func (_m *CloudWatchLogsAPI) CancelExportTaskRequest(_a0 *cloudwatchlogs.CancelExportTaskInput) (*request.Request, *cloudwatchlogs.CancelExportTaskOutput) {
	ret := _m.Called(_a0)

	var r0 *request.Request
	if rf, ok := ret.Get(0).(func(*cloudwatchlogs.CancelExportTaskInput) *request.Request); ok {
		r0 = rf(_a0)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*request.Request)
		}
	}

	var r1 *cloudwatchlogs.CancelExportTaskOutput
	if rf, ok := ret.Get(1).(func(*cloudwatchlogs.CancelExportTaskInput) *cloudwatchlogs.CancelExportTaskOutput); ok {
		r1 = rf(_a0)
	} else {
		if ret.Get(1) != nil {
			r1 = ret.Get(1).(*cloudwatchlogs.CancelExportTaskOutput)
		}
	}

	return r0, r1
}

// CancelExportTaskWithContext provides a mock function with given fields: _a0, _a1, _a2
func (_m *CloudWatchLogsAPI) CancelExportTaskWithContext(_a0 context.Context, _a1 *cloudwatchlogs.CancelExportTaskInput, _a2 ...request.Option) (*cloudwatchlogs.CancelExportTaskOutput, error) {
	_va := make([]interface{}, len(_a2))
	for _i := range _a2 {
		_va[_i] = _a2[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, _a0, _a1)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	var r0 *cloudwatchlogs.CancelExportTaskOutput
	if rf, ok := ret.Get(0).(func(context.Context, *cloudwatchlogs.CancelExportTaskInput, ...request.Option) *cloudwatchlogs.CancelExportTaskOutput); ok {
		r0 = rf(_a0, _a1, _a2...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*cloudwatchlogs.CancelExportTaskOutput)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, *cloudwatchlogs.CancelExportTaskInput, ...request.Option) error); ok {
		r1 = rf(_a0, _a1, _a2...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// CreateDelivery provides a mock function with given fields: _a0
func (_m *CloudWatchLogsAPI) CreateDelivery(_a0 *cloudwatchlogs.CreateDeliveryInput) (*cloudwatchlogs.CreateDeliveryOutput, error) {
	ret := _m.Called(_a0)

	var r0 *cloudwatchlogs.CreateDeliveryOutput
	if rf, ok := ret.Get(0).(func(*cloudwatchlogs.CreateDeliveryInput) *cloudwatchlogs.CreateDeliveryOutput); ok {
		r0 = rf(_a0)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*cloudwatchlogs.CreateDeliveryOutput)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(*cloudwatchlogs.CreateDeliveryInput) error); ok {
		r1 = rf(_a0)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// CreateDeliveryRequest provides a mock function with given fields: _a0
func (_m *CloudWatchLogsAPI) CreateDeliveryRequest(_a0 *cloudwatchlogs.CreateDeliveryInput) (*request.Request, *cloudwatchlogs.CreateDeliveryOutput) {
	ret := _m.Called(_a0)

	var r0 *request.Request
	if rf, ok := ret.Get(0).(func(*cloudwatchlogs.CreateDeliveryInput) *request.Request); ok {
		r0 = rf(_a0)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*request.Request)
		}
	}

	var r1 *cloudwatchlogs.CreateDeliveryOutput
	if rf, ok := ret.Get(1).(func(*cloudwatchlogs.CreateDeliveryInput) *cloudwatchlogs.CreateDeliveryOutput); ok {
		r1 = rf(_a0)
	} else {
		if ret.Get(1) != nil {
			r1 = ret.Get(1).(*cloudwatchlogs.CreateDeliveryOutput)
		}
	}

	return r0, r1
}

// CreateDeliveryWithContext provides a mock function with given fields: _a0, _a1, _a2
func (_m *CloudWatchLogsAPI) CreateDeliveryWithContext(_a0 context.Context, _a1 *cloudwatchlogs.CreateDeliveryInput, _a2 ...request.Option) (*cloudwatchlogs.CreateDeliveryOutput, error) {
	_va := make([]interface{}, len(_a2))
	for _i := range _a2 {
		_va[_i] = _a2[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, _a0, _a1)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	var r0 *cloudwatchlogs.CreateDeliveryOutput
	if rf, ok := ret.Get(0).(func(context.Context, *cloudwatchlogs.CreateDeliveryInput, ...request.Option) *cloudwatchlogs.CreateDeliveryOutput); ok {
		r0 = rf(_a0, _a1, _a2...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*cloudwatchlogs.CreateDeliveryOutput)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, *cloudwatchlogs.CreateDeliveryInput, ...request.Option) error); ok {
		r1 = rf(_a0, _a1, _a2...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// CreateExportTask provides a mock function with given fields: _a0
func (_m *CloudWatchLogsAPI) CreateExportTask(_a0 *cloudwatchlogs.CreateExportTaskInput) (*cloudwatchlogs.CreateExportTaskOutput, error) {
	ret := _m.Called(_a0)

	var r0 *cloudwatchlogs.CreateExportTaskOutput
	if rf, ok := ret.Get(0).(func(*cloudwatchlogs.CreateExportTaskInput) *cloudwatchlogs.CreateExportTaskOutput); ok {
		r0 = rf(_a0)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*cloudwatchlogs.CreateExportTaskOutput)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(*cloudwatchlogs.CreateExportTaskInput) error); ok {
		r1 = rf(_a0)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// CreateExportTaskRequest provides a mock function with given fields: _a0
func (_m *CloudWatchLogsAPI) CreateExportTaskRequest(_a0 *cloudwatchlogs.CreateExportTaskInput) (*request.Request, *cloudwatchlogs.CreateExportTaskOutput) {
	ret := _m.Called(_a0)

	var r0 *request.Request
	if rf, ok := ret.Get(0).(func(*cloudwatchlogs.CreateExportTaskInput) *request.Request); ok {
		r0 = rf(_a0)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*request.Request)
		}
	}

	var r1 *cloudwatchlogs.CreateExportTaskOutput
	if rf, ok := ret.Get(1).(func(*cloudwatchlogs.CreateExportTaskInput) *cloudwatchlogs.CreateExportTaskOutput); ok {
		r1 = rf(_a0)
	} else {
		if ret.Get(1) != nil {
			r1 = ret.Get(1).(*cloudwatchlogs.CreateExportTaskOutput)
		}
	}

	return r0, r1
}

// CreateExportTaskWithContext provides a mock function with given fields: _a0, _a1, _a2
func (_m *CloudWatchLogsAPI) CreateExportTaskWithContext(_a0 context.Context, _a1 *cloudwatchlogs.CreateExportTaskInput, _a2 ...request.Option) (*cloudwatchlogs.CreateExportTaskOutput, error) {
	_va := make([]interface{}, len(_a2))
	for _i := range _a2 {
		_va[_i] = _a2[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, _a0, _a1)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	var r0 *cloudwatchlogs.CreateExportTaskOutput
	if rf, ok := ret.Get(0).(func(context.Context, *cloudwatchlogs.CreateExportTaskInput, ...request.Option) *cloudwatchlogs.CreateExportTaskOutput); ok {
		r0 = rf(_a0, _a1, _a2...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*cloudwatchlogs.CreateExportTaskOutput)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, *cloudwatchlogs.CreateExportTaskInput, ...request.Option) error); ok {
		r1 = rf(_a0, _a1, _a2...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// CreateLogAnomalyDetector provides a mock function with given fields: _a0
func (_m *CloudWatchLogsAPI) CreateLogAnomalyDetector(_a0 *cloudwatchlogs.CreateLogAnomalyDetectorInput) (*cloudwatchlogs.CreateLogAnomalyDetectorOutput, error) {
	ret := _m.Called(_a0)

	var r0 *cloudwatchlogs.CreateLogAnomalyDetectorOutput
	if rf, ok := ret.Get(0).(func(*cloudwatchlogs.CreateLogAnomalyDetectorInput) *cloudwatchlogs.CreateLogAnomalyDetectorOutput); ok {
		r0 = rf(_a0)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*cloudwatchlogs.CreateLogAnomalyDetectorOutput)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(*cloudwatchlogs.CreateLogAnomalyDetectorInput) error); ok {
		r1 = rf(_a0)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// CreateLogAnomalyDetectorRequest provides a mock function with given fields: _a0
func (_m *CloudWatchLogsAPI) CreateLogAnomalyDetectorRequest(_a0 *cloudwatchlogs.CreateLogAnomalyDetectorInput) (*request.Request, *cloudwatchlogs.CreateLogAnomalyDetectorOutput) {
	ret := _m.Called(_a0)

	var r0 *request.Request
	if rf, ok := ret.Get(0).(func(*cloudwatchlogs.CreateLogAnomalyDetectorInput) *request.Request); ok {
		r0 = rf(_a0)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*request.Request)
		}
	}

	var r1 *cloudwatchlogs.CreateLogAnomalyDetectorOutput
	if rf, ok := ret.Get(1).(func(*cloudwatchlogs.CreateLogAnomalyDetectorInput) *cloudwatchlogs.CreateLogAnomalyDetectorOutput); ok {
		r1 = rf(_a0)
	} else {
		if ret.Get(1) != nil {
			r1 = ret.Get(1).(*cloudwatchlogs.CreateLogAnomalyDetectorOutput)
		}
	}

	return r0, r1
}

// CreateLogAnomalyDetectorWithContext provides a mock function with given fields: _a0, _a1, _a2
func (_m *CloudWatchLogsAPI) CreateLogAnomalyDetectorWithContext(_a0 context.Context, _a1 *cloudwatchlogs.CreateLogAnomalyDetectorInput, _a2 ...request.Option) (*cloudwatchlogs.CreateLogAnomalyDetectorOutput, error) {
	_va := make([]interface{}, len(_a2))
	for _i := range _a2 {
		_va[_i] = _a2[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, _a0, _a1)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	var r0 *cloudwatchlogs.CreateLogAnomalyDetectorOutput
	if rf, ok := ret.Get(0).(func(context.Context, *cloudwatchlogs.CreateLogAnomalyDetectorInput, ...request.Option) *cloudwatchlogs.CreateLogAnomalyDetectorOutput); ok {
		r0 = rf(_a0, _a1, _a2...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*cloudwatchlogs.CreateLogAnomalyDetectorOutput)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, *cloudwatchlogs.CreateLogAnomalyDetectorInput, ...request.Option) error); ok {
		r1 = rf(_a0, _a1, _a2...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// CreateLogGroup provides a mock function with given fields: _a0
func (_m *CloudWatchLogsAPI) CreateLogGroup(_a0 *cloudwatchlogs.CreateLogGroupInput) (*cloudwatchlogs.CreateLogGroupOutput, error) {
	ret := _m.Called(_a0)

	var r0 *cloudwatchlogs.CreateLogGroupOutput
	if rf, ok := ret.Get(0).(func(*cloudwatchlogs.CreateLogGroupInput) *cloudwatchlogs.CreateLogGroupOutput); ok {
		r0 = rf(_a0)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*cloudwatchlogs.CreateLogGroupOutput)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(*cloudwatchlogs.CreateLogGroupInput) error); ok {
		r1 = rf(_a0)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// CreateLogGroupRequest provides a mock function with given fields: _a0
func (_m *CloudWatchLogsAPI) CreateLogGroupRequest(_a0 *cloudwatchlogs.CreateLogGroupInput) (*request.Request, *cloudwatchlogs.CreateLogGroupOutput) {
	ret := _m.Called(_a0)

	var r0 *request.Request
	if rf, ok := ret.Get(0).(func(*cloudwatchlogs.CreateLogGroupInput) *request.Request); ok {
		r0 = rf(_a0)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*request.Request)
		}
	}

	var r1 *cloudwatchlogs.CreateLogGroupOutput
	if rf, ok := ret.Get(1).(func(*cloudwatchlogs.CreateLogGroupInput) *cloudwatchlogs.CreateLogGroupOutput); ok {
		r1 = rf(_a0)
	} else {
		if ret.Get(1) != nil {
			r1 = ret.Get(1).(*cloudwatchlogs.CreateLogGroupOutput)
		}
	}

	return r0, r1
}

// CreateLogGroupWithContext provides a mock function with given fields: _a0, _a1, _a2
func (_m *CloudWatchLogsAPI) CreateLogGroupWithContext(_a0 context.Context, _a1 *cloudwatchlogs.CreateLogGroupInput, _a2 ...request.Option) (*cloudwatchlogs.CreateLogGroupOutput, error) {
	_va := make([]interface{}, len(_a2))
	for _i := range _a2 {
		_va[_i] = _a2[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, _a0, _a1)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	var r0 *cloudwatchlogs.CreateLogGroupOutput
	if rf, ok := ret.Get(0).(func(context.Context, *cloudwatchlogs.CreateLogGroupInput, ...request.Option) *cloudwatchlogs.CreateLogGroupOutput); ok {
		r0 = rf(_a0, _a1, _a2...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*cloudwatchlogs.CreateLogGroupOutput)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, *cloudwatchlogs.CreateLogGroupInput, ...request.Option) error); ok {
		r1 = rf(_a0, _a1, _a2...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// CreateLogStream provides a mock function with given fields: _a0
func (_m *CloudWatchLogsAPI) CreateLogStream(_a0 *cloudwatchlogs.CreateLogStreamInput) (*cloudwatchlogs.CreateLogStreamOutput, error) {
	ret := _m.Called(_a0)

	var r0 *cloudwatchlogs.CreateLogStreamOutput
	if rf, ok := ret.Get(0).(func(*cloudwatchlogs.CreateLogStreamInput) *cloudwatchlogs.CreateLogStreamOutput); ok {
		r0 = rf(_a0)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*cloudwatchlogs.CreateLogStreamOutput)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(*cloudwatchlogs.CreateLogStreamInput) error); ok {
		r1 = rf(_a0)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// CreateLogStreamRequest provides a mock function with given fields: _a0
func (_m *CloudWatchLogsAPI) CreateLogStreamRequest(_a0 *cloudwatchlogs.CreateLogStreamInput) (*request.Request, *cloudwatchlogs.CreateLogStreamOutput) {
	ret := _m.Called(_a0)

	var r0 *request.Request
	if rf, ok := ret.Get(0).(func(*cloudwatchlogs.CreateLogStreamInput) *request.Request); ok {
		r0 = rf(_a0)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*request.Request)
		}
	}

	var r1 *cloudwatchlogs.CreateLogStreamOutput
	if rf, ok := ret.Get(1).(func(*cloudwatchlogs.CreateLogStreamInput) *cloudwatchlogs.CreateLogStreamOutput); ok {
		r1 = rf(_a0)
	} else {
		if ret.Get(1) != nil {
			r1 = ret.Get(1).(*cloudwatchlogs.CreateLogStreamOutput)
		}
	}

	return r0, r1
}

// CreateLogStreamWithContext provides a mock function with given fields: _a0, _a1, _a2
func (_m *CloudWatchLogsAPI) CreateLogStreamWithContext(_a0 context.Context, _a1 *cloudwatchlogs.CreateLogStreamInput, _a2 ...request.Option) (*cloudwatchlogs.CreateLogStreamOutput, error) {
	_va := make([]interface{}, len(_a2))
	for _i := range _a2 {
		_va[_i] = _a2[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, _a0, _a1)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	var r0 *cloudwatchlogs.CreateLogStreamOutput
	if rf, ok := ret.Get(0).(func(context.Context, *cloudwatchlogs.CreateLogStreamInput, ...request.Option) *cloudwatchlogs.CreateLogStreamOutput); ok {
		r0 = rf(_a0, _a1, _a2...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*cloudwatchlogs.CreateLogStreamOutput)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, *cloudwatchlogs.CreateLogStreamInput, ...request.Option) error); ok {
		r1 = rf(_a0, _a1, _a2...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// DeleteAccountPolicy provides a mock function with given fields: _a0
func (_m *CloudWatchLogsAPI) DeleteAccountPolicy(_a0 *cloudwatchlogs.DeleteAccountPolicyInput) (*cloudwatchlogs.DeleteAccountPolicyOutput, error) {
	ret := _m.Called(_a0)

	var r0 *cloudwatchlogs.DeleteAccountPolicyOutput
	if rf, ok := ret.Get(0).(func(*cloudwatchlogs.DeleteAccountPolicyInput) *cloudwatchlogs.DeleteAccountPolicyOutput); ok {
		r0 = rf(_a0)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*cloudwatchlogs.DeleteAccountPolicyOutput)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(*cloudwatchlogs.DeleteAccountPolicyInput) error); ok {
		r1 = rf(_a0)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// DeleteAccountPolicyRequest provides a mock function with given fields: _a0
func (_m *CloudWatchLogsAPI) DeleteAccountPolicyRequest(_a0 *cloudwatchlogs.DeleteAccountPolicyInput) (*request.Request, *cloudwatchlogs.DeleteAccountPolicyOutput) {
	ret := _m.Called(_a0)

	var r0 *request.Request
	if rf, ok := ret.Get(0).(func(*cloudwatchlogs.DeleteAccountPolicyInput) *request.Request); ok {
		r0 = rf(_a0)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*request.Request)
		}
	}

	var r1 *cloudwatchlogs.DeleteAccountPolicyOutput
	if rf, ok := ret.Get(1).(func(*cloudwatchlogs.DeleteAccountPolicyInput) *cloudwatchlogs.DeleteAccountPolicyOutput); ok {
		r1 = rf(_a0)
	} else {
		if ret.Get(1) != nil {
			r1 = ret.Get(1).(*cloudwatchlogs.DeleteAccountPolicyOutput)
		}
	}

	return r0, r1
}

// DeleteAccountPolicyWithContext provides a mock function with given fields: _a0, _a1, _a2
func (_m *CloudWatchLogsAPI) DeleteAccountPolicyWithContext(_a0 context.Context, _a1 *cloudwatchlogs.DeleteAccountPolicyInput, _a2 ...request.Option) (*cloudwatchlogs.DeleteAccountPolicyOutput, error) {
	_va := make([]interface{}, len(_a2))
	for _i := range _a2 {
		_va[_i] = _a2[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, _a0, _a1)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	var r0 *cloudwatchlogs.DeleteAccountPolicyOutput
	if rf, ok := ret.Get(0).(func(context.Context, *cloudwatchlogs.DeleteAccountPolicyInput, ...request.Option) *cloudwatchlogs.DeleteAccountPolicyOutput); ok {
		r0 = rf(_a0, _a1, _a2...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*cloudwatchlogs.DeleteAccountPolicyOutput)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, *cloudwatchlogs.DeleteAccountPolicyInput, ...request.Option) error); ok {
		r1 = rf(_a0, _a1, _a2...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// DeleteDataProtectionPolicy provides a mock function with given fields: _a0
func (_m *CloudWatchLogsAPI) DeleteDataProtectionPolicy(_a0 *cloudwatchlogs.DeleteDataProtectionPolicyInput) (*cloudwatchlogs.DeleteDataProtectionPolicyOutput, error) {
	ret := _m.Called(_a0)

	var r0 *cloudwatchlogs.DeleteDataProtectionPolicyOutput
	if rf, ok := ret.Get(0).(func(*cloudwatchlogs.DeleteDataProtectionPolicyInput) *cloudwatchlogs.DeleteDataProtectionPolicyOutput); ok {
		r0 = rf(_a0)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*cloudwatchlogs.DeleteDataProtectionPolicyOutput)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(*cloudwatchlogs.DeleteDataProtectionPolicyInput) error); ok {
		r1 = rf(_a0)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// DeleteDataProtectionPolicyRequest provides a mock function with given fields: _a0
func (_m *CloudWatchLogsAPI) DeleteDataProtectionPolicyRequest(_a0 *cloudwatchlogs.DeleteDataProtectionPolicyInput) (*request.Request, *cloudwatchlogs.DeleteDataProtectionPolicyOutput) {
	ret := _m.Called(_a0)

	var r0 *request.Request
	if rf, ok := ret.Get(0).(func(*cloudwatchlogs.DeleteDataProtectionPolicyInput) *request.Request); ok {
		r0 = rf(_a0)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*request.Request)
		}
	}

	var r1 *cloudwatchlogs.DeleteDataProtectionPolicyOutput
	if rf, ok := ret.Get(1).(func(*cloudwatchlogs.DeleteDataProtectionPolicyInput) *cloudwatchlogs.DeleteDataProtectionPolicyOutput); ok {
		r1 = rf(_a0)
	} else {
		if ret.Get(1) != nil {
			r1 = ret.Get(1).(*cloudwatchlogs.DeleteDataProtectionPolicyOutput)
		}
	}

	return r0, r1
}

// DeleteDataProtectionPolicyWithContext provides a mock function with given fields: _a0, _a1, _a2
func (_m *CloudWatchLogsAPI) DeleteDataProtectionPolicyWithContext(_a0 context.Context, _a1 *cloudwatchlogs.DeleteDataProtectionPolicyInput, _a2 ...request.Option) (*cloudwatchlogs.DeleteDataProtectionPolicyOutput, error) {
	_va := make([]interface{}, len(_a2))
	for _i := range _a2 {
		_va[_i] = _a2[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, _a0, _a1)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	var r0 *cloudwatchlogs.DeleteDataProtectionPolicyOutput
	if rf, ok := ret.Get(0).(func(context.Context, *cloudwatchlogs.DeleteDataProtectionPolicyInput, ...request.Option) *cloudwatchlogs.DeleteDataProtectionPolicyOutput); ok {
		r0 = rf(_a0, _a1, _a2...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*cloudwatchlogs.DeleteDataProtectionPolicyOutput)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, *cloudwatchlogs.DeleteDataProtectionPolicyInput, ...request.Option) error); ok {
		r1 = rf(_a0, _a1, _a2...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// DeleteDelivery provides a mock function with given fields: _a0
func (_m *CloudWatchLogsAPI) DeleteDelivery(_a0 *cloudwatchlogs.DeleteDeliveryInput) (*cloudwatchlogs.DeleteDeliveryOutput, error) {
	ret := _m.Called(_a0)

	var r0 *cloudwatchlogs.DeleteDeliveryOutput
	if rf, ok := ret.Get(0).(func(*cloudwatchlogs.DeleteDeliveryInput) *cloudwatchlogs.DeleteDeliveryOutput); ok {
		r0 = rf(_a0)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*cloudwatchlogs.DeleteDeliveryOutput)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(*cloudwatchlogs.DeleteDeliveryInput) error); ok {
		r1 = rf(_a0)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// DeleteDeliveryDestination provides a mock function with given fields: _a0
func (_m *CloudWatchLogsAPI) DeleteDeliveryDestination(_a0 *cloudwatchlogs.DeleteDeliveryDestinationInput) (*cloudwatchlogs.DeleteDeliveryDestinationOutput, error) {
	ret := _m.Called(_a0)

	var r0 *cloudwatchlogs.DeleteDeliveryDestinationOutput
	if rf, ok := ret.Get(0).(func(*cloudwatchlogs.DeleteDeliveryDestinationInput) *cloudwatchlogs.DeleteDeliveryDestinationOutput); ok {
		r0 = rf(_a0)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*cloudwatchlogs.DeleteDeliveryDestinationOutput)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(*cloudwatchlogs.DeleteDeliveryDestinationInput) error); ok {
		r1 = rf(_a0)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// DeleteDeliveryDestinationPolicy provides a mock function with given fields: _a0
func (_m *CloudWatchLogsAPI) DeleteDeliveryDestinationPolicy(_a0 *cloudwatchlogs.DeleteDeliveryDestinationPolicyInput) (*cloudwatchlogs.DeleteDeliveryDestinationPolicyOutput, error) {
	ret := _m.Called(_a0)

	var r0 *cloudwatchlogs.DeleteDeliveryDestinationPolicyOutput
	if rf, ok := ret.Get(0).(func(*cloudwatchlogs.DeleteDeliveryDestinationPolicyInput) *cloudwatchlogs.DeleteDeliveryDestinationPolicyOutput); ok {
		r0 = rf(_a0)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*cloudwatchlogs.DeleteDeliveryDestinationPolicyOutput)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(*cloudwatchlogs.DeleteDeliveryDestinationPolicyInput) error); ok {
		r1 = rf(_a0)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// DeleteDeliveryDestinationPolicyRequest provides a mock function with given fields: _a0
func (_m *CloudWatchLogsAPI) DeleteDeliveryDestinationPolicyRequest(_a0 *cloudwatchlogs.DeleteDeliveryDestinationPolicyInput) (*request.Request, *cloudwatchlogs.DeleteDeliveryDestinationPolicyOutput) {
	ret := _m.Called(_a0)

	var r0 *request.Request
	if rf, ok := ret.Get(0).(func(*cloudwatchlogs.DeleteDeliveryDestinationPolicyInput) *request.Request); ok {
		r0 = rf(_a0)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*request.Request)
		}
	}

	var r1 *cloudwatchlogs.DeleteDeliveryDestinationPolicyOutput
	if rf, ok := ret.Get(1).(func(*cloudwatchlogs.DeleteDeliveryDestinationPolicyInput) *cloudwatchlogs.DeleteDeliveryDestinationPolicyOutput); ok {
		r1 = rf(_a0)
	} else {
		if ret.Get(1) != nil {
			r1 = ret.Get(1).(*cloudwatchlogs.DeleteDeliveryDestinationPolicyOutput)
		}
	}

	return r0, r1
}

// DeleteDeliveryDestinationPolicyWithContext provides a mock function with given fields: _a0, _a1, _a2
func (_m *CloudWatchLogsAPI) DeleteDeliveryDestinationPolicyWithContext(_a0 context.Context, _a1 *cloudwatchlogs.DeleteDeliveryDestinationPolicyInput, _a2 ...request.Option) (*cloudwatchlogs.DeleteDeliveryDestinationPolicyOutput, error) {
	_va := make([]interface{}, len(_a2))
	for _i := range _a2 {
		_va[_i] = _a2[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, _a0, _a1)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	var r0 *cloudwatchlogs.DeleteDeliveryDestinationPolicyOutput
	if rf, ok := ret.Get(0).(func(context.Context, *cloudwatchlogs.DeleteDeliveryDestinationPolicyInput, ...request.Option) *cloudwatchlogs.DeleteDeliveryDestinationPolicyOutput); ok {
		r0 = rf(_a0, _a1, _a2...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*cloudwatchlogs.DeleteDeliveryDestinationPolicyOutput)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, *cloudwatchlogs.DeleteDeliveryDestinationPolicyInput, ...request.Option) error); ok {
		r1 = rf(_a0, _a1, _a2...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// DeleteDeliveryDestinationRequest provides a mock function with given fields: _a0
func (_m *CloudWatchLogsAPI) DeleteDeliveryDestinationRequest(_a0 *cloudwatchlogs.DeleteDeliveryDestinationInput) (*request.Request, *cloudwatchlogs.DeleteDeliveryDestinationOutput) {
	ret := _m.Called(_a0)

	var r0 *request.Request
	if rf, ok := ret.Get(0).(func(*cloudwatchlogs.DeleteDeliveryDestinationInput) *request.Request); ok {
		r0 = rf(_a0)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*request.Request)
		}
	}

	var r1 *cloudwatchlogs.DeleteDeliveryDestinationOutput
	if rf, ok := ret.Get(1).(func(*cloudwatchlogs.DeleteDeliveryDestinationInput) *cloudwatchlogs.DeleteDeliveryDestinationOutput); ok {
		r1 = rf(_a0)
	} else {
		if ret.Get(1) != nil {
			r1 = ret.Get(1).(*cloudwatchlogs.DeleteDeliveryDestinationOutput)
		}
	}

	return r0, r1
}

// DeleteDeliveryDestinationWithContext provides a mock function with given fields: _a0, _a1, _a2
func (_m *CloudWatchLogsAPI) DeleteDeliveryDestinationWithContext(_a0 context.Context, _a1 *cloudwatchlogs.DeleteDeliveryDestinationInput, _a2 ...request.Option) (*cloudwatchlogs.DeleteDeliveryDestinationOutput, error) {
	_va := make([]interface{}, len(_a2))
	for _i := range _a2 {
		_va[_i] = _a2[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, _a0, _a1)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	var r0 *cloudwatchlogs.DeleteDeliveryDestinationOutput
	if rf, ok := ret.Get(0).(func(context.Context, *cloudwatchlogs.DeleteDeliveryDestinationInput, ...request.Option) *cloudwatchlogs.DeleteDeliveryDestinationOutput); ok {
		r0 = rf(_a0, _a1, _a2...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*cloudwatchlogs.DeleteDeliveryDestinationOutput)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, *cloudwatchlogs.DeleteDeliveryDestinationInput, ...request.Option) error); ok {
		r1 = rf(_a0, _a1, _a2...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// DeleteDeliveryRequest provides a mock function with given fields: _a0
func (_m *CloudWatchLogsAPI) DeleteDeliveryRequest(_a0 *cloudwatchlogs.DeleteDeliveryInput) (*request.Request, *cloudwatchlogs.DeleteDeliveryOutput) {
	ret := _m.Called(_a0)

	var r0 *request.Request
	if rf, ok := ret.Get(0).(func(*cloudwatchlogs.DeleteDeliveryInput) *request.Request); ok {
		r0 = rf(_a0)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*request.Request)
		}
	}

	var r1 *cloudwatchlogs.DeleteDeliveryOutput
	if rf, ok := ret.Get(1).(func(*cloudwatchlogs.DeleteDeliveryInput) *cloudwatchlogs.DeleteDeliveryOutput); ok {
		r1 = rf(_a0)
	} else {
		if ret.Get(1) != nil {
			r1 = ret.Get(1).(*cloudwatchlogs.DeleteDeliveryOutput)
		}
	}

	return r0, r1
}

// DeleteDeliverySource provides a mock function with given fields: _a0
func (_m *CloudWatchLogsAPI) DeleteDeliverySource(_a0 *cloudwatchlogs.DeleteDeliverySourceInput) (*cloudwatchlogs.DeleteDeliverySourceOutput, error) {
	ret := _m.Called(_a0)

	var r0 *cloudwatchlogs.DeleteDeliverySourceOutput
	if rf, ok := ret.Get(0).(func(*cloudwatchlogs.DeleteDeliverySourceInput) *cloudwatchlogs.DeleteDeliverySourceOutput); ok {
		r0 = rf(_a0)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*cloudwatchlogs.DeleteDeliverySourceOutput)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(*cloudwatchlogs.DeleteDeliverySourceInput) error); ok {
		r1 = rf(_a0)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// DeleteDeliverySourceRequest provides a mock function with given fields: _a0
func (_m *CloudWatchLogsAPI) DeleteDeliverySourceRequest(_a0 *cloudwatchlogs.DeleteDeliverySourceInput) (*request.Request, *cloudwatchlogs.DeleteDeliverySourceOutput) {
	ret := _m.Called(_a0)

	var r0 *request.Request
	if rf, ok := ret.Get(0).(func(*cloudwatchlogs.DeleteDeliverySourceInput) *request.Request); ok {
		r0 = rf(_a0)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*request.Request)
		}
	}

	var r1 *cloudwatchlogs.DeleteDeliverySourceOutput
	if rf, ok := ret.Get(1).(func(*cloudwatchlogs.DeleteDeliverySourceInput) *cloudwatchlogs.DeleteDeliverySourceOutput); ok {
		r1 = rf(_a0)
	} else {
		if ret.Get(1) != nil {
			r1 = ret.Get(1).(*cloudwatchlogs.DeleteDeliverySourceOutput)
		}
	}

	return r0, r1
}

// DeleteDeliverySourceWithContext provides a mock function with given fields: _a0, _a1, _a2
func (_m *CloudWatchLogsAPI) DeleteDeliverySourceWithContext(_a0 context.Context, _a1 *cloudwatchlogs.DeleteDeliverySourceInput, _a2 ...request.Option) (*cloudwatchlogs.DeleteDeliverySourceOutput, error) {
	_va := make([]interface{}, len(_a2))
	for _i := range _a2 {
		_va[_i] = _a2[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, _a0, _a1)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	var r0 *cloudwatchlogs.DeleteDeliverySourceOutput
	if rf, ok := ret.Get(0).(func(context.Context, *cloudwatchlogs.DeleteDeliverySourceInput, ...request.Option) *cloudwatchlogs.DeleteDeliverySourceOutput); ok {
		r0 = rf(_a0, _a1, _a2...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*cloudwatchlogs.DeleteDeliverySourceOutput)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, *cloudwatchlogs.DeleteDeliverySourceInput, ...request.Option) error); ok {
		r1 = rf(_a0, _a1, _a2...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// DeleteDeliveryWithContext provides a mock function with given fields: _a0, _a1, _a2
func (_m *CloudWatchLogsAPI) DeleteDeliveryWithContext(_a0 context.Context, _a1 *cloudwatchlogs.DeleteDeliveryInput, _a2 ...request.Option) (*cloudwatchlogs.DeleteDeliveryOutput, error) {
	_va := make([]interface{}, len(_a2))
	for _i := range _a2 {
		_va[_i] = _a2[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, _a0, _a1)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	var r0 *cloudwatchlogs.DeleteDeliveryOutput
	if rf, ok := ret.Get(0).(func(context.Context, *cloudwatchlogs.DeleteDeliveryInput, ...request.Option) *cloudwatchlogs.DeleteDeliveryOutput); ok {
		r0 = rf(_a0, _a1, _a2...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*cloudwatchlogs.DeleteDeliveryOutput)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, *cloudwatchlogs.DeleteDeliveryInput, ...request.Option) error); ok {
		r1 = rf(_a0, _a1, _a2...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// DeleteDestination provides a mock function with given fields: _a0
func (_m *CloudWatchLogsAPI) DeleteDestination(_a0 *cloudwatchlogs.DeleteDestinationInput) (*cloudwatchlogs.DeleteDestinationOutput, error) {
	ret := _m.Called(_a0)

	var r0 *cloudwatchlogs.DeleteDestinationOutput
	if rf, ok := ret.Get(0).(func(*cloudwatchlogs.DeleteDestinationInput) *cloudwatchlogs.DeleteDestinationOutput); ok {
		r0 = rf(_a0)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*cloudwatchlogs.DeleteDestinationOutput)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(*cloudwatchlogs.DeleteDestinationInput) error); ok {
		r1 = rf(_a0)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// DeleteDestinationRequest provides a mock function with given fields: _a0
func (_m *CloudWatchLogsAPI) DeleteDestinationRequest(_a0 *cloudwatchlogs.DeleteDestinationInput) (*request.Request, *cloudwatchlogs.DeleteDestinationOutput) {
	ret := _m.Called(_a0)

	var r0 *request.Request
	if rf, ok := ret.Get(0).(func(*cloudwatchlogs.DeleteDestinationInput) *request.Request); ok {
		r0 = rf(_a0)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*request.Request)
		}
	}

	var r1 *cloudwatchlogs.DeleteDestinationOutput
	if rf, ok := ret.Get(1).(func(*cloudwatchlogs.DeleteDestinationInput) *cloudwatchlogs.DeleteDestinationOutput); ok {
		r1 = rf(_a0)
	} else {
		if ret.Get(1) != nil {
			r1 = ret.Get(1).(*cloudwatchlogs.DeleteDestinationOutput)
		}
	}

	return r0, r1
}

// DeleteDestinationWithContext provides a mock function with given fields: _a0, _a1, _a2
func (_m *CloudWatchLogsAPI) DeleteDestinationWithContext(_a0 context.Context, _a1 *cloudwatchlogs.DeleteDestinationInput, _a2 ...request.Option) (*cloudwatchlogs.DeleteDestinationOutput, error) {
	_va := make([]interface{}, len(_a2))
	for _i := range _a2 {
		_va[_i] = _a2[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, _a0, _a1)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	var r0 *cloudwatchlogs.DeleteDestinationOutput
	if rf, ok := ret.Get(0).(func(context.Context, *cloudwatchlogs.DeleteDestinationInput, ...request.Option) *cloudwatchlogs.DeleteDestinationOutput); ok {
		r0 = rf(_a0, _a1, _a2...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*cloudwatchlogs.DeleteDestinationOutput)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, *cloudwatchlogs.DeleteDestinationInput, ...request.Option) error); ok {
		r1 = rf(_a0, _a1, _a2...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// DeleteLogAnomalyDetector provides a mock function with given fields: _a0
func (_m *CloudWatchLogsAPI) DeleteLogAnomalyDetector(_a0 *cloudwatchlogs.DeleteLogAnomalyDetectorInput) (*cloudwatchlogs.DeleteLogAnomalyDetectorOutput, error) {
	ret := _m.Called(_a0)

	var r0 *cloudwatchlogs.DeleteLogAnomalyDetectorOutput
	if rf, ok := ret.Get(0).(func(*cloudwatchlogs.DeleteLogAnomalyDetectorInput) *cloudwatchlogs.DeleteLogAnomalyDetectorOutput); ok {
		r0 = rf(_a0)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*cloudwatchlogs.DeleteLogAnomalyDetectorOutput)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(*cloudwatchlogs.DeleteLogAnomalyDetectorInput) error); ok {
		r1 = rf(_a0)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// DeleteLogAnomalyDetectorRequest provides a mock function with given fields: _a0
func (_m *CloudWatchLogsAPI) DeleteLogAnomalyDetectorRequest(_a0 *cloudwatchlogs.DeleteLogAnomalyDetectorInput) (*request.Request, *cloudwatchlogs.DeleteLogAnomalyDetectorOutput) {
	ret := _m.Called(_a0)

	var r0 *request.Request
	if rf, ok := ret.Get(0).(func(*cloudwatchlogs.DeleteLogAnomalyDetectorInput) *request.Request); ok {
		r0 = rf(_a0)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*request.Request)
		}
	}

	var r1 *cloudwatchlogs.DeleteLogAnomalyDetectorOutput
	if rf, ok := ret.Get(1).(func(*cloudwatchlogs.DeleteLogAnomalyDetectorInput) *cloudwatchlogs.DeleteLogAnomalyDetectorOutput); ok {
		r1 = rf(_a0)
	} else {
		if ret.Get(1) != nil {
			r1 = ret.Get(1).(*cloudwatchlogs.DeleteLogAnomalyDetectorOutput)
		}
	}

	return r0, r1
}

// DeleteLogAnomalyDetectorWithContext provides a mock function with given fields: _a0, _a1, _a2
func (_m *CloudWatchLogsAPI) DeleteLogAnomalyDetectorWithContext(_a0 context.Context, _a1 *cloudwatchlogs.DeleteLogAnomalyDetectorInput, _a2 ...request.Option) (*cloudwatchlogs.DeleteLogAnomalyDetectorOutput, error) {
	_va := make([]interface{}, len(_a2))
	for _i := range _a2 {
		_va[_i] = _a2[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, _a0, _a1)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	var r0 *cloudwatchlogs.DeleteLogAnomalyDetectorOutput
	if rf, ok := ret.Get(0).(func(context.Context, *cloudwatchlogs.DeleteLogAnomalyDetectorInput, ...request.Option) *cloudwatchlogs.DeleteLogAnomalyDetectorOutput); ok {
		r0 = rf(_a0, _a1, _a2...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*cloudwatchlogs.DeleteLogAnomalyDetectorOutput)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, *cloudwatchlogs.DeleteLogAnomalyDetectorInput, ...request.Option) error); ok {
		r1 = rf(_a0, _a1, _a2...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// DeleteLogGroup provides a mock function with given fields: _a0
func (_m *CloudWatchLogsAPI) DeleteLogGroup(_a0 *cloudwatchlogs.DeleteLogGroupInput) (*cloudwatchlogs.DeleteLogGroupOutput, error) {
	ret := _m.Called(_a0)

	var r0 *cloudwatchlogs.DeleteLogGroupOutput
	if rf, ok := ret.Get(0).(func(*cloudwatchlogs.DeleteLogGroupInput) *cloudwatchlogs.DeleteLogGroupOutput); ok {
		r0 = rf(_a0)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*cloudwatchlogs.DeleteLogGroupOutput)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(*cloudwatchlogs.DeleteLogGroupInput) error); ok {
		r1 = rf(_a0)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// DeleteLogGroupRequest provides a mock function with given fields: _a0
func (_m *CloudWatchLogsAPI) DeleteLogGroupRequest(_a0 *cloudwatchlogs.DeleteLogGroupInput) (*request.Request, *cloudwatchlogs.DeleteLogGroupOutput) {
	ret := _m.Called(_a0)

	var r0 *request.Request
	if rf, ok := ret.Get(0).(func(*cloudwatchlogs.DeleteLogGroupInput) *request.Request); ok {
		r0 = rf(_a0)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*request.Request)
		}
	}

	var r1 *cloudwatchlogs.DeleteLogGroupOutput
	if rf, ok := ret.Get(1).(func(*cloudwatchlogs.DeleteLogGroupInput) *cloudwatchlogs.DeleteLogGroupOutput); ok {
		r1 = rf(_a0)
	} else {
		if ret.Get(1) != nil {
			r1 = ret.Get(1).(*cloudwatchlogs.DeleteLogGroupOutput)
		}
	}

	return r0, r1
}

// DeleteLogGroupWithContext provides a mock function with given fields: _a0, _a1, _a2
func (_m *CloudWatchLogsAPI) DeleteLogGroupWithContext(_a0 context.Context, _a1 *cloudwatchlogs.DeleteLogGroupInput, _a2 ...request.Option) (*cloudwatchlogs.DeleteLogGroupOutput, error) {
	_va := make([]interface{}, len(_a2))
	for _i := range _a2 {
		_va[_i] = _a2[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, _a0, _a1)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	var r0 *cloudwatchlogs.DeleteLogGroupOutput
	if rf, ok := ret.Get(0).(func(context.Context, *cloudwatchlogs.DeleteLogGroupInput, ...request.Option) *cloudwatchlogs.DeleteLogGroupOutput); ok {
		r0 = rf(_a0, _a1, _a2...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*cloudwatchlogs.DeleteLogGroupOutput)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, *cloudwatchlogs.DeleteLogGroupInput, ...request.Option) error); ok {
		r1 = rf(_a0, _a1, _a2...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// DeleteLogStream provides a mock function with given fields: _a0
func (_m *CloudWatchLogsAPI) DeleteLogStream(_a0 *cloudwatchlogs.DeleteLogStreamInput) (*cloudwatchlogs.DeleteLogStreamOutput, error) {
	ret := _m.Called(_a0)

	var r0 *cloudwatchlogs.DeleteLogStreamOutput
	if rf, ok := ret.Get(0).(func(*cloudwatchlogs.DeleteLogStreamInput) *cloudwatchlogs.DeleteLogStreamOutput); ok {
		r0 = rf(_a0)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*cloudwatchlogs.DeleteLogStreamOutput)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(*cloudwatchlogs.DeleteLogStreamInput) error); ok {
		r1 = rf(_a0)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// DeleteLogStreamRequest provides a mock function with given fields: _a0
func (_m *CloudWatchLogsAPI) DeleteLogStreamRequest(_a0 *cloudwatchlogs.DeleteLogStreamInput) (*request.Request, *cloudwatchlogs.DeleteLogStreamOutput) {
	ret := _m.Called(_a0)

	var r0 *request.Request
	if rf, ok := ret.Get(0).(func(*cloudwatchlogs.DeleteLogStreamInput) *request.Request); ok {
		r0 = rf(_a0)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*request.Request)
		}
	}

	var r1 *cloudwatchlogs.DeleteLogStreamOutput
	if rf, ok := ret.Get(1).(func(*cloudwatchlogs.DeleteLogStreamInput) *cloudwatchlogs.DeleteLogStreamOutput); ok {
		r1 = rf(_a0)
	} else {
		if ret.Get(1) != nil {
			r1 = ret.Get(1).(*cloudwatchlogs.DeleteLogStreamOutput)
		}
	}

	return r0, r1
}

// DeleteLogStreamWithContext provides a mock function with given fields: _a0, _a1, _a2
func (_m *CloudWatchLogsAPI) DeleteLogStreamWithContext(_a0 context.Context, _a1 *cloudwatchlogs.DeleteLogStreamInput, _a2 ...request.Option) (*cloudwatchlogs.DeleteLogStreamOutput, error) {
	_va := make([]interface{}, len(_a2))
	for _i := range _a2 {
		_va[_i] = _a2[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, _a0, _a1)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	var r0 *cloudwatchlogs.DeleteLogStreamOutput
	if rf, ok := ret.Get(0).(func(context.Context, *cloudwatchlogs.DeleteLogStreamInput, ...request.Option) *cloudwatchlogs.DeleteLogStreamOutput); ok {
		r0 = rf(_a0, _a1, _a2...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*cloudwatchlogs.DeleteLogStreamOutput)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, *cloudwatchlogs.DeleteLogStreamInput, ...request.Option) error); ok {
		r1 = rf(_a0, _a1, _a2...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// DeleteMetricFilter provides a mock function with given fields: _a0
func (_m *CloudWatchLogsAPI) DeleteMetricFilter(_a0 *cloudwatchlogs.DeleteMetricFilterInput) (*cloudwatchlogs.DeleteMetricFilterOutput, error) {
	ret := _m.Called(_a0)

	var r0 *cloudwatchlogs.DeleteMetricFilterOutput
	if rf, ok := ret.Get(0).(func(*cloudwatchlogs.DeleteMetricFilterInput) *cloudwatchlogs.DeleteMetricFilterOutput); ok {
		r0 = rf(_a0)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*cloudwatchlogs.DeleteMetricFilterOutput)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(*cloudwatchlogs.DeleteMetricFilterInput) error); ok {
		r1 = rf(_a0)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// DeleteMetricFilterRequest provides a mock function with given fields: _a0
func (_m *CloudWatchLogsAPI) DeleteMetricFilterRequest(_a0 *cloudwatchlogs.DeleteMetricFilterInput) (*request.Request, *cloudwatchlogs.DeleteMetricFilterOutput) {
	ret := _m.Called(_a0)

	var r0 *request.Request
	if rf, ok := ret.Get(0).(func(*cloudwatchlogs.DeleteMetricFilterInput) *request.Request); ok {
		r0 = rf(_a0)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*request.Request)
		}
	}

	var r1 *cloudwatchlogs.DeleteMetricFilterOutput
	if rf, ok := ret.Get(1).(func(*cloudwatchlogs.DeleteMetricFilterInput) *cloudwatchlogs.DeleteMetricFilterOutput); ok {
		r1 = rf(_a0)
	} else {
		if ret.Get(1) != nil {
			r1 = ret.Get(1).(*cloudwatchlogs.DeleteMetricFilterOutput)
		}
	}

	return r0, r1
}

// DeleteMetricFilterWithContext provides a mock function with given fields: _a0, _a1, _a2
func (_m *CloudWatchLogsAPI) DeleteMetricFilterWithContext(_a0 context.Context, _a1 *cloudwatchlogs.DeleteMetricFilterInput, _a2 ...request.Option) (*cloudwatchlogs.DeleteMetricFilterOutput, error) {
	_va := make([]interface{}, len(_a2))
	for _i := range _a2 {
		_va[_i] = _a2[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, _a0, _a1)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	var r0 *cloudwatchlogs.DeleteMetricFilterOutput
	if rf, ok := ret.Get(0).(func(context.Context, *cloudwatchlogs.DeleteMetricFilterInput, ...request.Option) *cloudwatchlogs.DeleteMetricFilterOutput); ok {
		r0 = rf(_a0, _a1, _a2...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*cloudwatchlogs.DeleteMetricFilterOutput)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, *cloudwatchlogs.DeleteMetricFilterInput, ...request.Option) error); ok {
		r1 = rf(_a0, _a1, _a2...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// DeleteQueryDefinition provides a mock function with given fields: _a0
func (_m *CloudWatchLogsAPI) DeleteQueryDefinition(_a0 *cloudwatchlogs.DeleteQueryDefinitionInput) (*cloudwatchlogs.DeleteQueryDefinitionOutput, error) {
	ret := _m.Called(_a0)

	var r0 *cloudwatchlogs.DeleteQueryDefinitionOutput
	if rf, ok := ret.Get(0).(func(*cloudwatchlogs.DeleteQueryDefinitionInput) *cloudwatchlogs.DeleteQueryDefinitionOutput); ok {
		r0 = rf(_a0)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*cloudwatchlogs.DeleteQueryDefinitionOutput)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(*cloudwatchlogs.DeleteQueryDefinitionInput) error); ok {
		r1 = rf(_a0)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// DeleteQueryDefinitionRequest provides a mock function with given fields: _a0
func (_m *CloudWatchLogsAPI) DeleteQueryDefinitionRequest(_a0 *cloudwatchlogs.DeleteQueryDefinitionInput) (*request.Request, *cloudwatchlogs.DeleteQueryDefinitionOutput) {
	ret := _m.Called(_a0)

	var r0 *request.Request
	if rf, ok := ret.Get(0).(func(*cloudwatchlogs.DeleteQueryDefinitionInput) *request.Request); ok {
		r0 = rf(_a0)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*request.Request)
		}
	}

	var r1 *cloudwatchlogs.DeleteQueryDefinitionOutput
	if rf, ok := ret.Get(1).(func(*cloudwatchlogs.DeleteQueryDefinitionInput) *cloudwatchlogs.DeleteQueryDefinitionOutput); ok {
		r1 = rf(_a0)
	} else {
		if ret.Get(1) != nil {
			r1 = ret.Get(1).(*cloudwatchlogs.DeleteQueryDefinitionOutput)
		}
	}

	return r0, r1
}

// DeleteQueryDefinitionWithContext provides a mock function with given fields: _a0, _a1, _a2
func (_m *CloudWatchLogsAPI) DeleteQueryDefinitionWithContext(_a0 context.Context, _a1 *cloudwatchlogs.DeleteQueryDefinitionInput, _a2 ...request.Option) (*cloudwatchlogs.DeleteQueryDefinitionOutput, error) {
	_va := make([]interface{}, len(_a2))
	for _i := range _a2 {
		_va[_i] = _a2[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, _a0, _a1)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	var r0 *cloudwatchlogs.DeleteQueryDefinitionOutput
	if rf, ok := ret.Get(0).(func(context.Context, *cloudwatchlogs.DeleteQueryDefinitionInput, ...request.Option) *cloudwatchlogs.DeleteQueryDefinitionOutput); ok {
		r0 = rf(_a0, _a1, _a2...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*cloudwatchlogs.DeleteQueryDefinitionOutput)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, *cloudwatchlogs.DeleteQueryDefinitionInput, ...request.Option) error); ok {
		r1 = rf(_a0, _a1, _a2...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// DeleteResourcePolicy provides a mock function with given fields: _a0
func (_m *CloudWatchLogsAPI) DeleteResourcePolicy(_a0 *cloudwatchlogs.DeleteResourcePolicyInput) (*cloudwatchlogs.DeleteResourcePolicyOutput, error) {
	ret := _m.Called(_a0)

	var r0 *cloudwatchlogs.DeleteResourcePolicyOutput
	if rf, ok := ret.Get(0).(func(*cloudwatchlogs.DeleteResourcePolicyInput) *cloudwatchlogs.DeleteResourcePolicyOutput); ok {
		r0 = rf(_a0)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*cloudwatchlogs.DeleteResourcePolicyOutput)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(*cloudwatchlogs.DeleteResourcePolicyInput) error); ok {
		r1 = rf(_a0)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// DeleteResourcePolicyRequest provides a mock function with given fields: _a0
func (_m *CloudWatchLogsAPI) DeleteResourcePolicyRequest(_a0 *cloudwatchlogs.DeleteResourcePolicyInput) (*request.Request, *cloudwatchlogs.DeleteResourcePolicyOutput) {
	ret := _m.Called(_a0)

	var r0 *request.Request
	if rf, ok := ret.Get(0).(func(*cloudwatchlogs.DeleteResourcePolicyInput) *request.Request); ok {
		r0 = rf(_a0)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*request.Request)
		}
	}

	var r1 *cloudwatchlogs.DeleteResourcePolicyOutput
	if rf, ok := ret.Get(1).(func(*cloudwatchlogs.DeleteResourcePolicyInput) *cloudwatchlogs.DeleteResourcePolicyOutput); ok {
		r1 = rf(_a0)
	} else {
		if ret.Get(1) != nil {
			r1 = ret.Get(1).(*cloudwatchlogs.DeleteResourcePolicyOutput)
		}
	}

	return r0, r1
}

// DeleteResourcePolicyWithContext provides a mock function with given fields: _a0, _a1, _a2
func (_m *CloudWatchLogsAPI) DeleteResourcePolicyWithContext(_a0 context.Context, _a1 *cloudwatchlogs.DeleteResourcePolicyInput, _a2 ...request.Option) (*cloudwatchlogs.DeleteResourcePolicyOutput, error) {
	_va := make([]interface{}, len(_a2))
	for _i := range _a2 {
		_va[_i] = _a2[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, _a0, _a1)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	var r0 *cloudwatchlogs.DeleteResourcePolicyOutput
	if rf, ok := ret.Get(0).(func(context.Context, *cloudwatchlogs.DeleteResourcePolicyInput, ...request.Option) *cloudwatchlogs.DeleteResourcePolicyOutput); ok {
		r0 = rf(_a0, _a1, _a2...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*cloudwatchlogs.DeleteResourcePolicyOutput)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, *cloudwatchlogs.DeleteResourcePolicyInput, ...request.Option) error); ok {
		r1 = rf(_a0, _a1, _a2...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// DeleteRetentionPolicy provides a mock function with given fields: _a0
func (_m *CloudWatchLogsAPI) DeleteRetentionPolicy(_a0 *cloudwatchlogs.DeleteRetentionPolicyInput) (*cloudwatchlogs.DeleteRetentionPolicyOutput, error) {
	ret := _m.Called(_a0)

	var r0 *cloudwatchlogs.DeleteRetentionPolicyOutput
	if rf, ok := ret.Get(0).(func(*cloudwatchlogs.DeleteRetentionPolicyInput) *cloudwatchlogs.DeleteRetentionPolicyOutput); ok {
		r0 = rf(_a0)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*cloudwatchlogs.DeleteRetentionPolicyOutput)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(*cloudwatchlogs.DeleteRetentionPolicyInput) error); ok {
		r1 = rf(_a0)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// DeleteRetentionPolicyRequest provides a mock function with given fields: _a0
func (_m *CloudWatchLogsAPI) DeleteRetentionPolicyRequest(_a0 *cloudwatchlogs.DeleteRetentionPolicyInput) (*request.Request, *cloudwatchlogs.DeleteRetentionPolicyOutput) {
	ret := _m.Called(_a0)

	var r0 *request.Request
	if rf, ok := ret.Get(0).(func(*cloudwatchlogs.DeleteRetentionPolicyInput) *request.Request); ok {
		r0 = rf(_a0)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*request.Request)
		}
	}

	var r1 *cloudwatchlogs.DeleteRetentionPolicyOutput
	if rf, ok := ret.Get(1).(func(*cloudwatchlogs.DeleteRetentionPolicyInput) *cloudwatchlogs.DeleteRetentionPolicyOutput); ok {
		r1 = rf(_a0)
	} else {
		if ret.Get(1) != nil {
			r1 = ret.Get(1).(*cloudwatchlogs.DeleteRetentionPolicyOutput)
		}
	}

	return r0, r1
}

// DeleteRetentionPolicyWithContext provides a mock function with given fields: _a0, _a1, _a2
func (_m *CloudWatchLogsAPI) DeleteRetentionPolicyWithContext(_a0 context.Context, _a1 *cloudwatchlogs.DeleteRetentionPolicyInput, _a2 ...request.Option) (*cloudwatchlogs.DeleteRetentionPolicyOutput, error) {
	_va := make([]interface{}, len(_a2))
	for _i := range _a2 {
		_va[_i] = _a2[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, _a0, _a1)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	var r0 *cloudwatchlogs.DeleteRetentionPolicyOutput
	if rf, ok := ret.Get(0).(func(context.Context, *cloudwatchlogs.DeleteRetentionPolicyInput, ...request.Option) *cloudwatchlogs.DeleteRetentionPolicyOutput); ok {
		r0 = rf(_a0, _a1, _a2...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*cloudwatchlogs.DeleteRetentionPolicyOutput)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, *cloudwatchlogs.DeleteRetentionPolicyInput, ...request.Option) error); ok {
		r1 = rf(_a0, _a1, _a2...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// DeleteSubscriptionFilter provides a mock function with given fields: _a0
func (_m *CloudWatchLogsAPI) DeleteSubscriptionFilter(_a0 *cloudwatchlogs.DeleteSubscriptionFilterInput) (*cloudwatchlogs.DeleteSubscriptionFilterOutput, error) {
	ret := _m.Called(_a0)

	var r0 *cloudwatchlogs.DeleteSubscriptionFilterOutput
	if rf, ok := ret.Get(0).(func(*cloudwatchlogs.DeleteSubscriptionFilterInput) *cloudwatchlogs.DeleteSubscriptionFilterOutput); ok {
		r0 = rf(_a0)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*cloudwatchlogs.DeleteSubscriptionFilterOutput)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(*cloudwatchlogs.DeleteSubscriptionFilterInput) error); ok {
		r1 = rf(_a0)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// DeleteSubscriptionFilterRequest provides a mock function with given fields: _a0
func (_m *CloudWatchLogsAPI) DeleteSubscriptionFilterRequest(_a0 *cloudwatchlogs.DeleteSubscriptionFilterInput) (*request.Request, *cloudwatchlogs.DeleteSubscriptionFilterOutput) {
	ret := _m.Called(_a0)

	var r0 *request.Request
	if rf, ok := ret.Get(0).(func(*cloudwatchlogs.DeleteSubscriptionFilterInput) *request.Request); ok {
		r0 = rf(_a0)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*request.Request)
		}
	}

	var r1 *cloudwatchlogs.DeleteSubscriptionFilterOutput
	if rf, ok := ret.Get(1).(func(*cloudwatchlogs.DeleteSubscriptionFilterInput) *cloudwatchlogs.DeleteSubscriptionFilterOutput); ok {
		r1 = rf(_a0)
	} else {
		if ret.Get(1) != nil {
			r1 = ret.Get(1).(*cloudwatchlogs.DeleteSubscriptionFilterOutput)
		}
	}

	return r0, r1
}

// DeleteSubscriptionFilterWithContext provides a mock function with given fields: _a0, _a1, _a2
func (_m *CloudWatchLogsAPI) DeleteSubscriptionFilterWithContext(_a0 context.Context, _a1 *cloudwatchlogs.DeleteSubscriptionFilterInput, _a2 ...request.Option) (*cloudwatchlogs.DeleteSubscriptionFilterOutput, error) {
	_va := make([]interface{}, len(_a2))
	for _i := range _a2 {
		_va[_i] = _a2[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, _a0, _a1)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	var r0 *cloudwatchlogs.DeleteSubscriptionFilterOutput
	if rf, ok := ret.Get(0).(func(context.Context, *cloudwatchlogs.DeleteSubscriptionFilterInput, ...request.Option) *cloudwatchlogs.DeleteSubscriptionFilterOutput); ok {
		r0 = rf(_a0, _a1, _a2...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*cloudwatchlogs.DeleteSubscriptionFilterOutput)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, *cloudwatchlogs.DeleteSubscriptionFilterInput, ...request.Option) error); ok {
		r1 = rf(_a0, _a1, _a2...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// DescribeAccountPolicies provides a mock function with given fields: _a0
func (_m *CloudWatchLogsAPI) DescribeAccountPolicies(_a0 *cloudwatchlogs.DescribeAccountPoliciesInput) (*cloudwatchlogs.DescribeAccountPoliciesOutput, error) {
	ret := _m.Called(_a0)

	var r0 *cloudwatchlogs.DescribeAccountPoliciesOutput
	if rf, ok := ret.Get(0).(func(*cloudwatchlogs.DescribeAccountPoliciesInput) *cloudwatchlogs.DescribeAccountPoliciesOutput); ok {
		r0 = rf(_a0)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*cloudwatchlogs.DescribeAccountPoliciesOutput)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(*cloudwatchlogs.DescribeAccountPoliciesInput) error); ok {
		r1 = rf(_a0)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// DescribeAccountPoliciesRequest provides a mock function with given fields: _a0
func (_m *CloudWatchLogsAPI) DescribeAccountPoliciesRequest(_a0 *cloudwatchlogs.DescribeAccountPoliciesInput) (*request.Request, *cloudwatchlogs.DescribeAccountPoliciesOutput) {
	ret := _m.Called(_a0)

	var r0 *request.Request
	if rf, ok := ret.Get(0).(func(*cloudwatchlogs.DescribeAccountPoliciesInput) *request.Request); ok {
		r0 = rf(_a0)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*request.Request)
		}
	}

	var r1 *cloudwatchlogs.DescribeAccountPoliciesOutput
	if rf, ok := ret.Get(1).(func(*cloudwatchlogs.DescribeAccountPoliciesInput) *cloudwatchlogs.DescribeAccountPoliciesOutput); ok {
		r1 = rf(_a0)
	} else {
		if ret.Get(1) != nil {
			r1 = ret.Get(1).(*cloudwatchlogs.DescribeAccountPoliciesOutput)
		}
	}

	return r0, r1
}

// DescribeAccountPoliciesWithContext provides a mock function with given fields: _a0, _a1, _a2
func (_m *CloudWatchLogsAPI) DescribeAccountPoliciesWithContext(_a0 context.Context, _a1 *cloudwatchlogs.DescribeAccountPoliciesInput, _a2 ...request.Option) (*cloudwatchlogs.DescribeAccountPoliciesOutput, error) {
	_va := make([]interface{}, len(_a2))
	for _i := range _a2 {
		_va[_i] = _a2[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, _a0, _a1)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	var r0 *cloudwatchlogs.DescribeAccountPoliciesOutput
	if rf, ok := ret.Get(0).(func(context.Context, *cloudwatchlogs.DescribeAccountPoliciesInput, ...request.Option) *cloudwatchlogs.DescribeAccountPoliciesOutput); ok {
		r0 = rf(_a0, _a1, _a2...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*cloudwatchlogs.DescribeAccountPoliciesOutput)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, *cloudwatchlogs.DescribeAccountPoliciesInput, ...request.Option) error); ok {
		r1 = rf(_a0, _a1, _a2...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// DescribeDeliveries provides a mock function with given fields: _a0
func (_m *CloudWatchLogsAPI) DescribeDeliveries(_a0 *cloudwatchlogs.DescribeDeliveriesInput) (*cloudwatchlogs.DescribeDeliveriesOutput, error) {
	ret := _m.Called(_a0)

	var r0 *cloudwatchlogs.DescribeDeliveriesOutput
	if rf, ok := ret.Get(0).(func(*cloudwatchlogs.DescribeDeliveriesInput) *cloudwatchlogs.DescribeDeliveriesOutput); ok {
		r0 = rf(_a0)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*cloudwatchlogs.DescribeDeliveriesOutput)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(*cloudwatchlogs.DescribeDeliveriesInput) error); ok {
		r1 = rf(_a0)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// DescribeDeliveriesPages provides a mock function with given fields: _a0, _a1
func (_m *CloudWatchLogsAPI) DescribeDeliveriesPages(_a0 *cloudwatchlogs.DescribeDeliveriesInput, _a1 func(*cloudwatchlogs.DescribeDeliveriesOutput, bool) bool) error {
	ret := _m.Called(_a0, _a1)

	var r0 error
	if rf, ok := ret.Get(0).(func(*cloudwatchlogs.DescribeDeliveriesInput, func(*cloudwatchlogs.DescribeDeliveriesOutput, bool) bool) error); ok {
		r0 = rf(_a0, _a1)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// DescribeDeliveriesPagesWithContext provides a mock function with given fields: _a0, _a1, _a2, _a3
func (_m *CloudWatchLogsAPI) DescribeDeliveriesPagesWithContext(_a0 context.Context, _a1 *cloudwatchlogs.DescribeDeliveriesInput, _a2 func(*cloudwatchlogs.DescribeDeliveriesOutput, bool) bool, _a3 ...request.Option) error {
	_va := make([]interface{}, len(_a3))
	for _i := range _a3 {
		_va[_i] = _a3[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, _a0, _a1, _a2)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, *cloudwatchlogs.DescribeDeliveriesInput, func(*cloudwatchlogs.DescribeDeliveriesOutput, bool) bool, ...request.Option) error); ok {
		r0 = rf(_a0, _a1, _a2, _a3...)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// DescribeDeliveriesRequest provides a mock function with given fields: _a0
func (_m *CloudWatchLogsAPI) DescribeDeliveriesRequest(_a0 *cloudwatchlogs.DescribeDeliveriesInput) (*request.Request, *cloudwatchlogs.DescribeDeliveriesOutput) {
	ret := _m.Called(_a0)

	var r0 *request.Request
	if rf, ok := ret.Get(0).(func(*cloudwatchlogs.DescribeDeliveriesInput) *request.Request); ok {
		r0 = rf(_a0)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*request.Request)
		}
	}

	var r1 *cloudwatchlogs.DescribeDeliveriesOutput
	if rf, ok := ret.Get(1).(func(*cloudwatchlogs.DescribeDeliveriesInput) *cloudwatchlogs.DescribeDeliveriesOutput); ok {
		r1 = rf(_a0)
	} else {
		if ret.Get(1) != nil {
			r1 = ret.Get(1).(*cloudwatchlogs.DescribeDeliveriesOutput)
		}
	}

	return r0, r1
}

// DescribeDeliveriesWithContext provides a mock function with given fields: _a0, _a1, _a2
func (_m *CloudWatchLogsAPI) DescribeDeliveriesWithContext(_a0 context.Context, _a1 *cloudwatchlogs.DescribeDeliveriesInput, _a2 ...request.Option) (*cloudwatchlogs.DescribeDeliveriesOutput, error) {
	_va := make([]interface{}, len(_a2))
	for _i := range _a2 {
		_va[_i] = _a2[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, _a0, _a1)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	var r0 *cloudwatchlogs.DescribeDeliveriesOutput
	if rf, ok := ret.Get(0).(func(context.Context, *cloudwatchlogs.DescribeDeliveriesInput, ...request.Option) *cloudwatchlogs.DescribeDeliveriesOutput); ok {
		r0 = rf(_a0, _a1, _a2...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*cloudwatchlogs.DescribeDeliveriesOutput)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, *cloudwatchlogs.DescribeDeliveriesInput, ...request.Option) error); ok {
		r1 = rf(_a0, _a1, _a2...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// DescribeDeliveryDestinations provides a mock function with given fields: _a0
func (_m *CloudWatchLogsAPI) DescribeDeliveryDestinations(_a0 *cloudwatchlogs.DescribeDeliveryDestinationsInput) (*cloudwatchlogs.DescribeDeliveryDestinationsOutput, error) {
	ret := _m.Called(_a0)

	var r0 *cloudwatchlogs.DescribeDeliveryDestinationsOutput
	if rf, ok := ret.Get(0).(func(*cloudwatchlogs.DescribeDeliveryDestinationsInput) *cloudwatchlogs.DescribeDeliveryDestinationsOutput); ok {
		r0 = rf(_a0)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*cloudwatchlogs.DescribeDeliveryDestinationsOutput)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(*cloudwatchlogs.DescribeDeliveryDestinationsInput) error); ok {
		r1 = rf(_a0)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// DescribeDeliveryDestinationsPages provides a mock function with given fields: _a0, _a1
func (_m *CloudWatchLogsAPI) DescribeDeliveryDestinationsPages(_a0 *cloudwatchlogs.DescribeDeliveryDestinationsInput, _a1 func(*cloudwatchlogs.DescribeDeliveryDestinationsOutput, bool) bool) error {
	ret := _m.Called(_a0, _a1)

	var r0 error
	if rf, ok := ret.Get(0).(func(*cloudwatchlogs.DescribeDeliveryDestinationsInput, func(*cloudwatchlogs.DescribeDeliveryDestinationsOutput, bool) bool) error); ok {
		r0 = rf(_a0, _a1)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// DescribeDeliveryDestinationsPagesWithContext provides a mock function with given fields: _a0, _a1, _a2, _a3
func (_m *CloudWatchLogsAPI) DescribeDeliveryDestinationsPagesWithContext(_a0 context.Context, _a1 *cloudwatchlogs.DescribeDeliveryDestinationsInput, _a2 func(*cloudwatchlogs.DescribeDeliveryDestinationsOutput, bool) bool, _a3 ...request.Option) error {
	_va := make([]interface{}, len(_a3))
	for _i := range _a3 {
		_va[_i] = _a3[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, _a0, _a1, _a2)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, *cloudwatchlogs.DescribeDeliveryDestinationsInput, func(*cloudwatchlogs.DescribeDeliveryDestinationsOutput, bool) bool, ...request.Option) error); ok {
		r0 = rf(_a0, _a1, _a2, _a3...)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// DescribeDeliveryDestinationsRequest provides a mock function with given fields: _a0
func (_m *CloudWatchLogsAPI) DescribeDeliveryDestinationsRequest(_a0 *cloudwatchlogs.DescribeDeliveryDestinationsInput) (*request.Request, *cloudwatchlogs.DescribeDeliveryDestinationsOutput) {
	ret := _m.Called(_a0)

	var r0 *request.Request
	if rf, ok := ret.Get(0).(func(*cloudwatchlogs.DescribeDeliveryDestinationsInput) *request.Request); ok {
		r0 = rf(_a0)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*request.Request)
		}
	}

	var r1 *cloudwatchlogs.DescribeDeliveryDestinationsOutput
	if rf, ok := ret.Get(1).(func(*cloudwatchlogs.DescribeDeliveryDestinationsInput) *cloudwatchlogs.DescribeDeliveryDestinationsOutput); ok {
		r1 = rf(_a0)
	} else {
		if ret.Get(1) != nil {
			r1 = ret.Get(1).(*cloudwatchlogs.DescribeDeliveryDestinationsOutput)
		}
	}

	return r0, r1
}

// DescribeDeliveryDestinationsWithContext provides a mock function with given fields: _a0, _a1, _a2
func (_m *CloudWatchLogsAPI) DescribeDeliveryDestinationsWithContext(_a0 context.Context, _a1 *cloudwatchlogs.DescribeDeliveryDestinationsInput, _a2 ...request.Option) (*cloudwatchlogs.DescribeDeliveryDestinationsOutput, error) {
	_va := make([]interface{}, len(_a2))
	for _i := range _a2 {
		_va[_i] = _a2[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, _a0, _a1)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	var r0 *cloudwatchlogs.DescribeDeliveryDestinationsOutput
	if rf, ok := ret.Get(0).(func(context.Context, *cloudwatchlogs.DescribeDeliveryDestinationsInput, ...request.Option) *cloudwatchlogs.DescribeDeliveryDestinationsOutput); ok {
		r0 = rf(_a0, _a1, _a2...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*cloudwatchlogs.DescribeDeliveryDestinationsOutput)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, *cloudwatchlogs.DescribeDeliveryDestinationsInput, ...request.Option) error); ok {
		r1 = rf(_a0, _a1, _a2...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// DescribeDeliverySources provides a mock function with given fields: _a0
func (_m *CloudWatchLogsAPI) DescribeDeliverySources(_a0 *cloudwatchlogs.DescribeDeliverySourcesInput) (*cloudwatchlogs.DescribeDeliverySourcesOutput, error) {
	ret := _m.Called(_a0)

	var r0 *cloudwatchlogs.DescribeDeliverySourcesOutput
	if rf, ok := ret.Get(0).(func(*cloudwatchlogs.DescribeDeliverySourcesInput) *cloudwatchlogs.DescribeDeliverySourcesOutput); ok {
		r0 = rf(_a0)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*cloudwatchlogs.DescribeDeliverySourcesOutput)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(*cloudwatchlogs.DescribeDeliverySourcesInput) error); ok {
		r1 = rf(_a0)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// DescribeDeliverySourcesPages provides a mock function with given fields: _a0, _a1
func (_m *CloudWatchLogsAPI) DescribeDeliverySourcesPages(_a0 *cloudwatchlogs.DescribeDeliverySourcesInput, _a1 func(*cloudwatchlogs.DescribeDeliverySourcesOutput, bool) bool) error {
	ret := _m.Called(_a0, _a1)

	var r0 error
	if rf, ok := ret.Get(0).(func(*cloudwatchlogs.DescribeDeliverySourcesInput, func(*cloudwatchlogs.DescribeDeliverySourcesOutput, bool) bool) error); ok {
		r0 = rf(_a0, _a1)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// DescribeDeliverySourcesPagesWithContext provides a mock function with given fields: _a0, _a1, _a2, _a3
func (_m *CloudWatchLogsAPI) DescribeDeliverySourcesPagesWithContext(_a0 context.Context, _a1 *cloudwatchlogs.DescribeDeliverySourcesInput, _a2 func(*cloudwatchlogs.DescribeDeliverySourcesOutput, bool) bool, _a3 ...request.Option) error {
	_va := make([]interface{}, len(_a3))
	for _i := range _a3 {
		_va[_i] = _a3[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, _a0, _a1, _a2)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, *cloudwatchlogs.DescribeDeliverySourcesInput, func(*cloudwatchlogs.DescribeDeliverySourcesOutput, bool) bool, ...request.Option) error); ok {
		r0 = rf(_a0, _a1, _a2, _a3...)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// DescribeDeliverySourcesRequest provides a mock function with given fields: _a0
func (_m *CloudWatchLogsAPI) DescribeDeliverySourcesRequest(_a0 *cloudwatchlogs.DescribeDeliverySourcesInput) (*request.Request, *cloudwatchlogs.DescribeDeliverySourcesOutput) {
	ret := _m.Called(_a0)

	var r0 *request.Request
	if rf, ok := ret.Get(0).(func(*cloudwatchlogs.DescribeDeliverySourcesInput) *request.Request); ok {
		r0 = rf(_a0)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*request.Request)
		}
	}

	var r1 *cloudwatchlogs.DescribeDeliverySourcesOutput
	if rf, ok := ret.Get(1).(func(*cloudwatchlogs.DescribeDeliverySourcesInput) *cloudwatchlogs.DescribeDeliverySourcesOutput); ok {
		r1 = rf(_a0)
	} else {
		if ret.Get(1) != nil {
			r1 = ret.Get(1).(*cloudwatchlogs.DescribeDeliverySourcesOutput)
		}
	}

	return r0, r1
}

// DescribeDeliverySourcesWithContext provides a mock function with given fields: _a0, _a1, _a2
func (_m *CloudWatchLogsAPI) DescribeDeliverySourcesWithContext(_a0 context.Context, _a1 *cloudwatchlogs.DescribeDeliverySourcesInput, _a2 ...request.Option) (*cloudwatchlogs.DescribeDeliverySourcesOutput, error) {
	_va := make([]interface{}, len(_a2))
	for _i := range _a2 {
		_va[_i] = _a2[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, _a0, _a1)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	var r0 *cloudwatchlogs.DescribeDeliverySourcesOutput
	if rf, ok := ret.Get(0).(func(context.Context, *cloudwatchlogs.DescribeDeliverySourcesInput, ...request.Option) *cloudwatchlogs.DescribeDeliverySourcesOutput); ok {
		r0 = rf(_a0, _a1, _a2...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*cloudwatchlogs.DescribeDeliverySourcesOutput)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, *cloudwatchlogs.DescribeDeliverySourcesInput, ...request.Option) error); ok {
		r1 = rf(_a0, _a1, _a2...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// DescribeDestinations provides a mock function with given fields: _a0
func (_m *CloudWatchLogsAPI) DescribeDestinations(_a0 *cloudwatchlogs.DescribeDestinationsInput) (*cloudwatchlogs.DescribeDestinationsOutput, error) {
	ret := _m.Called(_a0)

	var r0 *cloudwatchlogs.DescribeDestinationsOutput
	if rf, ok := ret.Get(0).(func(*cloudwatchlogs.DescribeDestinationsInput) *cloudwatchlogs.DescribeDestinationsOutput); ok {
		r0 = rf(_a0)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*cloudwatchlogs.DescribeDestinationsOutput)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(*cloudwatchlogs.DescribeDestinationsInput) error); ok {
		r1 = rf(_a0)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// DescribeDestinationsPages provides a mock function with given fields: _a0, _a1
func (_m *CloudWatchLogsAPI) DescribeDestinationsPages(_a0 *cloudwatchlogs.DescribeDestinationsInput, _a1 func(*cloudwatchlogs.DescribeDestinationsOutput, bool) bool) error {
	ret := _m.Called(_a0, _a1)

	var r0 error
	if rf, ok := ret.Get(0).(func(*cloudwatchlogs.DescribeDestinationsInput, func(*cloudwatchlogs.DescribeDestinationsOutput, bool) bool) error); ok {
		r0 = rf(_a0, _a1)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// DescribeDestinationsPagesWithContext provides a mock function with given fields: _a0, _a1, _a2, _a3
func (_m *CloudWatchLogsAPI) DescribeDestinationsPagesWithContext(_a0 context.Context, _a1 *cloudwatchlogs.DescribeDestinationsInput, _a2 func(*cloudwatchlogs.DescribeDestinationsOutput, bool) bool, _a3 ...request.Option) error {
	_va := make([]interface{}, len(_a3))
	for _i := range _a3 {
		_va[_i] = _a3[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, _a0, _a1, _a2)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, *cloudwatchlogs.DescribeDestinationsInput, func(*cloudwatchlogs.DescribeDestinationsOutput, bool) bool, ...request.Option) error); ok {
		r0 = rf(_a0, _a1, _a2, _a3...)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// DescribeDestinationsRequest provides a mock function with given fields: _a0
func (_m *CloudWatchLogsAPI) DescribeDestinationsRequest(_a0 *cloudwatchlogs.DescribeDestinationsInput) (*request.Request, *cloudwatchlogs.DescribeDestinationsOutput) {
	ret := _m.Called(_a0)

	var r0 *request.Request
	if rf, ok := ret.Get(0).(func(*cloudwatchlogs.DescribeDestinationsInput) *request.Request); ok {
		r0 = rf(_a0)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*request.Request)
		}
	}

	var r1 *cloudwatchlogs.DescribeDestinationsOutput
	if rf, ok := ret.Get(1).(func(*cloudwatchlogs.DescribeDestinationsInput) *cloudwatchlogs.DescribeDestinationsOutput); ok {
		r1 = rf(_a0)
	} else {
		if ret.Get(1) != nil {
			r1 = ret.Get(1).(*cloudwatchlogs.DescribeDestinationsOutput)
		}
	}

	return r0, r1
}

// DescribeDestinationsWithContext provides a mock function with given fields: _a0, _a1, _a2
func (_m *CloudWatchLogsAPI) DescribeDestinationsWithContext(_a0 context.Context, _a1 *cloudwatchlogs.DescribeDestinationsInput, _a2 ...request.Option) (*cloudwatchlogs.DescribeDestinationsOutput, error) {
	_va := make([]interface{}, len(_a2))
	for _i := range _a2 {
		_va[_i] = _a2[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, _a0, _a1)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	var r0 *cloudwatchlogs.DescribeDestinationsOutput
	if rf, ok := ret.Get(0).(func(context.Context, *cloudwatchlogs.DescribeDestinationsInput, ...request.Option) *cloudwatchlogs.DescribeDestinationsOutput); ok {
		r0 = rf(_a0, _a1, _a2...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*cloudwatchlogs.DescribeDestinationsOutput)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, *cloudwatchlogs.DescribeDestinationsInput, ...request.Option) error); ok {
		r1 = rf(_a0, _a1, _a2...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// DescribeExportTasks provides a mock function with given fields: _a0
func (_m *CloudWatchLogsAPI) DescribeExportTasks(_a0 *cloudwatchlogs.DescribeExportTasksInput) (*cloudwatchlogs.DescribeExportTasksOutput, error) {
	ret := _m.Called(_a0)

	var r0 *cloudwatchlogs.DescribeExportTasksOutput
	if rf, ok := ret.Get(0).(func(*cloudwatchlogs.DescribeExportTasksInput) *cloudwatchlogs.DescribeExportTasksOutput); ok {
		r0 = rf(_a0)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*cloudwatchlogs.DescribeExportTasksOutput)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(*cloudwatchlogs.DescribeExportTasksInput) error); ok {
		r1 = rf(_a0)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// DescribeExportTasksRequest provides a mock function with given fields: _a0
func (_m *CloudWatchLogsAPI) DescribeExportTasksRequest(_a0 *cloudwatchlogs.DescribeExportTasksInput) (*request.Request, *cloudwatchlogs.DescribeExportTasksOutput) {
	ret := _m.Called(_a0)

	var r0 *request.Request
	if rf, ok := ret.Get(0).(func(*cloudwatchlogs.DescribeExportTasksInput) *request.Request); ok {
		r0 = rf(_a0)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*request.Request)
		}
	}

	var r1 *cloudwatchlogs.DescribeExportTasksOutput
	if rf, ok := ret.Get(1).(func(*cloudwatchlogs.DescribeExportTasksInput) *cloudwatchlogs.DescribeExportTasksOutput); ok {
		r1 = rf(_a0)
	} else {
		if ret.Get(1) != nil {
			r1 = ret.Get(1).(*cloudwatchlogs.DescribeExportTasksOutput)
		}
	}

	return r0, r1
}

// DescribeExportTasksWithContext provides a mock function with given fields: _a0, _a1, _a2
func (_m *CloudWatchLogsAPI) DescribeExportTasksWithContext(_a0 context.Context, _a1 *cloudwatchlogs.DescribeExportTasksInput, _a2 ...request.Option) (*cloudwatchlogs.DescribeExportTasksOutput, error) {
	_va := make([]interface{}, len(_a2))
	for _i := range _a2 {
		_va[_i] = _a2[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, _a0, _a1)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	var r0 *cloudwatchlogs.DescribeExportTasksOutput
	if rf, ok := ret.Get(0).(func(context.Context, *cloudwatchlogs.DescribeExportTasksInput, ...request.Option) *cloudwatchlogs.DescribeExportTasksOutput); ok {
		r0 = rf(_a0, _a1, _a2...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*cloudwatchlogs.DescribeExportTasksOutput)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, *cloudwatchlogs.DescribeExportTasksInput, ...request.Option) error); ok {
		r1 = rf(_a0, _a1, _a2...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// DescribeLogGroups provides a mock function with given fields: _a0
func (_m *CloudWatchLogsAPI) DescribeLogGroups(_a0 *cloudwatchlogs.DescribeLogGroupsInput) (*cloudwatchlogs.DescribeLogGroupsOutput, error) {
	ret := _m.Called(_a0)

	var r0 *cloudwatchlogs.DescribeLogGroupsOutput
	if rf, ok := ret.Get(0).(func(*cloudwatchlogs.DescribeLogGroupsInput) *cloudwatchlogs.DescribeLogGroupsOutput); ok {
		r0 = rf(_a0)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*cloudwatchlogs.DescribeLogGroupsOutput)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(*cloudwatchlogs.DescribeLogGroupsInput) error); ok {
		r1 = rf(_a0)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// DescribeLogGroupsPages provides a mock function with given fields: _a0, _a1
func (_m *CloudWatchLogsAPI) DescribeLogGroupsPages(_a0 *cloudwatchlogs.DescribeLogGroupsInput, _a1 func(*cloudwatchlogs.DescribeLogGroupsOutput, bool) bool) error {
	ret := _m.Called(_a0, _a1)

	var r0 error
	if rf, ok := ret.Get(0).(func(*cloudwatchlogs.DescribeLogGroupsInput, func(*cloudwatchlogs.DescribeLogGroupsOutput, bool) bool) error); ok {
		r0 = rf(_a0, _a1)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// DescribeLogGroupsPagesWithContext provides a mock function with given fields: _a0, _a1, _a2, _a3
func (_m *CloudWatchLogsAPI) DescribeLogGroupsPagesWithContext(_a0 context.Context, _a1 *cloudwatchlogs.DescribeLogGroupsInput, _a2 func(*cloudwatchlogs.DescribeLogGroupsOutput, bool) bool, _a3 ...request.Option) error {
	_va := make([]interface{}, len(_a3))
	for _i := range _a3 {
		_va[_i] = _a3[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, _a0, _a1, _a2)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, *cloudwatchlogs.DescribeLogGroupsInput, func(*cloudwatchlogs.DescribeLogGroupsOutput, bool) bool, ...request.Option) error); ok {
		r0 = rf(_a0, _a1, _a2, _a3...)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// DescribeLogGroupsRequest provides a mock function with given fields: _a0
func (_m *CloudWatchLogsAPI) DescribeLogGroupsRequest(_a0 *cloudwatchlogs.DescribeLogGroupsInput) (*request.Request, *cloudwatchlogs.DescribeLogGroupsOutput) {
	ret := _m.Called(_a0)

	var r0 *request.Request
	if rf, ok := ret.Get(0).(func(*cloudwatchlogs.DescribeLogGroupsInput) *request.Request); ok {
		r0 = rf(_a0)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*request.Request)
		}
	}

	var r1 *cloudwatchlogs.DescribeLogGroupsOutput
	if rf, ok := ret.Get(1).(func(*cloudwatchlogs.DescribeLogGroupsInput) *cloudwatchlogs.DescribeLogGroupsOutput); ok {
		r1 = rf(_a0)
	} else {
		if ret.Get(1) != nil {
			r1 = ret.Get(1).(*cloudwatchlogs.DescribeLogGroupsOutput)
		}
	}

	return r0, r1
}

// DescribeLogGroupsWithContext provides a mock function with given fields: _a0, _a1, _a2
func (_m *CloudWatchLogsAPI) DescribeLogGroupsWithContext(_a0 context.Context, _a1 *cloudwatchlogs.DescribeLogGroupsInput, _a2 ...request.Option) (*cloudwatchlogs.DescribeLogGroupsOutput, error) {
	_va := make([]interface{}, len(_a2))
	for _i := range _a2 {
		_va[_i] = _a2[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, _a0, _a1)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	var r0 *cloudwatchlogs.DescribeLogGroupsOutput
	if rf, ok := ret.Get(0).(func(context.Context, *cloudwatchlogs.DescribeLogGroupsInput, ...request.Option) *cloudwatchlogs.DescribeLogGroupsOutput); ok {
		r0 = rf(_a0, _a1, _a2...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*cloudwatchlogs.DescribeLogGroupsOutput)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, *cloudwatchlogs.DescribeLogGroupsInput, ...request.Option) error); ok {
		r1 = rf(_a0, _a1, _a2...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// DescribeLogStreams provides a mock function with given fields: _a0
func (_m *CloudWatchLogsAPI) DescribeLogStreams(_a0 *cloudwatchlogs.DescribeLogStreamsInput) (*cloudwatchlogs.DescribeLogStreamsOutput, error) {
	ret := _m.Called(_a0)

	var r0 *cloudwatchlogs.DescribeLogStreamsOutput
	if rf, ok := ret.Get(0).(func(*cloudwatchlogs.DescribeLogStreamsInput) *cloudwatchlogs.DescribeLogStreamsOutput); ok {
		r0 = rf(_a0)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*cloudwatchlogs.DescribeLogStreamsOutput)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(*cloudwatchlogs.DescribeLogStreamsInput) error); ok {
		r1 = rf(_a0)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// DescribeLogStreamsPages provides a mock function with given fields: _a0, _a1
func (_m *CloudWatchLogsAPI) DescribeLogStreamsPages(_a0 *cloudwatchlogs.DescribeLogStreamsInput, _a1 func(*cloudwatchlogs.DescribeLogStreamsOutput, bool) bool) error {
	ret := _m.Called(_a0, _a1)

	var r0 error
	if rf, ok := ret.Get(0).(func(*cloudwatchlogs.DescribeLogStreamsInput, func(*cloudwatchlogs.DescribeLogStreamsOutput, bool) bool) error); ok {
		r0 = rf(_a0, _a1)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// DescribeLogStreamsPagesWithContext provides a mock function with given fields: _a0, _a1, _a2, _a3
func (_m *CloudWatchLogsAPI) DescribeLogStreamsPagesWithContext(_a0 context.Context, _a1 *cloudwatchlogs.DescribeLogStreamsInput, _a2 func(*cloudwatchlogs.DescribeLogStreamsOutput, bool) bool, _a3 ...request.Option) error {
	_va := make([]interface{}, len(_a3))
	for _i := range _a3 {
		_va[_i] = _a3[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, _a0, _a1, _a2)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, *cloudwatchlogs.DescribeLogStreamsInput, func(*cloudwatchlogs.DescribeLogStreamsOutput, bool) bool, ...request.Option) error); ok {
		r0 = rf(_a0, _a1, _a2, _a3...)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// DescribeLogStreamsRequest provides a mock function with given fields: _a0
func (_m *CloudWatchLogsAPI) DescribeLogStreamsRequest(_a0 *cloudwatchlogs.DescribeLogStreamsInput) (*request.Request, *cloudwatchlogs.DescribeLogStreamsOutput) {
	ret := _m.Called(_a0)

	var r0 *request.Request
	if rf, ok := ret.Get(0).(func(*cloudwatchlogs.DescribeLogStreamsInput) *request.Request); ok {
		r0 = rf(_a0)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*request.Request)
		}
	}

	var r1 *cloudwatchlogs.DescribeLogStreamsOutput
	if rf, ok := ret.Get(1).(func(*cloudwatchlogs.DescribeLogStreamsInput) *cloudwatchlogs.DescribeLogStreamsOutput); ok {
		r1 = rf(_a0)
	} else {
		if ret.Get(1) != nil {
			r1 = ret.Get(1).(*cloudwatchlogs.DescribeLogStreamsOutput)
		}
	}

	return r0, r1
}

// DescribeLogStreamsWithContext provides a mock function with given fields: _a0, _a1, _a2
func (_m *CloudWatchLogsAPI) DescribeLogStreamsWithContext(_a0 context.Context, _a1 *cloudwatchlogs.DescribeLogStreamsInput, _a2 ...request.Option) (*cloudwatchlogs.DescribeLogStreamsOutput, error) {
	_va := make([]interface{}, len(_a2))
	for _i := range _a2 {
		_va[_i] = _a2[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, _a0, _a1)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	var r0 *cloudwatchlogs.DescribeLogStreamsOutput
	if rf, ok := ret.Get(0).(func(context.Context, *cloudwatchlogs.DescribeLogStreamsInput, ...request.Option) *cloudwatchlogs.DescribeLogStreamsOutput); ok {
		r0 = rf(_a0, _a1, _a2...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*cloudwatchlogs.DescribeLogStreamsOutput)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, *cloudwatchlogs.DescribeLogStreamsInput, ...request.Option) error); ok {
		r1 = rf(_a0, _a1, _a2...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// DescribeMetricFilters provides a mock function with given fields: _a0
func (_m *CloudWatchLogsAPI) DescribeMetricFilters(_a0 *cloudwatchlogs.DescribeMetricFiltersInput) (*cloudwatchlogs.DescribeMetricFiltersOutput, error) {
	ret := _m.Called(_a0)

	var r0 *cloudwatchlogs.DescribeMetricFiltersOutput
	if rf, ok := ret.Get(0).(func(*cloudwatchlogs.DescribeMetricFiltersInput) *cloudwatchlogs.DescribeMetricFiltersOutput); ok {
		r0 = rf(_a0)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*cloudwatchlogs.DescribeMetricFiltersOutput)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(*cloudwatchlogs.DescribeMetricFiltersInput) error); ok {
		r1 = rf(_a0)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// DescribeMetricFiltersPages provides a mock function with given fields: _a0, _a1
func (_m *CloudWatchLogsAPI) DescribeMetricFiltersPages(_a0 *cloudwatchlogs.DescribeMetricFiltersInput, _a1 func(*cloudwatchlogs.DescribeMetricFiltersOutput, bool) bool) error {
	ret := _m.Called(_a0, _a1)

	var r0 error
	if rf, ok := ret.Get(0).(func(*cloudwatchlogs.DescribeMetricFiltersInput, func(*cloudwatchlogs.DescribeMetricFiltersOutput, bool) bool) error); ok {
		r0 = rf(_a0, _a1)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// DescribeMetricFiltersPagesWithContext provides a mock function with given fields: _a0, _a1, _a2, _a3
func (_m *CloudWatchLogsAPI) DescribeMetricFiltersPagesWithContext(_a0 context.Context, _a1 *cloudwatchlogs.DescribeMetricFiltersInput, _a2 func(*cloudwatchlogs.DescribeMetricFiltersOutput, bool) bool, _a3 ...request.Option) error {
	_va := make([]interface{}, len(_a3))
	for _i := range _a3 {
		_va[_i] = _a3[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, _a0, _a1, _a2)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, *cloudwatchlogs.DescribeMetricFiltersInput, func(*cloudwatchlogs.DescribeMetricFiltersOutput, bool) bool, ...request.Option) error); ok {
		r0 = rf(_a0, _a1, _a2, _a3...)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// DescribeMetricFiltersRequest provides a mock function with given fields: _a0
func (_m *CloudWatchLogsAPI) DescribeMetricFiltersRequest(_a0 *cloudwatchlogs.DescribeMetricFiltersInput) (*request.Request, *cloudwatchlogs.DescribeMetricFiltersOutput) {
	ret := _m.Called(_a0)

	var r0 *request.Request
	if rf, ok := ret.Get(0).(func(*cloudwatchlogs.DescribeMetricFiltersInput) *request.Request); ok {
		r0 = rf(_a0)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*request.Request)
		}
	}

	var r1 *cloudwatchlogs.DescribeMetricFiltersOutput
	if rf, ok := ret.Get(1).(func(*cloudwatchlogs.DescribeMetricFiltersInput) *cloudwatchlogs.DescribeMetricFiltersOutput); ok {
		r1 = rf(_a0)
	} else {
		if ret.Get(1) != nil {
			r1 = ret.Get(1).(*cloudwatchlogs.DescribeMetricFiltersOutput)
		}
	}

	return r0, r1
}

// DescribeMetricFiltersWithContext provides a mock function with given fields: _a0, _a1, _a2
func (_m *CloudWatchLogsAPI) DescribeMetricFiltersWithContext(_a0 context.Context, _a1 *cloudwatchlogs.DescribeMetricFiltersInput, _a2 ...request.Option) (*cloudwatchlogs.DescribeMetricFiltersOutput, error) {
	_va := make([]interface{}, len(_a2))
	for _i := range _a2 {
		_va[_i] = _a2[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, _a0, _a1)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	var r0 *cloudwatchlogs.DescribeMetricFiltersOutput
	if rf, ok := ret.Get(0).(func(context.Context, *cloudwatchlogs.DescribeMetricFiltersInput, ...request.Option) *cloudwatchlogs.DescribeMetricFiltersOutput); ok {
		r0 = rf(_a0, _a1, _a2...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*cloudwatchlogs.DescribeMetricFiltersOutput)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, *cloudwatchlogs.DescribeMetricFiltersInput, ...request.Option) error); ok {
		r1 = rf(_a0, _a1, _a2...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// DescribeQueries provides a mock function with given fields: _a0
func (_m *CloudWatchLogsAPI) DescribeQueries(_a0 *cloudwatchlogs.DescribeQueriesInput) (*cloudwatchlogs.DescribeQueriesOutput, error) {
	ret := _m.Called(_a0)

	var r0 *cloudwatchlogs.DescribeQueriesOutput
	if rf, ok := ret.Get(0).(func(*cloudwatchlogs.DescribeQueriesInput) *cloudwatchlogs.DescribeQueriesOutput); ok {
		r0 = rf(_a0)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*cloudwatchlogs.DescribeQueriesOutput)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(*cloudwatchlogs.DescribeQueriesInput) error); ok {
		r1 = rf(_a0)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// DescribeQueriesRequest provides a mock function with given fields: _a0
func (_m *CloudWatchLogsAPI) DescribeQueriesRequest(_a0 *cloudwatchlogs.DescribeQueriesInput) (*request.Request, *cloudwatchlogs.DescribeQueriesOutput) {
	ret := _m.Called(_a0)

	var r0 *request.Request
	if rf, ok := ret.Get(0).(func(*cloudwatchlogs.DescribeQueriesInput) *request.Request); ok {
		r0 = rf(_a0)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*request.Request)
		}
	}

	var r1 *cloudwatchlogs.DescribeQueriesOutput
	if rf, ok := ret.Get(1).(func(*cloudwatchlogs.DescribeQueriesInput) *cloudwatchlogs.DescribeQueriesOutput); ok {
		r1 = rf(_a0)
	} else {
		if ret.Get(1) != nil {
			r1 = ret.Get(1).(*cloudwatchlogs.DescribeQueriesOutput)
		}
	}

	return r0, r1
}

// DescribeQueriesWithContext provides a mock function with given fields: _a0, _a1, _a2
func (_m *CloudWatchLogsAPI) DescribeQueriesWithContext(_a0 context.Context, _a1 *cloudwatchlogs.DescribeQueriesInput, _a2 ...request.Option) (*cloudwatchlogs.DescribeQueriesOutput, error) {
	_va := make([]interface{}, len(_a2))
	for _i := range _a2 {
		_va[_i] = _a2[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, _a0, _a1)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	var r0 *cloudwatchlogs.DescribeQueriesOutput
	if rf, ok := ret.Get(0).(func(context.Context, *cloudwatchlogs.DescribeQueriesInput, ...request.Option) *cloudwatchlogs.DescribeQueriesOutput); ok {
		r0 = rf(_a0, _a1, _a2...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*cloudwatchlogs.DescribeQueriesOutput)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, *cloudwatchlogs.DescribeQueriesInput, ...request.Option) error); ok {
		r1 = rf(_a0, _a1, _a2...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// DescribeQueryDefinitions provides a mock function with given fields: _a0
func (_m *CloudWatchLogsAPI) DescribeQueryDefinitions(_a0 *cloudwatchlogs.DescribeQueryDefinitionsInput) (*cloudwatchlogs.DescribeQueryDefinitionsOutput, error) {
	ret := _m.Called(_a0)

	var r0 *cloudwatchlogs.DescribeQueryDefinitionsOutput
	if rf, ok := ret.Get(0).(func(*cloudwatchlogs.DescribeQueryDefinitionsInput) *cloudwatchlogs.DescribeQueryDefinitionsOutput); ok {
		r0 = rf(_a0)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*cloudwatchlogs.DescribeQueryDefinitionsOutput)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(*cloudwatchlogs.DescribeQueryDefinitionsInput) error); ok {
		r1 = rf(_a0)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// DescribeQueryDefinitionsRequest provides a mock function with given fields: _a0
func (_m *CloudWatchLogsAPI) DescribeQueryDefinitionsRequest(_a0 *cloudwatchlogs.DescribeQueryDefinitionsInput) (*request.Request, *cloudwatchlogs.DescribeQueryDefinitionsOutput) {
	ret := _m.Called(_a0)

	var r0 *request.Request
	if rf, ok := ret.Get(0).(func(*cloudwatchlogs.DescribeQueryDefinitionsInput) *request.Request); ok {
		r0 = rf(_a0)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*request.Request)
		}
	}

	var r1 *cloudwatchlogs.DescribeQueryDefinitionsOutput
	if rf, ok := ret.Get(1).(func(*cloudwatchlogs.DescribeQueryDefinitionsInput) *cloudwatchlogs.DescribeQueryDefinitionsOutput); ok {
		r1 = rf(_a0)
	} else {
		if ret.Get(1) != nil {
			r1 = ret.Get(1).(*cloudwatchlogs.DescribeQueryDefinitionsOutput)
		}
	}

	return r0, r1
}

// DescribeQueryDefinitionsWithContext provides a mock function with given fields: _a0, _a1, _a2
func (_m *CloudWatchLogsAPI) DescribeQueryDefinitionsWithContext(_a0 context.Context, _a1 *cloudwatchlogs.DescribeQueryDefinitionsInput, _a2 ...request.Option) (*cloudwatchlogs.DescribeQueryDefinitionsOutput, error) {
	_va := make([]interface{}, len(_a2))
	for _i := range _a2 {
		_va[_i] = _a2[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, _a0, _a1)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	var r0 *cloudwatchlogs.DescribeQueryDefinitionsOutput
	if rf, ok := ret.Get(0).(func(context.Context, *cloudwatchlogs.DescribeQueryDefinitionsInput, ...request.Option) *cloudwatchlogs.DescribeQueryDefinitionsOutput); ok {
		r0 = rf(_a0, _a1, _a2...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*cloudwatchlogs.DescribeQueryDefinitionsOutput)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, *cloudwatchlogs.DescribeQueryDefinitionsInput, ...request.Option) error); ok {
		r1 = rf(_a0, _a1, _a2...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// DescribeResourcePolicies provides a mock function with given fields: _a0
func (_m *CloudWatchLogsAPI) DescribeResourcePolicies(_a0 *cloudwatchlogs.DescribeResourcePoliciesInput) (*cloudwatchlogs.DescribeResourcePoliciesOutput, error) {
	ret := _m.Called(_a0)

	var r0 *cloudwatchlogs.DescribeResourcePoliciesOutput
	if rf, ok := ret.Get(0).(func(*cloudwatchlogs.DescribeResourcePoliciesInput) *cloudwatchlogs.DescribeResourcePoliciesOutput); ok {
		r0 = rf(_a0)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*cloudwatchlogs.DescribeResourcePoliciesOutput)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(*cloudwatchlogs.DescribeResourcePoliciesInput) error); ok {
		r1 = rf(_a0)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// DescribeResourcePoliciesRequest provides a mock function with given fields: _a0
func (_m *CloudWatchLogsAPI) DescribeResourcePoliciesRequest(_a0 *cloudwatchlogs.DescribeResourcePoliciesInput) (*request.Request, *cloudwatchlogs.DescribeResourcePoliciesOutput) {
	ret := _m.Called(_a0)

	var r0 *request.Request
	if rf, ok := ret.Get(0).(func(*cloudwatchlogs.DescribeResourcePoliciesInput) *request.Request); ok {
		r0 = rf(_a0)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*request.Request)
		}
	}

	var r1 *cloudwatchlogs.DescribeResourcePoliciesOutput
	if rf, ok := ret.Get(1).(func(*cloudwatchlogs.DescribeResourcePoliciesInput) *cloudwatchlogs.DescribeResourcePoliciesOutput); ok {
		r1 = rf(_a0)
	} else {
		if ret.Get(1) != nil {
			r1 = ret.Get(1).(*cloudwatchlogs.DescribeResourcePoliciesOutput)
		}
	}

	return r0, r1
}

// DescribeResourcePoliciesWithContext provides a mock function with given fields: _a0, _a1, _a2
func (_m *CloudWatchLogsAPI) DescribeResourcePoliciesWithContext(_a0 context.Context, _a1 *cloudwatchlogs.DescribeResourcePoliciesInput, _a2 ...request.Option) (*cloudwatchlogs.DescribeResourcePoliciesOutput, error) {
	_va := make([]interface{}, len(_a2))
	for _i := range _a2 {
		_va[_i] = _a2[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, _a0, _a1)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	var r0 *cloudwatchlogs.DescribeResourcePoliciesOutput
	if rf, ok := ret.Get(0).(func(context.Context, *cloudwatchlogs.DescribeResourcePoliciesInput, ...request.Option) *cloudwatchlogs.DescribeResourcePoliciesOutput); ok {
		r0 = rf(_a0, _a1, _a2...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*cloudwatchlogs.DescribeResourcePoliciesOutput)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, *cloudwatchlogs.DescribeResourcePoliciesInput, ...request.Option) error); ok {
		r1 = rf(_a0, _a1, _a2...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// DescribeSubscriptionFilters provides a mock function with given fields: _a0
func (_m *CloudWatchLogsAPI) DescribeSubscriptionFilters(_a0 *cloudwatchlogs.DescribeSubscriptionFiltersInput) (*cloudwatchlogs.DescribeSubscriptionFiltersOutput, error) {
	ret := _m.Called(_a0)

	var r0 *cloudwatchlogs.DescribeSubscriptionFiltersOutput
	if rf, ok := ret.Get(0).(func(*cloudwatchlogs.DescribeSubscriptionFiltersInput) *cloudwatchlogs.DescribeSubscriptionFiltersOutput); ok {
		r0 = rf(_a0)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*cloudwatchlogs.DescribeSubscriptionFiltersOutput)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(*cloudwatchlogs.DescribeSubscriptionFiltersInput) error); ok {
		r1 = rf(_a0)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// DescribeSubscriptionFiltersPages provides a mock function with given fields: _a0, _a1
func (_m *CloudWatchLogsAPI) DescribeSubscriptionFiltersPages(_a0 *cloudwatchlogs.DescribeSubscriptionFiltersInput, _a1 func(*cloudwatchlogs.DescribeSubscriptionFiltersOutput, bool) bool) error {
	ret := _m.Called(_a0, _a1)

	var r0 error
	if rf, ok := ret.Get(0).(func(*cloudwatchlogs.DescribeSubscriptionFiltersInput, func(*cloudwatchlogs.DescribeSubscriptionFiltersOutput, bool) bool) error); ok {
		r0 = rf(_a0, _a1)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// DescribeSubscriptionFiltersPagesWithContext provides a mock function with given fields: _a0, _a1, _a2, _a3
func (_m *CloudWatchLogsAPI) DescribeSubscriptionFiltersPagesWithContext(_a0 context.Context, _a1 *cloudwatchlogs.DescribeSubscriptionFiltersInput, _a2 func(*cloudwatchlogs.DescribeSubscriptionFiltersOutput, bool) bool, _a3 ...request.Option) error {
	_va := make([]interface{}, len(_a3))
	for _i := range _a3 {
		_va[_i] = _a3[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, _a0, _a1, _a2)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, *cloudwatchlogs.DescribeSubscriptionFiltersInput, func(*cloudwatchlogs.DescribeSubscriptionFiltersOutput, bool) bool, ...request.Option) error); ok {
		r0 = rf(_a0, _a1, _a2, _a3...)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// DescribeSubscriptionFiltersRequest provides a mock function with given fields: _a0
func (_m *CloudWatchLogsAPI) DescribeSubscriptionFiltersRequest(_a0 *cloudwatchlogs.DescribeSubscriptionFiltersInput) (*request.Request, *cloudwatchlogs.DescribeSubscriptionFiltersOutput) {
	ret := _m.Called(_a0)

	var r0 *request.Request
	if rf, ok := ret.Get(0).(func(*cloudwatchlogs.DescribeSubscriptionFiltersInput) *request.Request); ok {
		r0 = rf(_a0)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*request.Request)
		}
	}

	var r1 *cloudwatchlogs.DescribeSubscriptionFiltersOutput
	if rf, ok := ret.Get(1).(func(*cloudwatchlogs.DescribeSubscriptionFiltersInput) *cloudwatchlogs.DescribeSubscriptionFiltersOutput); ok {
		r1 = rf(_a0)
	} else {
		if ret.Get(1) != nil {
			r1 = ret.Get(1).(*cloudwatchlogs.DescribeSubscriptionFiltersOutput)
		}
	}

	return r0, r1
}

// DescribeSubscriptionFiltersWithContext provides a mock function with given fields: _a0, _a1, _a2
func (_m *CloudWatchLogsAPI) DescribeSubscriptionFiltersWithContext(_a0 context.Context, _a1 *cloudwatchlogs.DescribeSubscriptionFiltersInput, _a2 ...request.Option) (*cloudwatchlogs.DescribeSubscriptionFiltersOutput, error) {
	_va := make([]interface{}, len(_a2))
	for _i := range _a2 {
		_va[_i] = _a2[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, _a0, _a1)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	var r0 *cloudwatchlogs.DescribeSubscriptionFiltersOutput
	if rf, ok := ret.Get(0).(func(context.Context, *cloudwatchlogs.DescribeSubscriptionFiltersInput, ...request.Option) *cloudwatchlogs.DescribeSubscriptionFiltersOutput); ok {
		r0 = rf(_a0, _a1, _a2...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*cloudwatchlogs.DescribeSubscriptionFiltersOutput)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, *cloudwatchlogs.DescribeSubscriptionFiltersInput, ...request.Option) error); ok {
		r1 = rf(_a0, _a1, _a2...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// DisassociateKmsKey provides a mock function with given fields: _a0
func (_m *CloudWatchLogsAPI) DisassociateKmsKey(_a0 *cloudwatchlogs.DisassociateKmsKeyInput) (*cloudwatchlogs.DisassociateKmsKeyOutput, error) {
	ret := _m.Called(_a0)

	var r0 *cloudwatchlogs.DisassociateKmsKeyOutput
	if rf, ok := ret.Get(0).(func(*cloudwatchlogs.DisassociateKmsKeyInput) *cloudwatchlogs.DisassociateKmsKeyOutput); ok {
		r0 = rf(_a0)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*cloudwatchlogs.DisassociateKmsKeyOutput)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(*cloudwatchlogs.DisassociateKmsKeyInput) error); ok {
		r1 = rf(_a0)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// DisassociateKmsKeyRequest provides a mock function with given fields: _a0
func (_m *CloudWatchLogsAPI) DisassociateKmsKeyRequest(_a0 *cloudwatchlogs.DisassociateKmsKeyInput) (*request.Request, *cloudwatchlogs.DisassociateKmsKeyOutput) {
	ret := _m.Called(_a0)

	var r0 *request.Request
	if rf, ok := ret.Get(0).(func(*cloudwatchlogs.DisassociateKmsKeyInput) *request.Request); ok {
		r0 = rf(_a0)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*request.Request)
		}
	}

	var r1 *cloudwatchlogs.DisassociateKmsKeyOutput
	if rf, ok := ret.Get(1).(func(*cloudwatchlogs.DisassociateKmsKeyInput) *cloudwatchlogs.DisassociateKmsKeyOutput); ok {
		r1 = rf(_a0)
	} else {
		if ret.Get(1) != nil {
			r1 = ret.Get(1).(*cloudwatchlogs.DisassociateKmsKeyOutput)
		}
	}

	return r0, r1
}

// DisassociateKmsKeyWithContext provides a mock function with given fields: _a0, _a1, _a2
func (_m *CloudWatchLogsAPI) DisassociateKmsKeyWithContext(_a0 context.Context, _a1 *cloudwatchlogs.DisassociateKmsKeyInput, _a2 ...request.Option) (*cloudwatchlogs.DisassociateKmsKeyOutput, error) {
	_va := make([]interface{}, len(_a2))
	for _i := range _a2 {
		_va[_i] = _a2[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, _a0, _a1)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	var r0 *cloudwatchlogs.DisassociateKmsKeyOutput
	if rf, ok := ret.Get(0).(func(context.Context, *cloudwatchlogs.DisassociateKmsKeyInput, ...request.Option) *cloudwatchlogs.DisassociateKmsKeyOutput); ok {
		r0 = rf(_a0, _a1, _a2...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*cloudwatchlogs.DisassociateKmsKeyOutput)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, *cloudwatchlogs.DisassociateKmsKeyInput, ...request.Option) error); ok {
		r1 = rf(_a0, _a1, _a2...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// FilterLogEvents provides a mock function with given fields: _a0
func (_m *CloudWatchLogsAPI) FilterLogEvents(_a0 *cloudwatchlogs.FilterLogEventsInput) (*cloudwatchlogs.FilterLogEventsOutput, error) {
	ret := _m.Called(_a0)

	var r0 *cloudwatchlogs.FilterLogEventsOutput
	if rf, ok := ret.Get(0).(func(*cloudwatchlogs.FilterLogEventsInput) *cloudwatchlogs.FilterLogEventsOutput); ok {
		r0 = rf(_a0)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*cloudwatchlogs.FilterLogEventsOutput)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(*cloudwatchlogs.FilterLogEventsInput) error); ok {
		r1 = rf(_a0)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// FilterLogEventsPages provides a mock function with given fields: _a0, _a1
func (_m *CloudWatchLogsAPI) FilterLogEventsPages(_a0 *cloudwatchlogs.FilterLogEventsInput, _a1 func(*cloudwatchlogs.FilterLogEventsOutput, bool) bool) error {
	ret := _m.Called(_a0, _a1)

	var r0 error
	if rf, ok := ret.Get(0).(func(*cloudwatchlogs.FilterLogEventsInput, func(*cloudwatchlogs.FilterLogEventsOutput, bool) bool) error); ok {
		r0 = rf(_a0, _a1)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// FilterLogEventsPagesWithContext provides a mock function with given fields: _a0, _a1, _a2, _a3
func (_m *CloudWatchLogsAPI) FilterLogEventsPagesWithContext(_a0 context.Context, _a1 *cloudwatchlogs.FilterLogEventsInput, _a2 func(*cloudwatchlogs.FilterLogEventsOutput, bool) bool, _a3 ...request.Option) error {
	_va := make([]interface{}, len(_a3))
	for _i := range _a3 {
		_va[_i] = _a3[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, _a0, _a1, _a2)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, *cloudwatchlogs.FilterLogEventsInput, func(*cloudwatchlogs.FilterLogEventsOutput, bool) bool, ...request.Option) error); ok {
		r0 = rf(_a0, _a1, _a2, _a3...)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// FilterLogEventsRequest provides a mock function with given fields: _a0
func (_m *CloudWatchLogsAPI) FilterLogEventsRequest(_a0 *cloudwatchlogs.FilterLogEventsInput) (*request.Request, *cloudwatchlogs.FilterLogEventsOutput) {
	ret := _m.Called(_a0)

	var r0 *request.Request
	if rf, ok := ret.Get(0).(func(*cloudwatchlogs.FilterLogEventsInput) *request.Request); ok {
		r0 = rf(_a0)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*request.Request)
		}
	}

	var r1 *cloudwatchlogs.FilterLogEventsOutput
	if rf, ok := ret.Get(1).(func(*cloudwatchlogs.FilterLogEventsInput) *cloudwatchlogs.FilterLogEventsOutput); ok {
		r1 = rf(_a0)
	} else {
		if ret.Get(1) != nil {
			r1 = ret.Get(1).(*cloudwatchlogs.FilterLogEventsOutput)
		}
	}

	return r0, r1
}

// FilterLogEventsWithContext provides a mock function with given fields: _a0, _a1, _a2
func (_m *CloudWatchLogsAPI) FilterLogEventsWithContext(_a0 context.Context, _a1 *cloudwatchlogs.FilterLogEventsInput, _a2 ...request.Option) (*cloudwatchlogs.FilterLogEventsOutput, error) {
	_va := make([]interface{}, len(_a2))
	for _i := range _a2 {
		_va[_i] = _a2[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, _a0, _a1)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	var r0 *cloudwatchlogs.FilterLogEventsOutput
	if rf, ok := ret.Get(0).(func(context.Context, *cloudwatchlogs.FilterLogEventsInput, ...request.Option) *cloudwatchlogs.FilterLogEventsOutput); ok {
		r0 = rf(_a0, _a1, _a2...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*cloudwatchlogs.FilterLogEventsOutput)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, *cloudwatchlogs.FilterLogEventsInput, ...request.Option) error); ok {
		r1 = rf(_a0, _a1, _a2...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetDataProtectionPolicy provides a mock function with given fields: _a0
func (_m *CloudWatchLogsAPI) GetDataProtectionPolicy(_a0 *cloudwatchlogs.GetDataProtectionPolicyInput) (*cloudwatchlogs.GetDataProtectionPolicyOutput, error) {
	ret := _m.Called(_a0)

	var r0 *cloudwatchlogs.GetDataProtectionPolicyOutput
	if rf, ok := ret.Get(0).(func(*cloudwatchlogs.GetDataProtectionPolicyInput) *cloudwatchlogs.GetDataProtectionPolicyOutput); ok {
		r0 = rf(_a0)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*cloudwatchlogs.GetDataProtectionPolicyOutput)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(*cloudwatchlogs.GetDataProtectionPolicyInput) error); ok {
		r1 = rf(_a0)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetDataProtectionPolicyRequest provides a mock function with given fields: _a0
func (_m *CloudWatchLogsAPI) GetDataProtectionPolicyRequest(_a0 *cloudwatchlogs.GetDataProtectionPolicyInput) (*request.Request, *cloudwatchlogs.GetDataProtectionPolicyOutput) {
	ret := _m.Called(_a0)

	var r0 *request.Request
	if rf, ok := ret.Get(0).(func(*cloudwatchlogs.GetDataProtectionPolicyInput) *request.Request); ok {
		r0 = rf(_a0)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*request.Request)
		}
	}

	var r1 *cloudwatchlogs.GetDataProtectionPolicyOutput
	if rf, ok := ret.Get(1).(func(*cloudwatchlogs.GetDataProtectionPolicyInput) *cloudwatchlogs.GetDataProtectionPolicyOutput); ok {
		r1 = rf(_a0)
	} else {
		if ret.Get(1) != nil {
			r1 = ret.Get(1).(*cloudwatchlogs.GetDataProtectionPolicyOutput)
		}
	}

	return r0, r1
}

// GetDataProtectionPolicyWithContext provides a mock function with given fields: _a0, _a1, _a2
func (_m *CloudWatchLogsAPI) GetDataProtectionPolicyWithContext(_a0 context.Context, _a1 *cloudwatchlogs.GetDataProtectionPolicyInput, _a2 ...request.Option) (*cloudwatchlogs.GetDataProtectionPolicyOutput, error) {
	_va := make([]interface{}, len(_a2))
	for _i := range _a2 {
		_va[_i] = _a2[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, _a0, _a1)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	var r0 *cloudwatchlogs.GetDataProtectionPolicyOutput
	if rf, ok := ret.Get(0).(func(context.Context, *cloudwatchlogs.GetDataProtectionPolicyInput, ...request.Option) *cloudwatchlogs.GetDataProtectionPolicyOutput); ok {
		r0 = rf(_a0, _a1, _a2...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*cloudwatchlogs.GetDataProtectionPolicyOutput)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, *cloudwatchlogs.GetDataProtectionPolicyInput, ...request.Option) error); ok {
		r1 = rf(_a0, _a1, _a2...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetDelivery provides a mock function with given fields: _a0
func (_m *CloudWatchLogsAPI) GetDelivery(_a0 *cloudwatchlogs.GetDeliveryInput) (*cloudwatchlogs.GetDeliveryOutput, error) {
	ret := _m.Called(_a0)

	var r0 *cloudwatchlogs.GetDeliveryOutput
	if rf, ok := ret.Get(0).(func(*cloudwatchlogs.GetDeliveryInput) *cloudwatchlogs.GetDeliveryOutput); ok {
		r0 = rf(_a0)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*cloudwatchlogs.GetDeliveryOutput)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(*cloudwatchlogs.GetDeliveryInput) error); ok {
		r1 = rf(_a0)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetDeliveryDestination provides a mock function with given fields: _a0
func (_m *CloudWatchLogsAPI) GetDeliveryDestination(_a0 *cloudwatchlogs.GetDeliveryDestinationInput) (*cloudwatchlogs.GetDeliveryDestinationOutput, error) {
	ret := _m.Called(_a0)

	var r0 *cloudwatchlogs.GetDeliveryDestinationOutput
	if rf, ok := ret.Get(0).(func(*cloudwatchlogs.GetDeliveryDestinationInput) *cloudwatchlogs.GetDeliveryDestinationOutput); ok {
		r0 = rf(_a0)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*cloudwatchlogs.GetDeliveryDestinationOutput)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(*cloudwatchlogs.GetDeliveryDestinationInput) error); ok {
		r1 = rf(_a0)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetDeliveryDestinationPolicy provides a mock function with given fields: _a0
func (_m *CloudWatchLogsAPI) GetDeliveryDestinationPolicy(_a0 *cloudwatchlogs.GetDeliveryDestinationPolicyInput) (*cloudwatchlogs.GetDeliveryDestinationPolicyOutput, error) {
	ret := _m.Called(_a0)

	var r0 *cloudwatchlogs.GetDeliveryDestinationPolicyOutput
	if rf, ok := ret.Get(0).(func(*cloudwatchlogs.GetDeliveryDestinationPolicyInput) *cloudwatchlogs.GetDeliveryDestinationPolicyOutput); ok {
		r0 = rf(_a0)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*cloudwatchlogs.GetDeliveryDestinationPolicyOutput)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(*cloudwatchlogs.GetDeliveryDestinationPolicyInput) error); ok {
		r1 = rf(_a0)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetDeliveryDestinationPolicyRequest provides a mock function with given fields: _a0
func (_m *CloudWatchLogsAPI) GetDeliveryDestinationPolicyRequest(_a0 *cloudwatchlogs.GetDeliveryDestinationPolicyInput) (*request.Request, *cloudwatchlogs.GetDeliveryDestinationPolicyOutput) {
	ret := _m.Called(_a0)

	var r0 *request.Request
	if rf, ok := ret.Get(0).(func(*cloudwatchlogs.GetDeliveryDestinationPolicyInput) *request.Request); ok {
		r0 = rf(_a0)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*request.Request)
		}
	}

	var r1 *cloudwatchlogs.GetDeliveryDestinationPolicyOutput
	if rf, ok := ret.Get(1).(func(*cloudwatchlogs.GetDeliveryDestinationPolicyInput) *cloudwatchlogs.GetDeliveryDestinationPolicyOutput); ok {
		r1 = rf(_a0)
	} else {
		if ret.Get(1) != nil {
			r1 = ret.Get(1).(*cloudwatchlogs.GetDeliveryDestinationPolicyOutput)
		}
	}

	return r0, r1
}

// GetDeliveryDestinationPolicyWithContext provides a mock function with given fields: _a0, _a1, _a2
func (_m *CloudWatchLogsAPI) GetDeliveryDestinationPolicyWithContext(_a0 context.Context, _a1 *cloudwatchlogs.GetDeliveryDestinationPolicyInput, _a2 ...request.Option) (*cloudwatchlogs.GetDeliveryDestinationPolicyOutput, error) {
	_va := make([]interface{}, len(_a2))
	for _i := range _a2 {
		_va[_i] = _a2[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, _a0, _a1)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	var r0 *cloudwatchlogs.GetDeliveryDestinationPolicyOutput
	if rf, ok := ret.Get(0).(func(context.Context, *cloudwatchlogs.GetDeliveryDestinationPolicyInput, ...request.Option) *cloudwatchlogs.GetDeliveryDestinationPolicyOutput); ok {
		r0 = rf(_a0, _a1, _a2...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*cloudwatchlogs.GetDeliveryDestinationPolicyOutput)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, *cloudwatchlogs.GetDeliveryDestinationPolicyInput, ...request.Option) error); ok {
		r1 = rf(_a0, _a1, _a2...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetDeliveryDestinationRequest provides a mock function with given fields: _a0
func (_m *CloudWatchLogsAPI) GetDeliveryDestinationRequest(_a0 *cloudwatchlogs.GetDeliveryDestinationInput) (*request.Request, *cloudwatchlogs.GetDeliveryDestinationOutput) {
	ret := _m.Called(_a0)

	var r0 *request.Request
	if rf, ok := ret.Get(0).(func(*cloudwatchlogs.GetDeliveryDestinationInput) *request.Request); ok {
		r0 = rf(_a0)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*request.Request)
		}
	}

	var r1 *cloudwatchlogs.GetDeliveryDestinationOutput
	if rf, ok := ret.Get(1).(func(*cloudwatchlogs.GetDeliveryDestinationInput) *cloudwatchlogs.GetDeliveryDestinationOutput); ok {
		r1 = rf(_a0)
	} else {
		if ret.Get(1) != nil {
			r1 = ret.Get(1).(*cloudwatchlogs.GetDeliveryDestinationOutput)
		}
	}

	return r0, r1
}

// GetDeliveryDestinationWithContext provides a mock function with given fields: _a0, _a1, _a2
func (_m *CloudWatchLogsAPI) GetDeliveryDestinationWithContext(_a0 context.Context, _a1 *cloudwatchlogs.GetDeliveryDestinationInput, _a2 ...request.Option) (*cloudwatchlogs.GetDeliveryDestinationOutput, error) {
	_va := make([]interface{}, len(_a2))
	for _i := range _a2 {
		_va[_i] = _a2[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, _a0, _a1)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	var r0 *cloudwatchlogs.GetDeliveryDestinationOutput
	if rf, ok := ret.Get(0).(func(context.Context, *cloudwatchlogs.GetDeliveryDestinationInput, ...request.Option) *cloudwatchlogs.GetDeliveryDestinationOutput); ok {
		r0 = rf(_a0, _a1, _a2...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*cloudwatchlogs.GetDeliveryDestinationOutput)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, *cloudwatchlogs.GetDeliveryDestinationInput, ...request.Option) error); ok {
		r1 = rf(_a0, _a1, _a2...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetDeliveryRequest provides a mock function with given fields: _a0
func (_m *CloudWatchLogsAPI) GetDeliveryRequest(_a0 *cloudwatchlogs.GetDeliveryInput) (*request.Request, *cloudwatchlogs.GetDeliveryOutput) {
	ret := _m.Called(_a0)

	var r0 *request.Request
	if rf, ok := ret.Get(0).(func(*cloudwatchlogs.GetDeliveryInput) *request.Request); ok {
		r0 = rf(_a0)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*request.Request)
		}
	}

	var r1 *cloudwatchlogs.GetDeliveryOutput
	if rf, ok := ret.Get(1).(func(*cloudwatchlogs.GetDeliveryInput) *cloudwatchlogs.GetDeliveryOutput); ok {
		r1 = rf(_a0)
	} else {
		if ret.Get(1) != nil {
			r1 = ret.Get(1).(*cloudwatchlogs.GetDeliveryOutput)
		}
	}

	return r0, r1
}

// GetDeliverySource provides a mock function with given fields: _a0
func (_m *CloudWatchLogsAPI) GetDeliverySource(_a0 *cloudwatchlogs.GetDeliverySourceInput) (*cloudwatchlogs.GetDeliverySourceOutput, error) {
	ret := _m.Called(_a0)

	var r0 *cloudwatchlogs.GetDeliverySourceOutput
	if rf, ok := ret.Get(0).(func(*cloudwatchlogs.GetDeliverySourceInput) *cloudwatchlogs.GetDeliverySourceOutput); ok {
		r0 = rf(_a0)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*cloudwatchlogs.GetDeliverySourceOutput)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(*cloudwatchlogs.GetDeliverySourceInput) error); ok {
		r1 = rf(_a0)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetDeliverySourceRequest provides a mock function with given fields: _a0
func (_m *CloudWatchLogsAPI) GetDeliverySourceRequest(_a0 *cloudwatchlogs.GetDeliverySourceInput) (*request.Request, *cloudwatchlogs.GetDeliverySourceOutput) {
	ret := _m.Called(_a0)

	var r0 *request.Request
	if rf, ok := ret.Get(0).(func(*cloudwatchlogs.GetDeliverySourceInput) *request.Request); ok {
		r0 = rf(_a0)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*request.Request)
		}
	}

	var r1 *cloudwatchlogs.GetDeliverySourceOutput
	if rf, ok := ret.Get(1).(func(*cloudwatchlogs.GetDeliverySourceInput) *cloudwatchlogs.GetDeliverySourceOutput); ok {
		r1 = rf(_a0)
	} else {
		if ret.Get(1) != nil {
			r1 = ret.Get(1).(*cloudwatchlogs.GetDeliverySourceOutput)
		}
	}

	return r0, r1
}

// GetDeliverySourceWithContext provides a mock function with given fields: _a0, _a1, _a2
func (_m *CloudWatchLogsAPI) GetDeliverySourceWithContext(_a0 context.Context, _a1 *cloudwatchlogs.GetDeliverySourceInput, _a2 ...request.Option) (*cloudwatchlogs.GetDeliverySourceOutput, error) {
	_va := make([]interface{}, len(_a2))
	for _i := range _a2 {
		_va[_i] = _a2[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, _a0, _a1)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	var r0 *cloudwatchlogs.GetDeliverySourceOutput
	if rf, ok := ret.Get(0).(func(context.Context, *cloudwatchlogs.GetDeliverySourceInput, ...request.Option) *cloudwatchlogs.GetDeliverySourceOutput); ok {
		r0 = rf(_a0, _a1, _a2...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*cloudwatchlogs.GetDeliverySourceOutput)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, *cloudwatchlogs.GetDeliverySourceInput, ...request.Option) error); ok {
		r1 = rf(_a0, _a1, _a2...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetDeliveryWithContext provides a mock function with given fields: _a0, _a1, _a2
func (_m *CloudWatchLogsAPI) GetDeliveryWithContext(_a0 context.Context, _a1 *cloudwatchlogs.GetDeliveryInput, _a2 ...request.Option) (*cloudwatchlogs.GetDeliveryOutput, error) {
	_va := make([]interface{}, len(_a2))
	for _i := range _a2 {
		_va[_i] = _a2[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, _a0, _a1)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	var r0 *cloudwatchlogs.GetDeliveryOutput
	if rf, ok := ret.Get(0).(func(context.Context, *cloudwatchlogs.GetDeliveryInput, ...request.Option) *cloudwatchlogs.GetDeliveryOutput); ok {
		r0 = rf(_a0, _a1, _a2...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*cloudwatchlogs.GetDeliveryOutput)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, *cloudwatchlogs.GetDeliveryInput, ...request.Option) error); ok {
		r1 = rf(_a0, _a1, _a2...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetLogAnomalyDetector provides a mock function with given fields: _a0
func (_m *CloudWatchLogsAPI) GetLogAnomalyDetector(_a0 *cloudwatchlogs.GetLogAnomalyDetectorInput) (*cloudwatchlogs.GetLogAnomalyDetectorOutput, error) {
	ret := _m.Called(_a0)

	var r0 *cloudwatchlogs.GetLogAnomalyDetectorOutput
	if rf, ok := ret.Get(0).(func(*cloudwatchlogs.GetLogAnomalyDetectorInput) *cloudwatchlogs.GetLogAnomalyDetectorOutput); ok {
		r0 = rf(_a0)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*cloudwatchlogs.GetLogAnomalyDetectorOutput)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(*cloudwatchlogs.GetLogAnomalyDetectorInput) error); ok {
		r1 = rf(_a0)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetLogAnomalyDetectorRequest provides a mock function with given fields: _a0
func (_m *CloudWatchLogsAPI) GetLogAnomalyDetectorRequest(_a0 *cloudwatchlogs.GetLogAnomalyDetectorInput) (*request.Request, *cloudwatchlogs.GetLogAnomalyDetectorOutput) {
	ret := _m.Called(_a0)

	var r0 *request.Request
	if rf, ok := ret.Get(0).(func(*cloudwatchlogs.GetLogAnomalyDetectorInput) *request.Request); ok {
		r0 = rf(_a0)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*request.Request)
		}
	}

	var r1 *cloudwatchlogs.GetLogAnomalyDetectorOutput
	if rf, ok := ret.Get(1).(func(*cloudwatchlogs.GetLogAnomalyDetectorInput) *cloudwatchlogs.GetLogAnomalyDetectorOutput); ok {
		r1 = rf(_a0)
	} else {
		if ret.Get(1) != nil {
			r1 = ret.Get(1).(*cloudwatchlogs.GetLogAnomalyDetectorOutput)
		}
	}

	return r0, r1
}

// GetLogAnomalyDetectorWithContext provides a mock function with given fields: _a0, _a1, _a2
func (_m *CloudWatchLogsAPI) GetLogAnomalyDetectorWithContext(_a0 context.Context, _a1 *cloudwatchlogs.GetLogAnomalyDetectorInput, _a2 ...request.Option) (*cloudwatchlogs.GetLogAnomalyDetectorOutput, error) {
	_va := make([]interface{}, len(_a2))
	for _i := range _a2 {
		_va[_i] = _a2[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, _a0, _a1)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	var r0 *cloudwatchlogs.GetLogAnomalyDetectorOutput
	if rf, ok := ret.Get(0).(func(context.Context, *cloudwatchlogs.GetLogAnomalyDetectorInput, ...request.Option) *cloudwatchlogs.GetLogAnomalyDetectorOutput); ok {
		r0 = rf(_a0, _a1, _a2...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*cloudwatchlogs.GetLogAnomalyDetectorOutput)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, *cloudwatchlogs.GetLogAnomalyDetectorInput, ...request.Option) error); ok {
		r1 = rf(_a0, _a1, _a2...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetLogEvents provides a mock function with given fields: _a0
func (_m *CloudWatchLogsAPI) GetLogEvents(_a0 *cloudwatchlogs.GetLogEventsInput) (*cloudwatchlogs.GetLogEventsOutput, error) {
	ret := _m.Called(_a0)

	var r0 *cloudwatchlogs.GetLogEventsOutput
	if rf, ok := ret.Get(0).(func(*cloudwatchlogs.GetLogEventsInput) *cloudwatchlogs.GetLogEventsOutput); ok {
		r0 = rf(_a0)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*cloudwatchlogs.GetLogEventsOutput)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(*cloudwatchlogs.GetLogEventsInput) error); ok {
		r1 = rf(_a0)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetLogEventsPages provides a mock function with given fields: _a0, _a1
func (_m *CloudWatchLogsAPI) GetLogEventsPages(_a0 *cloudwatchlogs.GetLogEventsInput, _a1 func(*cloudwatchlogs.GetLogEventsOutput, bool) bool) error {
	ret := _m.Called(_a0, _a1)

	var r0 error
	if rf, ok := ret.Get(0).(func(*cloudwatchlogs.GetLogEventsInput, func(*cloudwatchlogs.GetLogEventsOutput, bool) bool) error); ok {
		r0 = rf(_a0, _a1)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// GetLogEventsPagesWithContext provides a mock function with given fields: _a0, _a1, _a2, _a3
func (_m *CloudWatchLogsAPI) GetLogEventsPagesWithContext(_a0 context.Context, _a1 *cloudwatchlogs.GetLogEventsInput, _a2 func(*cloudwatchlogs.GetLogEventsOutput, bool) bool, _a3 ...request.Option) error {
	_va := make([]interface{}, len(_a3))
	for _i := range _a3 {
		_va[_i] = _a3[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, _a0, _a1, _a2)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, *cloudwatchlogs.GetLogEventsInput, func(*cloudwatchlogs.GetLogEventsOutput, bool) bool, ...request.Option) error); ok {
		r0 = rf(_a0, _a1, _a2, _a3...)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// GetLogEventsRequest provides a mock function with given fields: _a0
func (_m *CloudWatchLogsAPI) GetLogEventsRequest(_a0 *cloudwatchlogs.GetLogEventsInput) (*request.Request, *cloudwatchlogs.GetLogEventsOutput) {
	ret := _m.Called(_a0)

	var r0 *request.Request
	if rf, ok := ret.Get(0).(func(*cloudwatchlogs.GetLogEventsInput) *request.Request); ok {
		r0 = rf(_a0)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*request.Request)
		}
	}

	var r1 *cloudwatchlogs.GetLogEventsOutput
	if rf, ok := ret.Get(1).(func(*cloudwatchlogs.GetLogEventsInput) *cloudwatchlogs.GetLogEventsOutput); ok {
		r1 = rf(_a0)
	} else {
		if ret.Get(1) != nil {
			r1 = ret.Get(1).(*cloudwatchlogs.GetLogEventsOutput)
		}
	}

	return r0, r1
}

// GetLogEventsWithContext provides a mock function with given fields: _a0, _a1, _a2
func (_m *CloudWatchLogsAPI) GetLogEventsWithContext(_a0 context.Context, _a1 *cloudwatchlogs.GetLogEventsInput, _a2 ...request.Option) (*cloudwatchlogs.GetLogEventsOutput, error) {
	_va := make([]interface{}, len(_a2))
	for _i := range _a2 {
		_va[_i] = _a2[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, _a0, _a1)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	var r0 *cloudwatchlogs.GetLogEventsOutput
	if rf, ok := ret.Get(0).(func(context.Context, *cloudwatchlogs.GetLogEventsInput, ...request.Option) *cloudwatchlogs.GetLogEventsOutput); ok {
		r0 = rf(_a0, _a1, _a2...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*cloudwatchlogs.GetLogEventsOutput)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, *cloudwatchlogs.GetLogEventsInput, ...request.Option) error); ok {
		r1 = rf(_a0, _a1, _a2...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetLogGroupFields provides a mock function with given fields: _a0
func (_m *CloudWatchLogsAPI) GetLogGroupFields(_a0 *cloudwatchlogs.GetLogGroupFieldsInput) (*cloudwatchlogs.GetLogGroupFieldsOutput, error) {
	ret := _m.Called(_a0)

	var r0 *cloudwatchlogs.GetLogGroupFieldsOutput
	if rf, ok := ret.Get(0).(func(*cloudwatchlogs.GetLogGroupFieldsInput) *cloudwatchlogs.GetLogGroupFieldsOutput); ok {
		r0 = rf(_a0)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*cloudwatchlogs.GetLogGroupFieldsOutput)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(*cloudwatchlogs.GetLogGroupFieldsInput) error); ok {
		r1 = rf(_a0)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetLogGroupFieldsRequest provides a mock function with given fields: _a0
func (_m *CloudWatchLogsAPI) GetLogGroupFieldsRequest(_a0 *cloudwatchlogs.GetLogGroupFieldsInput) (*request.Request, *cloudwatchlogs.GetLogGroupFieldsOutput) {
	ret := _m.Called(_a0)

	var r0 *request.Request
	if rf, ok := ret.Get(0).(func(*cloudwatchlogs.GetLogGroupFieldsInput) *request.Request); ok {
		r0 = rf(_a0)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*request.Request)
		}
	}

	var r1 *cloudwatchlogs.GetLogGroupFieldsOutput
	if rf, ok := ret.Get(1).(func(*cloudwatchlogs.GetLogGroupFieldsInput) *cloudwatchlogs.GetLogGroupFieldsOutput); ok {
		r1 = rf(_a0)
	} else {
		if ret.Get(1) != nil {
			r1 = ret.Get(1).(*cloudwatchlogs.GetLogGroupFieldsOutput)
		}
	}

	return r0, r1
}

// GetLogGroupFieldsWithContext provides a mock function with given fields: _a0, _a1, _a2
func (_m *CloudWatchLogsAPI) GetLogGroupFieldsWithContext(_a0 context.Context, _a1 *cloudwatchlogs.GetLogGroupFieldsInput, _a2 ...request.Option) (*cloudwatchlogs.GetLogGroupFieldsOutput, error) {
	_va := make([]interface{}, len(_a2))
	for _i := range _a2 {
		_va[_i] = _a2[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, _a0, _a1)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	var r0 *cloudwatchlogs.GetLogGroupFieldsOutput
	if rf, ok := ret.Get(0).(func(context.Context, *cloudwatchlogs.GetLogGroupFieldsInput, ...request.Option) *cloudwatchlogs.GetLogGroupFieldsOutput); ok {
		r0 = rf(_a0, _a1, _a2...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*cloudwatchlogs.GetLogGroupFieldsOutput)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, *cloudwatchlogs.GetLogGroupFieldsInput, ...request.Option) error); ok {
		r1 = rf(_a0, _a1, _a2...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetLogRecord provides a mock function with given fields: _a0
func (_m *CloudWatchLogsAPI) GetLogRecord(_a0 *cloudwatchlogs.GetLogRecordInput) (*cloudwatchlogs.GetLogRecordOutput, error) {
	ret := _m.Called(_a0)

	var r0 *cloudwatchlogs.GetLogRecordOutput
	if rf, ok := ret.Get(0).(func(*cloudwatchlogs.GetLogRecordInput) *cloudwatchlogs.GetLogRecordOutput); ok {
		r0 = rf(_a0)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*cloudwatchlogs.GetLogRecordOutput)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(*cloudwatchlogs.GetLogRecordInput) error); ok {
		r1 = rf(_a0)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetLogRecordRequest provides a mock function with given fields: _a0
func (_m *CloudWatchLogsAPI) GetLogRecordRequest(_a0 *cloudwatchlogs.GetLogRecordInput) (*request.Request, *cloudwatchlogs.GetLogRecordOutput) {
	ret := _m.Called(_a0)

	var r0 *request.Request
	if rf, ok := ret.Get(0).(func(*cloudwatchlogs.GetLogRecordInput) *request.Request); ok {
		r0 = rf(_a0)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*request.Request)
		}
	}

	var r1 *cloudwatchlogs.GetLogRecordOutput
	if rf, ok := ret.Get(1).(func(*cloudwatchlogs.GetLogRecordInput) *cloudwatchlogs.GetLogRecordOutput); ok {
		r1 = rf(_a0)
	} else {
		if ret.Get(1) != nil {
			r1 = ret.Get(1).(*cloudwatchlogs.GetLogRecordOutput)
		}
	}

	return r0, r1
}

// GetLogRecordWithContext provides a mock function with given fields: _a0, _a1, _a2
func (_m *CloudWatchLogsAPI) GetLogRecordWithContext(_a0 context.Context, _a1 *cloudwatchlogs.GetLogRecordInput, _a2 ...request.Option) (*cloudwatchlogs.GetLogRecordOutput, error) {
	_va := make([]interface{}, len(_a2))
	for _i := range _a2 {
		_va[_i] = _a2[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, _a0, _a1)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	var r0 *cloudwatchlogs.GetLogRecordOutput
	if rf, ok := ret.Get(0).(func(context.Context, *cloudwatchlogs.GetLogRecordInput, ...request.Option) *cloudwatchlogs.GetLogRecordOutput); ok {
		r0 = rf(_a0, _a1, _a2...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*cloudwatchlogs.GetLogRecordOutput)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, *cloudwatchlogs.GetLogRecordInput, ...request.Option) error); ok {
		r1 = rf(_a0, _a1, _a2...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetQueryResults provides a mock function with given fields: _a0
func (_m *CloudWatchLogsAPI) GetQueryResults(_a0 *cloudwatchlogs.GetQueryResultsInput) (*cloudwatchlogs.GetQueryResultsOutput, error) {
	ret := _m.Called(_a0)

	var r0 *cloudwatchlogs.GetQueryResultsOutput
	if rf, ok := ret.Get(0).(func(*cloudwatchlogs.GetQueryResultsInput) *cloudwatchlogs.GetQueryResultsOutput); ok {
		r0 = rf(_a0)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*cloudwatchlogs.GetQueryResultsOutput)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(*cloudwatchlogs.GetQueryResultsInput) error); ok {
		r1 = rf(_a0)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetQueryResultsRequest provides a mock function with given fields: _a0
func (_m *CloudWatchLogsAPI) GetQueryResultsRequest(_a0 *cloudwatchlogs.GetQueryResultsInput) (*request.Request, *cloudwatchlogs.GetQueryResultsOutput) {
	ret := _m.Called(_a0)

	var r0 *request.Request
	if rf, ok := ret.Get(0).(func(*cloudwatchlogs.GetQueryResultsInput) *request.Request); ok {
		r0 = rf(_a0)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*request.Request)
		}
	}

	var r1 *cloudwatchlogs.GetQueryResultsOutput
	if rf, ok := ret.Get(1).(func(*cloudwatchlogs.GetQueryResultsInput) *cloudwatchlogs.GetQueryResultsOutput); ok {
		r1 = rf(_a0)
	} else {
		if ret.Get(1) != nil {
			r1 = ret.Get(1).(*cloudwatchlogs.GetQueryResultsOutput)
		}
	}

	return r0, r1
}

// GetQueryResultsWithContext provides a mock function with given fields: _a0, _a1, _a2
func (_m *CloudWatchLogsAPI) GetQueryResultsWithContext(_a0 context.Context, _a1 *cloudwatchlogs.GetQueryResultsInput, _a2 ...request.Option) (*cloudwatchlogs.GetQueryResultsOutput, error) {
	_va := make([]interface{}, len(_a2))
	for _i := range _a2 {
		_va[_i] = _a2[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, _a0, _a1)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	var r0 *cloudwatchlogs.GetQueryResultsOutput
	if rf, ok := ret.Get(0).(func(context.Context, *cloudwatchlogs.GetQueryResultsInput, ...request.Option) *cloudwatchlogs.GetQueryResultsOutput); ok {
		r0 = rf(_a0, _a1, _a2...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*cloudwatchlogs.GetQueryResultsOutput)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, *cloudwatchlogs.GetQueryResultsInput, ...request.Option) error); ok {
		r1 = rf(_a0, _a1, _a2...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// ListAnomalies provides a mock function with given fields: _a0
func (_m *CloudWatchLogsAPI) ListAnomalies(_a0 *cloudwatchlogs.ListAnomaliesInput) (*cloudwatchlogs.ListAnomaliesOutput, error) {
	ret := _m.Called(_a0)

	var r0 *cloudwatchlogs.ListAnomaliesOutput
	if rf, ok := ret.Get(0).(func(*cloudwatchlogs.ListAnomaliesInput) *cloudwatchlogs.ListAnomaliesOutput); ok {
		r0 = rf(_a0)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*cloudwatchlogs.ListAnomaliesOutput)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(*cloudwatchlogs.ListAnomaliesInput) error); ok {
		r1 = rf(_a0)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// ListAnomaliesPages provides a mock function with given fields: _a0, _a1
func (_m *CloudWatchLogsAPI) ListAnomaliesPages(_a0 *cloudwatchlogs.ListAnomaliesInput, _a1 func(*cloudwatchlogs.ListAnomaliesOutput, bool) bool) error {
	ret := _m.Called(_a0, _a1)

	var r0 error
	if rf, ok := ret.Get(0).(func(*cloudwatchlogs.ListAnomaliesInput, func(*cloudwatchlogs.ListAnomaliesOutput, bool) bool) error); ok {
		r0 = rf(_a0, _a1)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// ListAnomaliesPagesWithContext provides a mock function with given fields: _a0, _a1, _a2, _a3
func (_m *CloudWatchLogsAPI) ListAnomaliesPagesWithContext(_a0 context.Context, _a1 *cloudwatchlogs.ListAnomaliesInput, _a2 func(*cloudwatchlogs.ListAnomaliesOutput, bool) bool, _a3 ...request.Option) error {
	_va := make([]interface{}, len(_a3))
	for _i := range _a3 {
		_va[_i] = _a3[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, _a0, _a1, _a2)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, *cloudwatchlogs.ListAnomaliesInput, func(*cloudwatchlogs.ListAnomaliesOutput, bool) bool, ...request.Option) error); ok {
		r0 = rf(_a0, _a1, _a2, _a3...)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// ListAnomaliesRequest provides a mock function with given fields: _a0
func (_m *CloudWatchLogsAPI) ListAnomaliesRequest(_a0 *cloudwatchlogs.ListAnomaliesInput) (*request.Request, *cloudwatchlogs.ListAnomaliesOutput) {
	ret := _m.Called(_a0)

	var r0 *request.Request
	if rf, ok := ret.Get(0).(func(*cloudwatchlogs.ListAnomaliesInput) *request.Request); ok {
		r0 = rf(_a0)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*request.Request)
		}
	}

	var r1 *cloudwatchlogs.ListAnomaliesOutput
	if rf, ok := ret.Get(1).(func(*cloudwatchlogs.ListAnomaliesInput) *cloudwatchlogs.ListAnomaliesOutput); ok {
		r1 = rf(_a0)
	} else {
		if ret.Get(1) != nil {
			r1 = ret.Get(1).(*cloudwatchlogs.ListAnomaliesOutput)
		}
	}

	return r0, r1
}

// ListAnomaliesWithContext provides a mock function with given fields: _a0, _a1, _a2
func (_m *CloudWatchLogsAPI) ListAnomaliesWithContext(_a0 context.Context, _a1 *cloudwatchlogs.ListAnomaliesInput, _a2 ...request.Option) (*cloudwatchlogs.ListAnomaliesOutput, error) {
	_va := make([]interface{}, len(_a2))
	for _i := range _a2 {
		_va[_i] = _a2[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, _a0, _a1)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	var r0 *cloudwatchlogs.ListAnomaliesOutput
	if rf, ok := ret.Get(0).(func(context.Context, *cloudwatchlogs.ListAnomaliesInput, ...request.Option) *cloudwatchlogs.ListAnomaliesOutput); ok {
		r0 = rf(_a0, _a1, _a2...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*cloudwatchlogs.ListAnomaliesOutput)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, *cloudwatchlogs.ListAnomaliesInput, ...request.Option) error); ok {
		r1 = rf(_a0, _a1, _a2...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// ListLogAnomalyDetectors provides a mock function with given fields: _a0
func (_m *CloudWatchLogsAPI) ListLogAnomalyDetectors(_a0 *cloudwatchlogs.ListLogAnomalyDetectorsInput) (*cloudwatchlogs.ListLogAnomalyDetectorsOutput, error) {
	ret := _m.Called(_a0)

	var r0 *cloudwatchlogs.ListLogAnomalyDetectorsOutput
	if rf, ok := ret.Get(0).(func(*cloudwatchlogs.ListLogAnomalyDetectorsInput) *cloudwatchlogs.ListLogAnomalyDetectorsOutput); ok {
		r0 = rf(_a0)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*cloudwatchlogs.ListLogAnomalyDetectorsOutput)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(*cloudwatchlogs.ListLogAnomalyDetectorsInput) error); ok {
		r1 = rf(_a0)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// ListLogAnomalyDetectorsPages provides a mock function with given fields: _a0, _a1
func (_m *CloudWatchLogsAPI) ListLogAnomalyDetectorsPages(_a0 *cloudwatchlogs.ListLogAnomalyDetectorsInput, _a1 func(*cloudwatchlogs.ListLogAnomalyDetectorsOutput, bool) bool) error {
	ret := _m.Called(_a0, _a1)

	var r0 error
	if rf, ok := ret.Get(0).(func(*cloudwatchlogs.ListLogAnomalyDetectorsInput, func(*cloudwatchlogs.ListLogAnomalyDetectorsOutput, bool) bool) error); ok {
		r0 = rf(_a0, _a1)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// ListLogAnomalyDetectorsPagesWithContext provides a mock function with given fields: _a0, _a1, _a2, _a3
func (_m *CloudWatchLogsAPI) ListLogAnomalyDetectorsPagesWithContext(_a0 context.Context, _a1 *cloudwatchlogs.ListLogAnomalyDetectorsInput, _a2 func(*cloudwatchlogs.ListLogAnomalyDetectorsOutput, bool) bool, _a3 ...request.Option) error {
	_va := make([]interface{}, len(_a3))
	for _i := range _a3 {
		_va[_i] = _a3[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, _a0, _a1, _a2)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, *cloudwatchlogs.ListLogAnomalyDetectorsInput, func(*cloudwatchlogs.ListLogAnomalyDetectorsOutput, bool) bool, ...request.Option) error); ok {
		r0 = rf(_a0, _a1, _a2, _a3...)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// ListLogAnomalyDetectorsRequest provides a mock function with given fields: _a0
func (_m *CloudWatchLogsAPI) ListLogAnomalyDetectorsRequest(_a0 *cloudwatchlogs.ListLogAnomalyDetectorsInput) (*request.Request, *cloudwatchlogs.ListLogAnomalyDetectorsOutput) {
	ret := _m.Called(_a0)

	var r0 *request.Request
	if rf, ok := ret.Get(0).(func(*cloudwatchlogs.ListLogAnomalyDetectorsInput) *request.Request); ok {
		r0 = rf(_a0)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*request.Request)
		}
	}

	var r1 *cloudwatchlogs.ListLogAnomalyDetectorsOutput
	if rf, ok := ret.Get(1).(func(*cloudwatchlogs.ListLogAnomalyDetectorsInput) *cloudwatchlogs.ListLogAnomalyDetectorsOutput); ok {
		r1 = rf(_a0)
	} else {
		if ret.Get(1) != nil {
			r1 = ret.Get(1).(*cloudwatchlogs.ListLogAnomalyDetectorsOutput)
		}
	}

	return r0, r1
}

// ListLogAnomalyDetectorsWithContext provides a mock function with given fields: _a0, _a1, _a2
func (_m *CloudWatchLogsAPI) ListLogAnomalyDetectorsWithContext(_a0 context.Context, _a1 *cloudwatchlogs.ListLogAnomalyDetectorsInput, _a2 ...request.Option) (*cloudwatchlogs.ListLogAnomalyDetectorsOutput, error) {
	_va := make([]interface{}, len(_a2))
	for _i := range _a2 {
		_va[_i] = _a2[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, _a0, _a1)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	var r0 *cloudwatchlogs.ListLogAnomalyDetectorsOutput
	if rf, ok := ret.Get(0).(func(context.Context, *cloudwatchlogs.ListLogAnomalyDetectorsInput, ...request.Option) *cloudwatchlogs.ListLogAnomalyDetectorsOutput); ok {
		r0 = rf(_a0, _a1, _a2...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*cloudwatchlogs.ListLogAnomalyDetectorsOutput)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, *cloudwatchlogs.ListLogAnomalyDetectorsInput, ...request.Option) error); ok {
		r1 = rf(_a0, _a1, _a2...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// ListTagsForResource provides a mock function with given fields: _a0
func (_m *CloudWatchLogsAPI) ListTagsForResource(_a0 *cloudwatchlogs.ListTagsForResourceInput) (*cloudwatchlogs.ListTagsForResourceOutput, error) {
	ret := _m.Called(_a0)

	var r0 *cloudwatchlogs.ListTagsForResourceOutput
	if rf, ok := ret.Get(0).(func(*cloudwatchlogs.ListTagsForResourceInput) *cloudwatchlogs.ListTagsForResourceOutput); ok {
		r0 = rf(_a0)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*cloudwatchlogs.ListTagsForResourceOutput)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(*cloudwatchlogs.ListTagsForResourceInput) error); ok {
		r1 = rf(_a0)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// ListTagsForResourceRequest provides a mock function with given fields: _a0
func (_m *CloudWatchLogsAPI) ListTagsForResourceRequest(_a0 *cloudwatchlogs.ListTagsForResourceInput) (*request.Request, *cloudwatchlogs.ListTagsForResourceOutput) {
	ret := _m.Called(_a0)

	var r0 *request.Request
	if rf, ok := ret.Get(0).(func(*cloudwatchlogs.ListTagsForResourceInput) *request.Request); ok {
		r0 = rf(_a0)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*request.Request)
		}
	}

	var r1 *cloudwatchlogs.ListTagsForResourceOutput
	if rf, ok := ret.Get(1).(func(*cloudwatchlogs.ListTagsForResourceInput) *cloudwatchlogs.ListTagsForResourceOutput); ok {
		r1 = rf(_a0)
	} else {
		if ret.Get(1) != nil {
			r1 = ret.Get(1).(*cloudwatchlogs.ListTagsForResourceOutput)
		}
	}

	return r0, r1
}

// ListTagsForResourceWithContext provides a mock function with given fields: _a0, _a1, _a2
func (_m *CloudWatchLogsAPI) ListTagsForResourceWithContext(_a0 context.Context, _a1 *cloudwatchlogs.ListTagsForResourceInput, _a2 ...request.Option) (*cloudwatchlogs.ListTagsForResourceOutput, error) {
	_va := make([]interface{}, len(_a2))
	for _i := range _a2 {
		_va[_i] = _a2[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, _a0, _a1)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	var r0 *cloudwatchlogs.ListTagsForResourceOutput
	if rf, ok := ret.Get(0).(func(context.Context, *cloudwatchlogs.ListTagsForResourceInput, ...request.Option) *cloudwatchlogs.ListTagsForResourceOutput); ok {
		r0 = rf(_a0, _a1, _a2...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*cloudwatchlogs.ListTagsForResourceOutput)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, *cloudwatchlogs.ListTagsForResourceInput, ...request.Option) error); ok {
		r1 = rf(_a0, _a1, _a2...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// ListTagsLogGroup provides a mock function with given fields: _a0
func (_m *CloudWatchLogsAPI) ListTagsLogGroup(_a0 *cloudwatchlogs.ListTagsLogGroupInput) (*cloudwatchlogs.ListTagsLogGroupOutput, error) {
	ret := _m.Called(_a0)

	var r0 *cloudwatchlogs.ListTagsLogGroupOutput
	if rf, ok := ret.Get(0).(func(*cloudwatchlogs.ListTagsLogGroupInput) *cloudwatchlogs.ListTagsLogGroupOutput); ok {
		r0 = rf(_a0)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*cloudwatchlogs.ListTagsLogGroupOutput)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(*cloudwatchlogs.ListTagsLogGroupInput) error); ok {
		r1 = rf(_a0)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// ListTagsLogGroupRequest provides a mock function with given fields: _a0
func (_m *CloudWatchLogsAPI) ListTagsLogGroupRequest(_a0 *cloudwatchlogs.ListTagsLogGroupInput) (*request.Request, *cloudwatchlogs.ListTagsLogGroupOutput) {
	ret := _m.Called(_a0)

	var r0 *request.Request
	if rf, ok := ret.Get(0).(func(*cloudwatchlogs.ListTagsLogGroupInput) *request.Request); ok {
		r0 = rf(_a0)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*request.Request)
		}
	}

	var r1 *cloudwatchlogs.ListTagsLogGroupOutput
	if rf, ok := ret.Get(1).(func(*cloudwatchlogs.ListTagsLogGroupInput) *cloudwatchlogs.ListTagsLogGroupOutput); ok {
		r1 = rf(_a0)
	} else {
		if ret.Get(1) != nil {
			r1 = ret.Get(1).(*cloudwatchlogs.ListTagsLogGroupOutput)
		}
	}

	return r0, r1
}

// ListTagsLogGroupWithContext provides a mock function with given fields: _a0, _a1, _a2
func (_m *CloudWatchLogsAPI) ListTagsLogGroupWithContext(_a0 context.Context, _a1 *cloudwatchlogs.ListTagsLogGroupInput, _a2 ...request.Option) (*cloudwatchlogs.ListTagsLogGroupOutput, error) {
	_va := make([]interface{}, len(_a2))
	for _i := range _a2 {
		_va[_i] = _a2[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, _a0, _a1)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	var r0 *cloudwatchlogs.ListTagsLogGroupOutput
	if rf, ok := ret.Get(0).(func(context.Context, *cloudwatchlogs.ListTagsLogGroupInput, ...request.Option) *cloudwatchlogs.ListTagsLogGroupOutput); ok {
		r0 = rf(_a0, _a1, _a2...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*cloudwatchlogs.ListTagsLogGroupOutput)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, *cloudwatchlogs.ListTagsLogGroupInput, ...request.Option) error); ok {
		r1 = rf(_a0, _a1, _a2...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// PutAccountPolicy provides a mock function with given fields: _a0
func (_m *CloudWatchLogsAPI) PutAccountPolicy(_a0 *cloudwatchlogs.PutAccountPolicyInput) (*cloudwatchlogs.PutAccountPolicyOutput, error) {
	ret := _m.Called(_a0)

	var r0 *cloudwatchlogs.PutAccountPolicyOutput
	if rf, ok := ret.Get(0).(func(*cloudwatchlogs.PutAccountPolicyInput) *cloudwatchlogs.PutAccountPolicyOutput); ok {
		r0 = rf(_a0)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*cloudwatchlogs.PutAccountPolicyOutput)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(*cloudwatchlogs.PutAccountPolicyInput) error); ok {
		r1 = rf(_a0)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// PutAccountPolicyRequest provides a mock function with given fields: _a0
func (_m *CloudWatchLogsAPI) PutAccountPolicyRequest(_a0 *cloudwatchlogs.PutAccountPolicyInput) (*request.Request, *cloudwatchlogs.PutAccountPolicyOutput) {
	ret := _m.Called(_a0)

	var r0 *request.Request
	if rf, ok := ret.Get(0).(func(*cloudwatchlogs.PutAccountPolicyInput) *request.Request); ok {
		r0 = rf(_a0)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*request.Request)
		}
	}

	var r1 *cloudwatchlogs.PutAccountPolicyOutput
	if rf, ok := ret.Get(1).(func(*cloudwatchlogs.PutAccountPolicyInput) *cloudwatchlogs.PutAccountPolicyOutput); ok {
		r1 = rf(_a0)
	} else {
		if ret.Get(1) != nil {
			r1 = ret.Get(1).(*cloudwatchlogs.PutAccountPolicyOutput)
		}
	}

	return r0, r1
}

// PutAccountPolicyWithContext provides a mock function with given fields: _a0, _a1, _a2
func (_m *CloudWatchLogsAPI) PutAccountPolicyWithContext(_a0 context.Context, _a1 *cloudwatchlogs.PutAccountPolicyInput, _a2 ...request.Option) (*cloudwatchlogs.PutAccountPolicyOutput, error) {
	_va := make([]interface{}, len(_a2))
	for _i := range _a2 {
		_va[_i] = _a2[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, _a0, _a1)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	var r0 *cloudwatchlogs.PutAccountPolicyOutput
	if rf, ok := ret.Get(0).(func(context.Context, *cloudwatchlogs.PutAccountPolicyInput, ...request.Option) *cloudwatchlogs.PutAccountPolicyOutput); ok {
		r0 = rf(_a0, _a1, _a2...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*cloudwatchlogs.PutAccountPolicyOutput)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, *cloudwatchlogs.PutAccountPolicyInput, ...request.Option) error); ok {
		r1 = rf(_a0, _a1, _a2...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// PutDataProtectionPolicy provides a mock function with given fields: _a0
func (_m *CloudWatchLogsAPI) PutDataProtectionPolicy(_a0 *cloudwatchlogs.PutDataProtectionPolicyInput) (*cloudwatchlogs.PutDataProtectionPolicyOutput, error) {
	ret := _m.Called(_a0)

	var r0 *cloudwatchlogs.PutDataProtectionPolicyOutput
	if rf, ok := ret.Get(0).(func(*cloudwatchlogs.PutDataProtectionPolicyInput) *cloudwatchlogs.PutDataProtectionPolicyOutput); ok {
		r0 = rf(_a0)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*cloudwatchlogs.PutDataProtectionPolicyOutput)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(*cloudwatchlogs.PutDataProtectionPolicyInput) error); ok {
		r1 = rf(_a0)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// PutDataProtectionPolicyRequest provides a mock function with given fields: _a0
func (_m *CloudWatchLogsAPI) PutDataProtectionPolicyRequest(_a0 *cloudwatchlogs.PutDataProtectionPolicyInput) (*request.Request, *cloudwatchlogs.PutDataProtectionPolicyOutput) {
	ret := _m.Called(_a0)

	var r0 *request.Request
	if rf, ok := ret.Get(0).(func(*cloudwatchlogs.PutDataProtectionPolicyInput) *request.Request); ok {
		r0 = rf(_a0)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*request.Request)
		}
	}

	var r1 *cloudwatchlogs.PutDataProtectionPolicyOutput
	if rf, ok := ret.Get(1).(func(*cloudwatchlogs.PutDataProtectionPolicyInput) *cloudwatchlogs.PutDataProtectionPolicyOutput); ok {
		r1 = rf(_a0)
	} else {
		if ret.Get(1) != nil {
			r1 = ret.Get(1).(*cloudwatchlogs.PutDataProtectionPolicyOutput)
		}
	}

	return r0, r1
}

// PutDataProtectionPolicyWithContext provides a mock function with given fields: _a0, _a1, _a2
func (_m *CloudWatchLogsAPI) PutDataProtectionPolicyWithContext(_a0 context.Context, _a1 *cloudwatchlogs.PutDataProtectionPolicyInput, _a2 ...request.Option) (*cloudwatchlogs.PutDataProtectionPolicyOutput, error) {
	_va := make([]interface{}, len(_a2))
	for _i := range _a2 {
		_va[_i] = _a2[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, _a0, _a1)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	var r0 *cloudwatchlogs.PutDataProtectionPolicyOutput
	if rf, ok := ret.Get(0).(func(context.Context, *cloudwatchlogs.PutDataProtectionPolicyInput, ...request.Option) *cloudwatchlogs.PutDataProtectionPolicyOutput); ok {
		r0 = rf(_a0, _a1, _a2...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*cloudwatchlogs.PutDataProtectionPolicyOutput)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, *cloudwatchlogs.PutDataProtectionPolicyInput, ...request.Option) error); ok {
		r1 = rf(_a0, _a1, _a2...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// PutDeliveryDestination provides a mock function with given fields: _a0
func (_m *CloudWatchLogsAPI) PutDeliveryDestination(_a0 *cloudwatchlogs.PutDeliveryDestinationInput) (*cloudwatchlogs.PutDeliveryDestinationOutput, error) {
	ret := _m.Called(_a0)

	var r0 *cloudwatchlogs.PutDeliveryDestinationOutput
	if rf, ok := ret.Get(0).(func(*cloudwatchlogs.PutDeliveryDestinationInput) *cloudwatchlogs.PutDeliveryDestinationOutput); ok {
		r0 = rf(_a0)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*cloudwatchlogs.PutDeliveryDestinationOutput)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(*cloudwatchlogs.PutDeliveryDestinationInput) error); ok {
		r1 = rf(_a0)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// PutDeliveryDestinationPolicy provides a mock function with given fields: _a0
func (_m *CloudWatchLogsAPI) PutDeliveryDestinationPolicy(_a0 *cloudwatchlogs.PutDeliveryDestinationPolicyInput) (*cloudwatchlogs.PutDeliveryDestinationPolicyOutput, error) {
	ret := _m.Called(_a0)

	var r0 *cloudwatchlogs.PutDeliveryDestinationPolicyOutput
	if rf, ok := ret.Get(0).(func(*cloudwatchlogs.PutDeliveryDestinationPolicyInput) *cloudwatchlogs.PutDeliveryDestinationPolicyOutput); ok {
		r0 = rf(_a0)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*cloudwatchlogs.PutDeliveryDestinationPolicyOutput)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(*cloudwatchlogs.PutDeliveryDestinationPolicyInput) error); ok {
		r1 = rf(_a0)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// PutDeliveryDestinationPolicyRequest provides a mock function with given fields: _a0
func (_m *CloudWatchLogsAPI) PutDeliveryDestinationPolicyRequest(_a0 *cloudwatchlogs.PutDeliveryDestinationPolicyInput) (*request.Request, *cloudwatchlogs.PutDeliveryDestinationPolicyOutput) {
	ret := _m.Called(_a0)

	var r0 *request.Request
	if rf, ok := ret.Get(0).(func(*cloudwatchlogs.PutDeliveryDestinationPolicyInput) *request.Request); ok {
		r0 = rf(_a0)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*request.Request)
		}
	}

	var r1 *cloudwatchlogs.PutDeliveryDestinationPolicyOutput
	if rf, ok := ret.Get(1).(func(*cloudwatchlogs.PutDeliveryDestinationPolicyInput) *cloudwatchlogs.PutDeliveryDestinationPolicyOutput); ok {
		r1 = rf(_a0)
	} else {
		if ret.Get(1) != nil {
			r1 = ret.Get(1).(*cloudwatchlogs.PutDeliveryDestinationPolicyOutput)
		}
	}

	return r0, r1
}

// PutDeliveryDestinationPolicyWithContext provides a mock function with given fields: _a0, _a1, _a2
func (_m *CloudWatchLogsAPI) PutDeliveryDestinationPolicyWithContext(_a0 context.Context, _a1 *cloudwatchlogs.PutDeliveryDestinationPolicyInput, _a2 ...request.Option) (*cloudwatchlogs.PutDeliveryDestinationPolicyOutput, error) {
	_va := make([]interface{}, len(_a2))
	for _i := range _a2 {
		_va[_i] = _a2[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, _a0, _a1)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	var r0 *cloudwatchlogs.PutDeliveryDestinationPolicyOutput
	if rf, ok := ret.Get(0).(func(context.Context, *cloudwatchlogs.PutDeliveryDestinationPolicyInput, ...request.Option) *cloudwatchlogs.PutDeliveryDestinationPolicyOutput); ok {
		r0 = rf(_a0, _a1, _a2...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*cloudwatchlogs.PutDeliveryDestinationPolicyOutput)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, *cloudwatchlogs.PutDeliveryDestinationPolicyInput, ...request.Option) error); ok {
		r1 = rf(_a0, _a1, _a2...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// PutDeliveryDestinationRequest provides a mock function with given fields: _a0
func (_m *CloudWatchLogsAPI) PutDeliveryDestinationRequest(_a0 *cloudwatchlogs.PutDeliveryDestinationInput) (*request.Request, *cloudwatchlogs.PutDeliveryDestinationOutput) {
	ret := _m.Called(_a0)

	var r0 *request.Request
	if rf, ok := ret.Get(0).(func(*cloudwatchlogs.PutDeliveryDestinationInput) *request.Request); ok {
		r0 = rf(_a0)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*request.Request)
		}
	}

	var r1 *cloudwatchlogs.PutDeliveryDestinationOutput
	if rf, ok := ret.Get(1).(func(*cloudwatchlogs.PutDeliveryDestinationInput) *cloudwatchlogs.PutDeliveryDestinationOutput); ok {
		r1 = rf(_a0)
	} else {
		if ret.Get(1) != nil {
			r1 = ret.Get(1).(*cloudwatchlogs.PutDeliveryDestinationOutput)
		}
	}

	return r0, r1
}

// PutDeliveryDestinationWithContext provides a mock function with given fields: _a0, _a1, _a2
func (_m *CloudWatchLogsAPI) PutDeliveryDestinationWithContext(_a0 context.Context, _a1 *cloudwatchlogs.PutDeliveryDestinationInput, _a2 ...request.Option) (*cloudwatchlogs.PutDeliveryDestinationOutput, error) {
	_va := make([]interface{}, len(_a2))
	for _i := range _a2 {
		_va[_i] = _a2[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, _a0, _a1)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	var r0 *cloudwatchlogs.PutDeliveryDestinationOutput
	if rf, ok := ret.Get(0).(func(context.Context, *cloudwatchlogs.PutDeliveryDestinationInput, ...request.Option) *cloudwatchlogs.PutDeliveryDestinationOutput); ok {
		r0 = rf(_a0, _a1, _a2...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*cloudwatchlogs.PutDeliveryDestinationOutput)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, *cloudwatchlogs.PutDeliveryDestinationInput, ...request.Option) error); ok {
		r1 = rf(_a0, _a1, _a2...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// PutDeliverySource provides a mock function with given fields: _a0
func (_m *CloudWatchLogsAPI) PutDeliverySource(_a0 *cloudwatchlogs.PutDeliverySourceInput) (*cloudwatchlogs.PutDeliverySourceOutput, error) {
	ret := _m.Called(_a0)

	var r0 *cloudwatchlogs.PutDeliverySourceOutput
	if rf, ok := ret.Get(0).(func(*cloudwatchlogs.PutDeliverySourceInput) *cloudwatchlogs.PutDeliverySourceOutput); ok {
		r0 = rf(_a0)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*cloudwatchlogs.PutDeliverySourceOutput)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(*cloudwatchlogs.PutDeliverySourceInput) error); ok {
		r1 = rf(_a0)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// PutDeliverySourceRequest provides a mock function with given fields: _a0
func (_m *CloudWatchLogsAPI) PutDeliverySourceRequest(_a0 *cloudwatchlogs.PutDeliverySourceInput) (*request.Request, *cloudwatchlogs.PutDeliverySourceOutput) {
	ret := _m.Called(_a0)

	var r0 *request.Request
	if rf, ok := ret.Get(0).(func(*cloudwatchlogs.PutDeliverySourceInput) *request.Request); ok {
		r0 = rf(_a0)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*request.Request)
		}
	}

	var r1 *cloudwatchlogs.PutDeliverySourceOutput
	if rf, ok := ret.Get(1).(func(*cloudwatchlogs.PutDeliverySourceInput) *cloudwatchlogs.PutDeliverySourceOutput); ok {
		r1 = rf(_a0)
	} else {
		if ret.Get(1) != nil {
			r1 = ret.Get(1).(*cloudwatchlogs.PutDeliverySourceOutput)
		}
	}

	return r0, r1
}

// PutDeliverySourceWithContext provides a mock function with given fields: _a0, _a1, _a2
func (_m *CloudWatchLogsAPI) PutDeliverySourceWithContext(_a0 context.Context, _a1 *cloudwatchlogs.PutDeliverySourceInput, _a2 ...request.Option) (*cloudwatchlogs.PutDeliverySourceOutput, error) {
	_va := make([]interface{}, len(_a2))
	for _i := range _a2 {
		_va[_i] = _a2[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, _a0, _a1)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	var r0 *cloudwatchlogs.PutDeliverySourceOutput
	if rf, ok := ret.Get(0).(func(context.Context, *cloudwatchlogs.PutDeliverySourceInput, ...request.Option) *cloudwatchlogs.PutDeliverySourceOutput); ok {
		r0 = rf(_a0, _a1, _a2...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*cloudwatchlogs.PutDeliverySourceOutput)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, *cloudwatchlogs.PutDeliverySourceInput, ...request.Option) error); ok {
		r1 = rf(_a0, _a1, _a2...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// PutDestination provides a mock function with given fields: _a0
func (_m *CloudWatchLogsAPI) PutDestination(_a0 *cloudwatchlogs.PutDestinationInput) (*cloudwatchlogs.PutDestinationOutput, error) {
	ret := _m.Called(_a0)

	var r0 *cloudwatchlogs.PutDestinationOutput
	if rf, ok := ret.Get(0).(func(*cloudwatchlogs.PutDestinationInput) *cloudwatchlogs.PutDestinationOutput); ok {
		r0 = rf(_a0)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*cloudwatchlogs.PutDestinationOutput)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(*cloudwatchlogs.PutDestinationInput) error); ok {
		r1 = rf(_a0)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// PutDestinationPolicy provides a mock function with given fields: _a0
func (_m *CloudWatchLogsAPI) PutDestinationPolicy(_a0 *cloudwatchlogs.PutDestinationPolicyInput) (*cloudwatchlogs.PutDestinationPolicyOutput, error) {
	ret := _m.Called(_a0)

	var r0 *cloudwatchlogs.PutDestinationPolicyOutput
	if rf, ok := ret.Get(0).(func(*cloudwatchlogs.PutDestinationPolicyInput) *cloudwatchlogs.PutDestinationPolicyOutput); ok {
		r0 = rf(_a0)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*cloudwatchlogs.PutDestinationPolicyOutput)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(*cloudwatchlogs.PutDestinationPolicyInput) error); ok {
		r1 = rf(_a0)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// PutDestinationPolicyRequest provides a mock function with given fields: _a0
func (_m *CloudWatchLogsAPI) PutDestinationPolicyRequest(_a0 *cloudwatchlogs.PutDestinationPolicyInput) (*request.Request, *cloudwatchlogs.PutDestinationPolicyOutput) {
	ret := _m.Called(_a0)

	var r0 *request.Request
	if rf, ok := ret.Get(0).(func(*cloudwatchlogs.PutDestinationPolicyInput) *request.Request); ok {
		r0 = rf(_a0)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*request.Request)
		}
	}

	var r1 *cloudwatchlogs.PutDestinationPolicyOutput
	if rf, ok := ret.Get(1).(func(*cloudwatchlogs.PutDestinationPolicyInput) *cloudwatchlogs.PutDestinationPolicyOutput); ok {
		r1 = rf(_a0)
	} else {
		if ret.Get(1) != nil {
			r1 = ret.Get(1).(*cloudwatchlogs.PutDestinationPolicyOutput)
		}
	}

	return r0, r1
}

// PutDestinationPolicyWithContext provides a mock function with given fields: _a0, _a1, _a2
func (_m *CloudWatchLogsAPI) PutDestinationPolicyWithContext(_a0 context.Context, _a1 *cloudwatchlogs.PutDestinationPolicyInput, _a2 ...request.Option) (*cloudwatchlogs.PutDestinationPolicyOutput, error) {
	_va := make([]interface{}, len(_a2))
	for _i := range _a2 {
		_va[_i] = _a2[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, _a0, _a1)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	var r0 *cloudwatchlogs.PutDestinationPolicyOutput
	if rf, ok := ret.Get(0).(func(context.Context, *cloudwatchlogs.PutDestinationPolicyInput, ...request.Option) *cloudwatchlogs.PutDestinationPolicyOutput); ok {
		r0 = rf(_a0, _a1, _a2...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*cloudwatchlogs.PutDestinationPolicyOutput)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, *cloudwatchlogs.PutDestinationPolicyInput, ...request.Option) error); ok {
		r1 = rf(_a0, _a1, _a2...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// PutDestinationRequest provides a mock function with given fields: _a0
func (_m *CloudWatchLogsAPI) PutDestinationRequest(_a0 *cloudwatchlogs.PutDestinationInput) (*request.Request, *cloudwatchlogs.PutDestinationOutput) {
	ret := _m.Called(_a0)

	var r0 *request.Request
	if rf, ok := ret.Get(0).(func(*cloudwatchlogs.PutDestinationInput) *request.Request); ok {
		r0 = rf(_a0)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*request.Request)
		}
	}

	var r1 *cloudwatchlogs.PutDestinationOutput
	if rf, ok := ret.Get(1).(func(*cloudwatchlogs.PutDestinationInput) *cloudwatchlogs.PutDestinationOutput); ok {
		r1 = rf(_a0)
	} else {
		if ret.Get(1) != nil {
			r1 = ret.Get(1).(*cloudwatchlogs.PutDestinationOutput)
		}
	}

	return r0, r1
}

// PutDestinationWithContext provides a mock function with given fields: _a0, _a1, _a2
func (_m *CloudWatchLogsAPI) PutDestinationWithContext(_a0 context.Context, _a1 *cloudwatchlogs.PutDestinationInput, _a2 ...request.Option) (*cloudwatchlogs.PutDestinationOutput, error) {
	_va := make([]interface{}, len(_a2))
	for _i := range _a2 {
		_va[_i] = _a2[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, _a0, _a1)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	var r0 *cloudwatchlogs.PutDestinationOutput
	if rf, ok := ret.Get(0).(func(context.Context, *cloudwatchlogs.PutDestinationInput, ...request.Option) *cloudwatchlogs.PutDestinationOutput); ok {
		r0 = rf(_a0, _a1, _a2...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*cloudwatchlogs.PutDestinationOutput)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, *cloudwatchlogs.PutDestinationInput, ...request.Option) error); ok {
		r1 = rf(_a0, _a1, _a2...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// PutLogEvents provides a mock function with given fields: _a0
func (_m *CloudWatchLogsAPI) PutLogEvents(_a0 *cloudwatchlogs.PutLogEventsInput) (*cloudwatchlogs.PutLogEventsOutput, error) {
	ret := _m.Called(_a0)

	var r0 *cloudwatchlogs.PutLogEventsOutput
	if rf, ok := ret.Get(0).(func(*cloudwatchlogs.PutLogEventsInput) *cloudwatchlogs.PutLogEventsOutput); ok {
		r0 = rf(_a0)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*cloudwatchlogs.PutLogEventsOutput)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(*cloudwatchlogs.PutLogEventsInput) error); ok {
		r1 = rf(_a0)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// PutLogEventsRequest provides a mock function with given fields: _a0
func (_m *CloudWatchLogsAPI) PutLogEventsRequest(_a0 *cloudwatchlogs.PutLogEventsInput) (*request.Request, *cloudwatchlogs.PutLogEventsOutput) {
	ret := _m.Called(_a0)

	var r0 *request.Request
	if rf, ok := ret.Get(0).(func(*cloudwatchlogs.PutLogEventsInput) *request.Request); ok {
		r0 = rf(_a0)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*request.Request)
		}
	}

	var r1 *cloudwatchlogs.PutLogEventsOutput
	if rf, ok := ret.Get(1).(func(*cloudwatchlogs.PutLogEventsInput) *cloudwatchlogs.PutLogEventsOutput); ok {
		r1 = rf(_a0)
	} else {
		if ret.Get(1) != nil {
			r1 = ret.Get(1).(*cloudwatchlogs.PutLogEventsOutput)
		}
	}

	return r0, r1
}

// PutLogEventsWithContext provides a mock function with given fields: _a0, _a1, _a2
func (_m *CloudWatchLogsAPI) PutLogEventsWithContext(_a0 context.Context, _a1 *cloudwatchlogs.PutLogEventsInput, _a2 ...request.Option) (*cloudwatchlogs.PutLogEventsOutput, error) {
	_va := make([]interface{}, len(_a2))
	for _i := range _a2 {
		_va[_i] = _a2[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, _a0, _a1)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	var r0 *cloudwatchlogs.PutLogEventsOutput
	if rf, ok := ret.Get(0).(func(context.Context, *cloudwatchlogs.PutLogEventsInput, ...request.Option) *cloudwatchlogs.PutLogEventsOutput); ok {
		r0 = rf(_a0, _a1, _a2...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*cloudwatchlogs.PutLogEventsOutput)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, *cloudwatchlogs.PutLogEventsInput, ...request.Option) error); ok {
		r1 = rf(_a0, _a1, _a2...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// PutMetricFilter provides a mock function with given fields: _a0
func (_m *CloudWatchLogsAPI) PutMetricFilter(_a0 *cloudwatchlogs.PutMetricFilterInput) (*cloudwatchlogs.PutMetricFilterOutput, error) {
	ret := _m.Called(_a0)

	var r0 *cloudwatchlogs.PutMetricFilterOutput
	if rf, ok := ret.Get(0).(func(*cloudwatchlogs.PutMetricFilterInput) *cloudwatchlogs.PutMetricFilterOutput); ok {
		r0 = rf(_a0)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*cloudwatchlogs.PutMetricFilterOutput)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(*cloudwatchlogs.PutMetricFilterInput) error); ok {
		r1 = rf(_a0)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// PutMetricFilterRequest provides a mock function with given fields: _a0
func (_m *CloudWatchLogsAPI) PutMetricFilterRequest(_a0 *cloudwatchlogs.PutMetricFilterInput) (*request.Request, *cloudwatchlogs.PutMetricFilterOutput) {
	ret := _m.Called(_a0)

	var r0 *request.Request
	if rf, ok := ret.Get(0).(func(*cloudwatchlogs.PutMetricFilterInput) *request.Request); ok {
		r0 = rf(_a0)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*request.Request)
		}
	}

	var r1 *cloudwatchlogs.PutMetricFilterOutput
	if rf, ok := ret.Get(1).(func(*cloudwatchlogs.PutMetricFilterInput) *cloudwatchlogs.PutMetricFilterOutput); ok {
		r1 = rf(_a0)
	} else {
		if ret.Get(1) != nil {
			r1 = ret.Get(1).(*cloudwatchlogs.PutMetricFilterOutput)
		}
	}

	return r0, r1
}

// PutMetricFilterWithContext provides a mock function with given fields: _a0, _a1, _a2
func (_m *CloudWatchLogsAPI) PutMetricFilterWithContext(_a0 context.Context, _a1 *cloudwatchlogs.PutMetricFilterInput, _a2 ...request.Option) (*cloudwatchlogs.PutMetricFilterOutput, error) {
	_va := make([]interface{}, len(_a2))
	for _i := range _a2 {
		_va[_i] = _a2[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, _a0, _a1)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	var r0 *cloudwatchlogs.PutMetricFilterOutput
	if rf, ok := ret.Get(0).(func(context.Context, *cloudwatchlogs.PutMetricFilterInput, ...request.Option) *cloudwatchlogs.PutMetricFilterOutput); ok {
		r0 = rf(_a0, _a1, _a2...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*cloudwatchlogs.PutMetricFilterOutput)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, *cloudwatchlogs.PutMetricFilterInput, ...request.Option) error); ok {
		r1 = rf(_a0, _a1, _a2...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// PutQueryDefinition provides a mock function with given fields: _a0
func (_m *CloudWatchLogsAPI) PutQueryDefinition(_a0 *cloudwatchlogs.PutQueryDefinitionInput) (*cloudwatchlogs.PutQueryDefinitionOutput, error) {
	ret := _m.Called(_a0)

	var r0 *cloudwatchlogs.PutQueryDefinitionOutput
	if rf, ok := ret.Get(0).(func(*cloudwatchlogs.PutQueryDefinitionInput) *cloudwatchlogs.PutQueryDefinitionOutput); ok {
		r0 = rf(_a0)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*cloudwatchlogs.PutQueryDefinitionOutput)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(*cloudwatchlogs.PutQueryDefinitionInput) error); ok {
		r1 = rf(_a0)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// PutQueryDefinitionRequest provides a mock function with given fields: _a0
func (_m *CloudWatchLogsAPI) PutQueryDefinitionRequest(_a0 *cloudwatchlogs.PutQueryDefinitionInput) (*request.Request, *cloudwatchlogs.PutQueryDefinitionOutput) {
	ret := _m.Called(_a0)

	var r0 *request.Request
	if rf, ok := ret.Get(0).(func(*cloudwatchlogs.PutQueryDefinitionInput) *request.Request); ok {
		r0 = rf(_a0)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*request.Request)
		}
	}

	var r1 *cloudwatchlogs.PutQueryDefinitionOutput
	if rf, ok := ret.Get(1).(func(*cloudwatchlogs.PutQueryDefinitionInput) *cloudwatchlogs.PutQueryDefinitionOutput); ok {
		r1 = rf(_a0)
	} else {
		if ret.Get(1) != nil {
			r1 = ret.Get(1).(*cloudwatchlogs.PutQueryDefinitionOutput)
		}
	}

	return r0, r1
}

// PutQueryDefinitionWithContext provides a mock function with given fields: _a0, _a1, _a2
func (_m *CloudWatchLogsAPI) PutQueryDefinitionWithContext(_a0 context.Context, _a1 *cloudwatchlogs.PutQueryDefinitionInput, _a2 ...request.Option) (*cloudwatchlogs.PutQueryDefinitionOutput, error) {
	_va := make([]interface{}, len(_a2))
	for _i := range _a2 {
		_va[_i] = _a2[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, _a0, _a1)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	var r0 *cloudwatchlogs.PutQueryDefinitionOutput
	if rf, ok := ret.Get(0).(func(context.Context, *cloudwatchlogs.PutQueryDefinitionInput, ...request.Option) *cloudwatchlogs.PutQueryDefinitionOutput); ok {
		r0 = rf(_a0, _a1, _a2...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*cloudwatchlogs.PutQueryDefinitionOutput)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, *cloudwatchlogs.PutQueryDefinitionInput, ...request.Option) error); ok {
		r1 = rf(_a0, _a1, _a2...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// PutResourcePolicy provides a mock function with given fields: _a0
func (_m *CloudWatchLogsAPI) PutResourcePolicy(_a0 *cloudwatchlogs.PutResourcePolicyInput) (*cloudwatchlogs.PutResourcePolicyOutput, error) {
	ret := _m.Called(_a0)

	var r0 *cloudwatchlogs.PutResourcePolicyOutput
	if rf, ok := ret.Get(0).(func(*cloudwatchlogs.PutResourcePolicyInput) *cloudwatchlogs.PutResourcePolicyOutput); ok {
		r0 = rf(_a0)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*cloudwatchlogs.PutResourcePolicyOutput)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(*cloudwatchlogs.PutResourcePolicyInput) error); ok {
		r1 = rf(_a0)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// PutResourcePolicyRequest provides a mock function with given fields: _a0
func (_m *CloudWatchLogsAPI) PutResourcePolicyRequest(_a0 *cloudwatchlogs.PutResourcePolicyInput) (*request.Request, *cloudwatchlogs.PutResourcePolicyOutput) {
	ret := _m.Called(_a0)

	var r0 *request.Request
	if rf, ok := ret.Get(0).(func(*cloudwatchlogs.PutResourcePolicyInput) *request.Request); ok {
		r0 = rf(_a0)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*request.Request)
		}
	}

	var r1 *cloudwatchlogs.PutResourcePolicyOutput
	if rf, ok := ret.Get(1).(func(*cloudwatchlogs.PutResourcePolicyInput) *cloudwatchlogs.PutResourcePolicyOutput); ok {
		r1 = rf(_a0)
	} else {
		if ret.Get(1) != nil {
			r1 = ret.Get(1).(*cloudwatchlogs.PutResourcePolicyOutput)
		}
	}

	return r0, r1
}

// PutResourcePolicyWithContext provides a mock function with given fields: _a0, _a1, _a2
func (_m *CloudWatchLogsAPI) PutResourcePolicyWithContext(_a0 context.Context, _a1 *cloudwatchlogs.PutResourcePolicyInput, _a2 ...request.Option) (*cloudwatchlogs.PutResourcePolicyOutput, error) {
	_va := make([]interface{}, len(_a2))
	for _i := range _a2 {
		_va[_i] = _a2[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, _a0, _a1)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	var r0 *cloudwatchlogs.PutResourcePolicyOutput
	if rf, ok := ret.Get(0).(func(context.Context, *cloudwatchlogs.PutResourcePolicyInput, ...request.Option) *cloudwatchlogs.PutResourcePolicyOutput); ok {
		r0 = rf(_a0, _a1, _a2...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*cloudwatchlogs.PutResourcePolicyOutput)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, *cloudwatchlogs.PutResourcePolicyInput, ...request.Option) error); ok {
		r1 = rf(_a0, _a1, _a2...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// PutRetentionPolicy provides a mock function with given fields: _a0
func (_m *CloudWatchLogsAPI) PutRetentionPolicy(_a0 *cloudwatchlogs.PutRetentionPolicyInput) (*cloudwatchlogs.PutRetentionPolicyOutput, error) {
	ret := _m.Called(_a0)

	var r0 *cloudwatchlogs.PutRetentionPolicyOutput
	if rf, ok := ret.Get(0).(func(*cloudwatchlogs.PutRetentionPolicyInput) *cloudwatchlogs.PutRetentionPolicyOutput); ok {
		r0 = rf(_a0)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*cloudwatchlogs.PutRetentionPolicyOutput)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(*cloudwatchlogs.PutRetentionPolicyInput) error); ok {
		r1 = rf(_a0)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// PutRetentionPolicyRequest provides a mock function with given fields: _a0
func (_m *CloudWatchLogsAPI) PutRetentionPolicyRequest(_a0 *cloudwatchlogs.PutRetentionPolicyInput) (*request.Request, *cloudwatchlogs.PutRetentionPolicyOutput) {
	ret := _m.Called(_a0)

	var r0 *request.Request
	if rf, ok := ret.Get(0).(func(*cloudwatchlogs.PutRetentionPolicyInput) *request.Request); ok {
		r0 = rf(_a0)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*request.Request)
		}
	}

	var r1 *cloudwatchlogs.PutRetentionPolicyOutput
	if rf, ok := ret.Get(1).(func(*cloudwatchlogs.PutRetentionPolicyInput) *cloudwatchlogs.PutRetentionPolicyOutput); ok {
		r1 = rf(_a0)
	} else {
		if ret.Get(1) != nil {
			r1 = ret.Get(1).(*cloudwatchlogs.PutRetentionPolicyOutput)
		}
	}

	return r0, r1
}

// PutRetentionPolicyWithContext provides a mock function with given fields: _a0, _a1, _a2
func (_m *CloudWatchLogsAPI) PutRetentionPolicyWithContext(_a0 context.Context, _a1 *cloudwatchlogs.PutRetentionPolicyInput, _a2 ...request.Option) (*cloudwatchlogs.PutRetentionPolicyOutput, error) {
	_va := make([]interface{}, len(_a2))
	for _i := range _a2 {
		_va[_i] = _a2[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, _a0, _a1)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	var r0 *cloudwatchlogs.PutRetentionPolicyOutput
	if rf, ok := ret.Get(0).(func(context.Context, *cloudwatchlogs.PutRetentionPolicyInput, ...request.Option) *cloudwatchlogs.PutRetentionPolicyOutput); ok {
		r0 = rf(_a0, _a1, _a2...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*cloudwatchlogs.PutRetentionPolicyOutput)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, *cloudwatchlogs.PutRetentionPolicyInput, ...request.Option) error); ok {
		r1 = rf(_a0, _a1, _a2...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// PutSubscriptionFilter provides a mock function with given fields: _a0
func (_m *CloudWatchLogsAPI) PutSubscriptionFilter(_a0 *cloudwatchlogs.PutSubscriptionFilterInput) (*cloudwatchlogs.PutSubscriptionFilterOutput, error) {
	ret := _m.Called(_a0)

	var r0 *cloudwatchlogs.PutSubscriptionFilterOutput
	if rf, ok := ret.Get(0).(func(*cloudwatchlogs.PutSubscriptionFilterInput) *cloudwatchlogs.PutSubscriptionFilterOutput); ok {
		r0 = rf(_a0)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*cloudwatchlogs.PutSubscriptionFilterOutput)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(*cloudwatchlogs.PutSubscriptionFilterInput) error); ok {
		r1 = rf(_a0)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// PutSubscriptionFilterRequest provides a mock function with given fields: _a0
func (_m *CloudWatchLogsAPI) PutSubscriptionFilterRequest(_a0 *cloudwatchlogs.PutSubscriptionFilterInput) (*request.Request, *cloudwatchlogs.PutSubscriptionFilterOutput) {
	ret := _m.Called(_a0)

	var r0 *request.Request
	if rf, ok := ret.Get(0).(func(*cloudwatchlogs.PutSubscriptionFilterInput) *request.Request); ok {
		r0 = rf(_a0)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*request.Request)
		}
	}

	var r1 *cloudwatchlogs.PutSubscriptionFilterOutput
	if rf, ok := ret.Get(1).(func(*cloudwatchlogs.PutSubscriptionFilterInput) *cloudwatchlogs.PutSubscriptionFilterOutput); ok {
		r1 = rf(_a0)
	} else {
		if ret.Get(1) != nil {
			r1 = ret.Get(1).(*cloudwatchlogs.PutSubscriptionFilterOutput)
		}
	}

	return r0, r1
}

// PutSubscriptionFilterWithContext provides a mock function with given fields: _a0, _a1, _a2
func (_m *CloudWatchLogsAPI) PutSubscriptionFilterWithContext(_a0 context.Context, _a1 *cloudwatchlogs.PutSubscriptionFilterInput, _a2 ...request.Option) (*cloudwatchlogs.PutSubscriptionFilterOutput, error) {
	_va := make([]interface{}, len(_a2))
	for _i := range _a2 {
		_va[_i] = _a2[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, _a0, _a1)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	var r0 *cloudwatchlogs.PutSubscriptionFilterOutput
	if rf, ok := ret.Get(0).(func(context.Context, *cloudwatchlogs.PutSubscriptionFilterInput, ...request.Option) *cloudwatchlogs.PutSubscriptionFilterOutput); ok {
		r0 = rf(_a0, _a1, _a2...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*cloudwatchlogs.PutSubscriptionFilterOutput)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, *cloudwatchlogs.PutSubscriptionFilterInput, ...request.Option) error); ok {
		r1 = rf(_a0, _a1, _a2...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// StartLiveTail provides a mock function with given fields: _a0
func (_m *CloudWatchLogsAPI) StartLiveTail(_a0 *cloudwatchlogs.StartLiveTailInput) (*cloudwatchlogs.StartLiveTailOutput, error) {
	ret := _m.Called(_a0)

	var r0 *cloudwatchlogs.StartLiveTailOutput
	if rf, ok := ret.Get(0).(func(*cloudwatchlogs.StartLiveTailInput) *cloudwatchlogs.StartLiveTailOutput); ok {
		r0 = rf(_a0)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*cloudwatchlogs.StartLiveTailOutput)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(*cloudwatchlogs.StartLiveTailInput) error); ok {
		r1 = rf(_a0)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// StartLiveTailRequest provides a mock function with given fields: _a0
func (_m *CloudWatchLogsAPI) StartLiveTailRequest(_a0 *cloudwatchlogs.StartLiveTailInput) (*request.Request, *cloudwatchlogs.StartLiveTailOutput) {
	ret := _m.Called(_a0)

	var r0 *request.Request
	if rf, ok := ret.Get(0).(func(*cloudwatchlogs.StartLiveTailInput) *request.Request); ok {
		r0 = rf(_a0)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*request.Request)
		}
	}

	var r1 *cloudwatchlogs.StartLiveTailOutput
	if rf, ok := ret.Get(1).(func(*cloudwatchlogs.StartLiveTailInput) *cloudwatchlogs.StartLiveTailOutput); ok {
		r1 = rf(_a0)
	} else {
		if ret.Get(1) != nil {
			r1 = ret.Get(1).(*cloudwatchlogs.StartLiveTailOutput)
		}
	}

	return r0, r1
}

// StartLiveTailWithContext provides a mock function with given fields: _a0, _a1, _a2
func (_m *CloudWatchLogsAPI) StartLiveTailWithContext(_a0 context.Context, _a1 *cloudwatchlogs.StartLiveTailInput, _a2 ...request.Option) (*cloudwatchlogs.StartLiveTailOutput, error) {
	_va := make([]interface{}, len(_a2))
	for _i := range _a2 {
		_va[_i] = _a2[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, _a0, _a1)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	var r0 *cloudwatchlogs.StartLiveTailOutput
	if rf, ok := ret.Get(0).(func(context.Context, *cloudwatchlogs.StartLiveTailInput, ...request.Option) *cloudwatchlogs.StartLiveTailOutput); ok {
		r0 = rf(_a0, _a1, _a2...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*cloudwatchlogs.StartLiveTailOutput)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, *cloudwatchlogs.StartLiveTailInput, ...request.Option) error); ok {
		r1 = rf(_a0, _a1, _a2...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// StartQuery provides a mock function with given fields: _a0
func (_m *CloudWatchLogsAPI) StartQuery(_a0 *cloudwatchlogs.StartQueryInput) (*cloudwatchlogs.StartQueryOutput, error) {
	ret := _m.Called(_a0)

	var r0 *cloudwatchlogs.StartQueryOutput
	if rf, ok := ret.Get(0).(func(*cloudwatchlogs.StartQueryInput) *cloudwatchlogs.StartQueryOutput); ok {
		r0 = rf(_a0)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*cloudwatchlogs.StartQueryOutput)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(*cloudwatchlogs.StartQueryInput) error); ok {
		r1 = rf(_a0)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// StartQueryRequest provides a mock function with given fields: _a0
func (_m *CloudWatchLogsAPI) StartQueryRequest(_a0 *cloudwatchlogs.StartQueryInput) (*request.Request, *cloudwatchlogs.StartQueryOutput) {
	ret := _m.Called(_a0)

	var r0 *request.Request
	if rf, ok := ret.Get(0).(func(*cloudwatchlogs.StartQueryInput) *request.Request); ok {
		r0 = rf(_a0)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*request.Request)
		}
	}

	var r1 *cloudwatchlogs.StartQueryOutput
	if rf, ok := ret.Get(1).(func(*cloudwatchlogs.StartQueryInput) *cloudwatchlogs.StartQueryOutput); ok {
		r1 = rf(_a0)
	} else {
		if ret.Get(1) != nil {
			r1 = ret.Get(1).(*cloudwatchlogs.StartQueryOutput)
		}
	}

	return r0, r1
}

// StartQueryWithContext provides a mock function with given fields: _a0, _a1, _a2
func (_m *CloudWatchLogsAPI) StartQueryWithContext(_a0 context.Context, _a1 *cloudwatchlogs.StartQueryInput, _a2 ...request.Option) (*cloudwatchlogs.StartQueryOutput, error) {
	_va := make([]interface{}, len(_a2))
	for _i := range _a2 {
		_va[_i] = _a2[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, _a0, _a1)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	var r0 *cloudwatchlogs.StartQueryOutput
	if rf, ok := ret.Get(0).(func(context.Context, *cloudwatchlogs.StartQueryInput, ...request.Option) *cloudwatchlogs.StartQueryOutput); ok {
		r0 = rf(_a0, _a1, _a2...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*cloudwatchlogs.StartQueryOutput)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, *cloudwatchlogs.StartQueryInput, ...request.Option) error); ok {
		r1 = rf(_a0, _a1, _a2...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// StopQuery provides a mock function with given fields: _a0
func (_m *CloudWatchLogsAPI) StopQuery(_a0 *cloudwatchlogs.StopQueryInput) (*cloudwatchlogs.StopQueryOutput, error) {
	ret := _m.Called(_a0)

	var r0 *cloudwatchlogs.StopQueryOutput
	if rf, ok := ret.Get(0).(func(*cloudwatchlogs.StopQueryInput) *cloudwatchlogs.StopQueryOutput); ok {
		r0 = rf(_a0)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*cloudwatchlogs.StopQueryOutput)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(*cloudwatchlogs.StopQueryInput) error); ok {
		r1 = rf(_a0)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// StopQueryRequest provides a mock function with given fields: _a0
func (_m *CloudWatchLogsAPI) StopQueryRequest(_a0 *cloudwatchlogs.StopQueryInput) (*request.Request, *cloudwatchlogs.StopQueryOutput) {
	ret := _m.Called(_a0)

	var r0 *request.Request
	if rf, ok := ret.Get(0).(func(*cloudwatchlogs.StopQueryInput) *request.Request); ok {
		r0 = rf(_a0)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*request.Request)
		}
	}

	var r1 *cloudwatchlogs.StopQueryOutput
	if rf, ok := ret.Get(1).(func(*cloudwatchlogs.StopQueryInput) *cloudwatchlogs.StopQueryOutput); ok {
		r1 = rf(_a0)
	} else {
		if ret.Get(1) != nil {
			r1 = ret.Get(1).(*cloudwatchlogs.StopQueryOutput)
		}
	}

	return r0, r1
}

// StopQueryWithContext provides a mock function with given fields: _a0, _a1, _a2
func (_m *CloudWatchLogsAPI) StopQueryWithContext(_a0 context.Context, _a1 *cloudwatchlogs.StopQueryInput, _a2 ...request.Option) (*cloudwatchlogs.StopQueryOutput, error) {
	_va := make([]interface{}, len(_a2))
	for _i := range _a2 {
		_va[_i] = _a2[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, _a0, _a1)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	var r0 *cloudwatchlogs.StopQueryOutput
	if rf, ok := ret.Get(0).(func(context.Context, *cloudwatchlogs.StopQueryInput, ...request.Option) *cloudwatchlogs.StopQueryOutput); ok {
		r0 = rf(_a0, _a1, _a2...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*cloudwatchlogs.StopQueryOutput)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, *cloudwatchlogs.StopQueryInput, ...request.Option) error); ok {
		r1 = rf(_a0, _a1, _a2...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// TagLogGroup provides a mock function with given fields: _a0
func (_m *CloudWatchLogsAPI) TagLogGroup(_a0 *cloudwatchlogs.TagLogGroupInput) (*cloudwatchlogs.TagLogGroupOutput, error) {
	ret := _m.Called(_a0)

	var r0 *cloudwatchlogs.TagLogGroupOutput
	if rf, ok := ret.Get(0).(func(*cloudwatchlogs.TagLogGroupInput) *cloudwatchlogs.TagLogGroupOutput); ok {
		r0 = rf(_a0)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*cloudwatchlogs.TagLogGroupOutput)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(*cloudwatchlogs.TagLogGroupInput) error); ok {
		r1 = rf(_a0)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// TagLogGroupRequest provides a mock function with given fields: _a0
func (_m *CloudWatchLogsAPI) TagLogGroupRequest(_a0 *cloudwatchlogs.TagLogGroupInput) (*request.Request, *cloudwatchlogs.TagLogGroupOutput) {
	ret := _m.Called(_a0)

	var r0 *request.Request
	if rf, ok := ret.Get(0).(func(*cloudwatchlogs.TagLogGroupInput) *request.Request); ok {
		r0 = rf(_a0)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*request.Request)
		}
	}

	var r1 *cloudwatchlogs.TagLogGroupOutput
	if rf, ok := ret.Get(1).(func(*cloudwatchlogs.TagLogGroupInput) *cloudwatchlogs.TagLogGroupOutput); ok {
		r1 = rf(_a0)
	} else {
		if ret.Get(1) != nil {
			r1 = ret.Get(1).(*cloudwatchlogs.TagLogGroupOutput)
		}
	}

	return r0, r1
}

// TagLogGroupWithContext provides a mock function with given fields: _a0, _a1, _a2
func (_m *CloudWatchLogsAPI) TagLogGroupWithContext(_a0 context.Context, _a1 *cloudwatchlogs.TagLogGroupInput, _a2 ...request.Option) (*cloudwatchlogs.TagLogGroupOutput, error) {
	_va := make([]interface{}, len(_a2))
	for _i := range _a2 {
		_va[_i] = _a2[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, _a0, _a1)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	var r0 *cloudwatchlogs.TagLogGroupOutput
	if rf, ok := ret.Get(0).(func(context.Context, *cloudwatchlogs.TagLogGroupInput, ...request.Option) *cloudwatchlogs.TagLogGroupOutput); ok {
		r0 = rf(_a0, _a1, _a2...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*cloudwatchlogs.TagLogGroupOutput)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, *cloudwatchlogs.TagLogGroupInput, ...request.Option) error); ok {
		r1 = rf(_a0, _a1, _a2...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// TagResource provides a mock function with given fields: _a0
func (_m *CloudWatchLogsAPI) TagResource(_a0 *cloudwatchlogs.TagResourceInput) (*cloudwatchlogs.TagResourceOutput, error) {
	ret := _m.Called(_a0)

	var r0 *cloudwatchlogs.TagResourceOutput
	if rf, ok := ret.Get(0).(func(*cloudwatchlogs.TagResourceInput) *cloudwatchlogs.TagResourceOutput); ok {
		r0 = rf(_a0)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*cloudwatchlogs.TagResourceOutput)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(*cloudwatchlogs.TagResourceInput) error); ok {
		r1 = rf(_a0)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// TagResourceRequest provides a mock function with given fields: _a0
func (_m *CloudWatchLogsAPI) TagResourceRequest(_a0 *cloudwatchlogs.TagResourceInput) (*request.Request, *cloudwatchlogs.TagResourceOutput) {
	ret := _m.Called(_a0)

	var r0 *request.Request
	if rf, ok := ret.Get(0).(func(*cloudwatchlogs.TagResourceInput) *request.Request); ok {
		r0 = rf(_a0)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*request.Request)
		}
	}

	var r1 *cloudwatchlogs.TagResourceOutput
	if rf, ok := ret.Get(1).(func(*cloudwatchlogs.TagResourceInput) *cloudwatchlogs.TagResourceOutput); ok {
		r1 = rf(_a0)
	} else {
		if ret.Get(1) != nil {
			r1 = ret.Get(1).(*cloudwatchlogs.TagResourceOutput)
		}
	}

	return r0, r1
}

// TagResourceWithContext provides a mock function with given fields: _a0, _a1, _a2
func (_m *CloudWatchLogsAPI) TagResourceWithContext(_a0 context.Context, _a1 *cloudwatchlogs.TagResourceInput, _a2 ...request.Option) (*cloudwatchlogs.TagResourceOutput, error) {
	_va := make([]interface{}, len(_a2))
	for _i := range _a2 {
		_va[_i] = _a2[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, _a0, _a1)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	var r0 *cloudwatchlogs.TagResourceOutput
	if rf, ok := ret.Get(0).(func(context.Context, *cloudwatchlogs.TagResourceInput, ...request.Option) *cloudwatchlogs.TagResourceOutput); ok {
		r0 = rf(_a0, _a1, _a2...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*cloudwatchlogs.TagResourceOutput)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, *cloudwatchlogs.TagResourceInput, ...request.Option) error); ok {
		r1 = rf(_a0, _a1, _a2...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// TestMetricFilter provides a mock function with given fields: _a0
func (_m *CloudWatchLogsAPI) TestMetricFilter(_a0 *cloudwatchlogs.TestMetricFilterInput) (*cloudwatchlogs.TestMetricFilterOutput, error) {
	ret := _m.Called(_a0)

	var r0 *cloudwatchlogs.TestMetricFilterOutput
	if rf, ok := ret.Get(0).(func(*cloudwatchlogs.TestMetricFilterInput) *cloudwatchlogs.TestMetricFilterOutput); ok {
		r0 = rf(_a0)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*cloudwatchlogs.TestMetricFilterOutput)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(*cloudwatchlogs.TestMetricFilterInput) error); ok {
		r1 = rf(_a0)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// TestMetricFilterRequest provides a mock function with given fields: _a0
func (_m *CloudWatchLogsAPI) TestMetricFilterRequest(_a0 *cloudwatchlogs.TestMetricFilterInput) (*request.Request, *cloudwatchlogs.TestMetricFilterOutput) {
	ret := _m.Called(_a0)

	var r0 *request.Request
	if rf, ok := ret.Get(0).(func(*cloudwatchlogs.TestMetricFilterInput) *request.Request); ok {
		r0 = rf(_a0)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*request.Request)
		}
	}

	var r1 *cloudwatchlogs.TestMetricFilterOutput
	if rf, ok := ret.Get(1).(func(*cloudwatchlogs.TestMetricFilterInput) *cloudwatchlogs.TestMetricFilterOutput); ok {
		r1 = rf(_a0)
	} else {
		if ret.Get(1) != nil {
			r1 = ret.Get(1).(*cloudwatchlogs.TestMetricFilterOutput)
		}
	}

	return r0, r1
}

// TestMetricFilterWithContext provides a mock function with given fields: _a0, _a1, _a2
func (_m *CloudWatchLogsAPI) TestMetricFilterWithContext(_a0 context.Context, _a1 *cloudwatchlogs.TestMetricFilterInput, _a2 ...request.Option) (*cloudwatchlogs.TestMetricFilterOutput, error) {
	_va := make([]interface{}, len(_a2))
	for _i := range _a2 {
		_va[_i] = _a2[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, _a0, _a1)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	var r0 *cloudwatchlogs.TestMetricFilterOutput
	if rf, ok := ret.Get(0).(func(context.Context, *cloudwatchlogs.TestMetricFilterInput, ...request.Option) *cloudwatchlogs.TestMetricFilterOutput); ok {
		r0 = rf(_a0, _a1, _a2...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*cloudwatchlogs.TestMetricFilterOutput)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, *cloudwatchlogs.TestMetricFilterInput, ...request.Option) error); ok {
		r1 = rf(_a0, _a1, _a2...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// UntagLogGroup provides a mock function with given fields: _a0
func (_m *CloudWatchLogsAPI) UntagLogGroup(_a0 *cloudwatchlogs.UntagLogGroupInput) (*cloudwatchlogs.UntagLogGroupOutput, error) {
	ret := _m.Called(_a0)

	var r0 *cloudwatchlogs.UntagLogGroupOutput
	if rf, ok := ret.Get(0).(func(*cloudwatchlogs.UntagLogGroupInput) *cloudwatchlogs.UntagLogGroupOutput); ok {
		r0 = rf(_a0)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*cloudwatchlogs.UntagLogGroupOutput)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(*cloudwatchlogs.UntagLogGroupInput) error); ok {
		r1 = rf(_a0)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// UntagLogGroupRequest provides a mock function with given fields: _a0
func (_m *CloudWatchLogsAPI) UntagLogGroupRequest(_a0 *cloudwatchlogs.UntagLogGroupInput) (*request.Request, *cloudwatchlogs.UntagLogGroupOutput) {
	ret := _m.Called(_a0)

	var r0 *request.Request
	if rf, ok := ret.Get(0).(func(*cloudwatchlogs.UntagLogGroupInput) *request.Request); ok {
		r0 = rf(_a0)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*request.Request)
		}
	}

	var r1 *cloudwatchlogs.UntagLogGroupOutput
	if rf, ok := ret.Get(1).(func(*cloudwatchlogs.UntagLogGroupInput) *cloudwatchlogs.UntagLogGroupOutput); ok {
		r1 = rf(_a0)
	} else {
		if ret.Get(1) != nil {
			r1 = ret.Get(1).(*cloudwatchlogs.UntagLogGroupOutput)
		}
	}

	return r0, r1
}

// UntagLogGroupWithContext provides a mock function with given fields: _a0, _a1, _a2
func (_m *CloudWatchLogsAPI) UntagLogGroupWithContext(_a0 context.Context, _a1 *cloudwatchlogs.UntagLogGroupInput, _a2 ...request.Option) (*cloudwatchlogs.UntagLogGroupOutput, error) {
	_va := make([]interface{}, len(_a2))
	for _i := range _a2 {
		_va[_i] = _a2[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, _a0, _a1)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	var r0 *cloudwatchlogs.UntagLogGroupOutput
	if rf, ok := ret.Get(0).(func(context.Context, *cloudwatchlogs.UntagLogGroupInput, ...request.Option) *cloudwatchlogs.UntagLogGroupOutput); ok {
		r0 = rf(_a0, _a1, _a2...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*cloudwatchlogs.UntagLogGroupOutput)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, *cloudwatchlogs.UntagLogGroupInput, ...request.Option) error); ok {
		r1 = rf(_a0, _a1, _a2...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// UntagResource provides a mock function with given fields: _a0
func (_m *CloudWatchLogsAPI) UntagResource(_a0 *cloudwatchlogs.UntagResourceInput) (*cloudwatchlogs.UntagResourceOutput, error) {
	ret := _m.Called(_a0)

	var r0 *cloudwatchlogs.UntagResourceOutput
	if rf, ok := ret.Get(0).(func(*cloudwatchlogs.UntagResourceInput) *cloudwatchlogs.UntagResourceOutput); ok {
		r0 = rf(_a0)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*cloudwatchlogs.UntagResourceOutput)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(*cloudwatchlogs.UntagResourceInput) error); ok {
		r1 = rf(_a0)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// UntagResourceRequest provides a mock function with given fields: _a0
func (_m *CloudWatchLogsAPI) UntagResourceRequest(_a0 *cloudwatchlogs.UntagResourceInput) (*request.Request, *cloudwatchlogs.UntagResourceOutput) {
	ret := _m.Called(_a0)

	var r0 *request.Request
	if rf, ok := ret.Get(0).(func(*cloudwatchlogs.UntagResourceInput) *request.Request); ok {
		r0 = rf(_a0)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*request.Request)
		}
	}

	var r1 *cloudwatchlogs.UntagResourceOutput
	if rf, ok := ret.Get(1).(func(*cloudwatchlogs.UntagResourceInput) *cloudwatchlogs.UntagResourceOutput); ok {
		r1 = rf(_a0)
	} else {
		if ret.Get(1) != nil {
			r1 = ret.Get(1).(*cloudwatchlogs.UntagResourceOutput)
		}
	}

	return r0, r1
}

// UntagResourceWithContext provides a mock function with given fields: _a0, _a1, _a2
func (_m *CloudWatchLogsAPI) UntagResourceWithContext(_a0 context.Context, _a1 *cloudwatchlogs.UntagResourceInput, _a2 ...request.Option) (*cloudwatchlogs.UntagResourceOutput, error) {
	_va := make([]interface{}, len(_a2))
	for _i := range _a2 {
		_va[_i] = _a2[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, _a0, _a1)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	var r0 *cloudwatchlogs.UntagResourceOutput
	if rf, ok := ret.Get(0).(func(context.Context, *cloudwatchlogs.UntagResourceInput, ...request.Option) *cloudwatchlogs.UntagResourceOutput); ok {
		r0 = rf(_a0, _a1, _a2...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*cloudwatchlogs.UntagResourceOutput)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, *cloudwatchlogs.UntagResourceInput, ...request.Option) error); ok {
		r1 = rf(_a0, _a1, _a2...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// UpdateAnomaly provides a mock function with given fields: _a0
func (_m *CloudWatchLogsAPI) UpdateAnomaly(_a0 *cloudwatchlogs.UpdateAnomalyInput) (*cloudwatchlogs.UpdateAnomalyOutput, error) {
	ret := _m.Called(_a0)

	var r0 *cloudwatchlogs.UpdateAnomalyOutput
	if rf, ok := ret.Get(0).(func(*cloudwatchlogs.UpdateAnomalyInput) *cloudwatchlogs.UpdateAnomalyOutput); ok {
		r0 = rf(_a0)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*cloudwatchlogs.UpdateAnomalyOutput)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(*cloudwatchlogs.UpdateAnomalyInput) error); ok {
		r1 = rf(_a0)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// UpdateAnomalyRequest provides a mock function with given fields: _a0
func (_m *CloudWatchLogsAPI) UpdateAnomalyRequest(_a0 *cloudwatchlogs.UpdateAnomalyInput) (*request.Request, *cloudwatchlogs.UpdateAnomalyOutput) {
	ret := _m.Called(_a0)

	var r0 *request.Request
	if rf, ok := ret.Get(0).(func(*cloudwatchlogs.UpdateAnomalyInput) *request.Request); ok {
		r0 = rf(_a0)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*request.Request)
		}
	}

	var r1 *cloudwatchlogs.UpdateAnomalyOutput
	if rf, ok := ret.Get(1).(func(*cloudwatchlogs.UpdateAnomalyInput) *cloudwatchlogs.UpdateAnomalyOutput); ok {
		r1 = rf(_a0)
	} else {
		if ret.Get(1) != nil {
			r1 = ret.Get(1).(*cloudwatchlogs.UpdateAnomalyOutput)
		}
	}

	return r0, r1
}

// UpdateAnomalyWithContext provides a mock function with given fields: _a0, _a1, _a2
func (_m *CloudWatchLogsAPI) UpdateAnomalyWithContext(_a0 context.Context, _a1 *cloudwatchlogs.UpdateAnomalyInput, _a2 ...request.Option) (*cloudwatchlogs.UpdateAnomalyOutput, error) {
	_va := make([]interface{}, len(_a2))
	for _i := range _a2 {
		_va[_i] = _a2[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, _a0, _a1)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	var r0 *cloudwatchlogs.UpdateAnomalyOutput
	if rf, ok := ret.Get(0).(func(context.Context, *cloudwatchlogs.UpdateAnomalyInput, ...request.Option) *cloudwatchlogs.UpdateAnomalyOutput); ok {
		r0 = rf(_a0, _a1, _a2...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*cloudwatchlogs.UpdateAnomalyOutput)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, *cloudwatchlogs.UpdateAnomalyInput, ...request.Option) error); ok {
		r1 = rf(_a0, _a1, _a2...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// UpdateLogAnomalyDetector provides a mock function with given fields: _a0
func (_m *CloudWatchLogsAPI) UpdateLogAnomalyDetector(_a0 *cloudwatchlogs.UpdateLogAnomalyDetectorInput) (*cloudwatchlogs.UpdateLogAnomalyDetectorOutput, error) {
	ret := _m.Called(_a0)

	var r0 *cloudwatchlogs.UpdateLogAnomalyDetectorOutput
	if rf, ok := ret.Get(0).(func(*cloudwatchlogs.UpdateLogAnomalyDetectorInput) *cloudwatchlogs.UpdateLogAnomalyDetectorOutput); ok {
		r0 = rf(_a0)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*cloudwatchlogs.UpdateLogAnomalyDetectorOutput)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(*cloudwatchlogs.UpdateLogAnomalyDetectorInput) error); ok {
		r1 = rf(_a0)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// UpdateLogAnomalyDetectorRequest provides a mock function with given fields: _a0
func (_m *CloudWatchLogsAPI) UpdateLogAnomalyDetectorRequest(_a0 *cloudwatchlogs.UpdateLogAnomalyDetectorInput) (*request.Request, *cloudwatchlogs.UpdateLogAnomalyDetectorOutput) {
	ret := _m.Called(_a0)

	var r0 *request.Request
	if rf, ok := ret.Get(0).(func(*cloudwatchlogs.UpdateLogAnomalyDetectorInput) *request.Request); ok {
		r0 = rf(_a0)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*request.Request)
		}
	}

	var r1 *cloudwatchlogs.UpdateLogAnomalyDetectorOutput
	if rf, ok := ret.Get(1).(func(*cloudwatchlogs.UpdateLogAnomalyDetectorInput) *cloudwatchlogs.UpdateLogAnomalyDetectorOutput); ok {
		r1 = rf(_a0)
	} else {
		if ret.Get(1) != nil {
			r1 = ret.Get(1).(*cloudwatchlogs.UpdateLogAnomalyDetectorOutput)
		}
	}

	return r0, r1
}

// UpdateLogAnomalyDetectorWithContext provides a mock function with given fields: _a0, _a1, _a2
func (_m *CloudWatchLogsAPI) UpdateLogAnomalyDetectorWithContext(_a0 context.Context, _a1 *cloudwatchlogs.UpdateLogAnomalyDetectorInput, _a2 ...request.Option) (*cloudwatchlogs.UpdateLogAnomalyDetectorOutput, error) {
	_va := make([]interface{}, len(_a2))
	for _i := range _a2 {
		_va[_i] = _a2[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, _a0, _a1)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	var r0 *cloudwatchlogs.UpdateLogAnomalyDetectorOutput
	if rf, ok := ret.Get(0).(func(context.Context, *cloudwatchlogs.UpdateLogAnomalyDetectorInput, ...request.Option) *cloudwatchlogs.UpdateLogAnomalyDetectorOutput); ok {
		r0 = rf(_a0, _a1, _a2...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*cloudwatchlogs.UpdateLogAnomalyDetectorOutput)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, *cloudwatchlogs.UpdateLogAnomalyDetectorInput, ...request.Option) error); ok {
		r1 = rf(_a0, _a1, _a2...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

type NewCloudWatchLogsAPIT interface {
	mock.TestingT
	Cleanup(func())
}

// NewCloudWatchLogsAPI creates a new instance of CloudWatchLogsAPI. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
func NewCloudWatchLogsAPI(t NewCloudWatchLogsAPIT) *CloudWatchLogsAPI {
	mock := &CloudWatchLogsAPI{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
