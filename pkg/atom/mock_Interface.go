// Code generated by mockery v1.0.0. DO NOT EDIT.

package atom

import mock "github.com/stretchr/testify/mock"

// MockInterface is an autogenerated mock type for the Interface type
type MockInterface struct {
	mock.Mock
}

// Apply provides a mock function with given fields: ns, name, release, template, timeout
func (_m *MockInterface) Apply(ns string, name string, release string, template []byte, timeout int32) error {
	ret := _m.Called(ns, name, release, template, timeout)

	var r0 error
	if rf, ok := ret.Get(0).(func(string, string, string, []byte, int32) error); ok {
		r0 = rf(ns, name, release, template, timeout)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// Cancel provides a mock function with given fields: ns, name
func (_m *MockInterface) Cancel(ns string, name string) error {
	ret := _m.Called(ns, name)

	var r0 error
	if rf, ok := ret.Get(0).(func(string, string) error); ok {
		r0 = rf(ns, name)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// Status provides a mock function with given fields: ns, name
func (_m *MockInterface) Status(ns string, name string) (string, string, error) {
	ret := _m.Called(ns, name)

	var r0 string
	if rf, ok := ret.Get(0).(func(string, string) string); ok {
		r0 = rf(ns, name)
	} else {
		r0 = ret.Get(0).(string)
	}

	var r1 string
	if rf, ok := ret.Get(1).(func(string, string) string); ok {
		r1 = rf(ns, name)
	} else {
		r1 = ret.Get(1).(string)
	}

	var r2 error
	if rf, ok := ret.Get(2).(func(string, string) error); ok {
		r2 = rf(ns, name)
	} else {
		r2 = ret.Error(2)
	}

	return r0, r1, r2
}
