AWSTemplateFormatVersion: "2010-09-09"
Conditions:
  SshKey: !Not [ !Equals [ !Ref SshKey, "" ] ]
Mappings:
  SubnetMasks:
    "16": { Public: 12, Private: 14 }
    "17": { Public: 11, Private: 13 }
    "18": { Public: 10, Private: 12 }
    "19": { Public: 9, Private: 11 }
    "20": { Public: 8, Private: 10 }
    "21": { Public: 7, Private: 9 }
    "22": { Public: 6, Private: 8 }
    "23": { Public: 5, Private: 7 }
    "24": { Public: 4, Private: 6 }
Outputs:
  EventQueue:
    Value: !Ref EventQueue
  EventTopic:
    Value: !Ref EventTopic
  RackBucket:
    Value: !Ref RackBucket
  RouterTargetGroup80:
    Value: !Ref RouterTargetGroup80
  RouterTargetGroup443:
    Value: !Ref RouterTargetGroup443
Parameters:
  Ami:
    Type: String
    MinLength: 1
  Cluster:
    Type: String
    MinLength: 1
  Role:
    Type: String
    MinLength: 1
  Security:
    Type: AWS::EC2::SecurityGroup::Id
  SshKey:
    Type: String
    Default: ""
  Subnets:
    Type: List<AWS::EC2::Subnet::Id>
  Type:
    Type: String
    Default: t3.small
  Vpc:
    Type: AWS::EC2::VPC::Id
Resources:
  # AutoscalerRole:
  #   Type: AWS::IAM::Role
  #   Properties:
  #     AssumeRolePolicyDocument:
  #       Version: "2012-10-17"
  #       Statement:
  #         - Effect: "Allow"
  #           Principal: !Ref Role
  #           Action: sts:AssumeRole
  #     Path: /convox/
  #     Policies:
  #       - PolicyName: alb-ingress
  #         PolicyDocument:
  #           Version: "2012-10-17"
  #           Statement:
  #           - Effect: Allow
  #             Action:
  #             - autoscaling:DescribeAutoScalingGroups
  #             - autoscaling:DescribeAutoScalingInstances
  #             - autoscaling:DescribeTags
  #             Resource: "*"
  #           - Effect: Allow
  #             Action:
  #             - autoscaling:SetDesiredCapacity
  #             - autoscaling:TerminateInstanceInAutoScalingGroup
  #             Resource: !Sub "arn:aws:autoscaling:${AWS::Region}:${AWS::AccountId}:autoScalingGroup:*:autoScalingGroupName/${Nodes}"
  EventQueue:
    Type: AWS::SQS::Queue
  EventQueuePolicy:
    Type: AWS::SQS::QueuePolicy
    Properties:
      Queues:
        - !Ref EventQueue
      PolicyDocument:
        Version: "2012-10-17"
        Statement:
          - Effect: Allow
            Principal: { "AWS": "*" }
            Action: sqs:SendMessage
            Resource: !GetAtt EventQueue.Arn
            Condition: { "ArnEquals": { "aws:SourceArn": !Ref EventTopic } }
  EventTopic:
    Type: AWS::SNS::Topic
    Properties:
      DisplayName: !Ref AWS::StackName
      Subscription:
        - Protocol: sqs
          Endpoint: !GetAtt EventQueue.Arn
  NodesInstanceProfile:
    Type: AWS::IAM::InstanceProfile
    Properties:
      Path: /convox/
      Roles:
        - !Ref Role
  NodesLaunchConfig:
    Type: AWS::AutoScaling::LaunchConfiguration
    Properties:
      AssociatePublicIpAddress: true
      IamInstanceProfile: !Ref NodesInstanceProfile
      ImageId: !Ref Ami
      InstanceType: !Ref Type
      KeyName: !If [ SshKey, !Ref SshKey, !Ref "AWS::NoValue" ]
      SecurityGroups:
        - !Ref Security
      UserData:
        Fn::Base64: !Sub |
          #!/bin/bash -xe
          /etc/eks/bootstrap.sh ${Cluster}
          /opt/aws/bin/cfn-signal -e $? --stack ${AWS::StackName} --resource Nodes --region ${AWS::Region}
  Nodes:
    Type: AWS::AutoScaling::AutoScalingGroup
    Properties:
      LaunchConfigurationName: !Ref NodesLaunchConfig
      MinSize: 3
      MaxSize: 20
      TargetGroupARNs:
        - !Ref RouterTargetGroup80
        - !Ref RouterTargetGroup443
      VPCZoneIdentifier:
        - !Select [ 0, !Ref Subnets ]
        - !Select [ 1, !Ref Subnets ]
        - !Select [ 2, !Ref Subnets ]
      Tags:
        - Key: Name
          Value: !Ref AWS::StackName
          PropagateAtLaunch: true
        - Key: !Sub "kubernetes.io/cluster/${Cluster}"
          Value: owned
          PropagateAtLaunch: true
        - Key: k8s.io/cluster-autoscaler/enabled
          Value: ""
          PropagateAtLaunch: false
        - Key: !Sub k8s.io/cluster-autoscaler/${Cluster}
          Value: ""
          PropagateAtLaunch: false
    UpdatePolicy:
      AutoScalingRollingUpdate:
        MinInstancesInService: 2
        MaxBatchSize: 1
        PauseTime: PT5M
        SuspendProcesses: [ ScheduledActions ]
        WaitOnResourceSignals: true
  RackBucket:
    Type: AWS::S3::Bucket
    DeletionPolicy: Retain
    Properties:
      AccessControl: Private
      BucketEncryption:
        ServerSideEncryptionConfiguration:
          - ServerSideEncryptionByDefault:
              SSEAlgorithm: aws:kms
  RouterTargetGroup80:
    Type: AWS::ElasticLoadBalancingV2::TargetGroup
    Properties:
      HealthCheckIntervalSeconds: 10
      HealthCheckPath: /convox/health
      HealthCheckProtocol: HTTP
      HealthyThresholdCount: 2
      Port: 32000
      Protocol: TCP
      TargetType: instance
      UnhealthyThresholdCount: 2
      VpcId: !Ref Vpc
  RouterTargetGroup443:
    Type: AWS::ElasticLoadBalancingV2::TargetGroup
    Properties:
      HealthCheckIntervalSeconds: 10
      HealthCheckPath: /convox/health
      HealthCheckProtocol: HTTPS
      HealthyThresholdCount: 2
      Port: 32001
      Protocol: TCP
      TargetType: instance
      UnhealthyThresholdCount: 2
      VpcId: !Ref Vpc